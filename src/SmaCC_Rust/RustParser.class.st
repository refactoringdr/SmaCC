Class {
	#name : #RustParser,
	#superclass : #SmaCCGLRParser,
	#category : #'SmaCC_Rust'
}

{ #category : #generated }
RustParser class >> ambiguousTransitions [
^#(
#[ 0 30 0 34] 
#[ 0 46 2 61] 
#[ 0 50 2 69] 
#[ 0 186 2 173] 
#[ 0 198 2 173] 
#[ 1 6 1 25] 
#[ 1 6 1 33] 
#[ 0 117 1 6] 
#[ 0 121 1 6] 
#[ 1 6 1 185] 
#[ 1 82 1 86] 
#[ 1 94 2 173] 
#[ 1 98 4 73] 
#[ 1 106 1 110] 
#[ 1 114 4 89] 
#[ 1 158 2 173] 
#[ 1 222 2 173] 
#[ 1 106 1 110 5 249] 
#[ 2 14 4 89] 
#[ 1 86 2 26] 
#[ 2 90 4 89] 
#[ 2 94 4 89] 
#[ 2 18 9 21] 
#[ 2 66 9 25] 
#[ 2 242 4 89] 
#[ 3 54 3 101] 
#[ 1 173 3 54] 
#[ 1 90 3 138] 
#[ 1 94 3 142] 
#[ 1 90 14 33] 
#[ 2 246 14 105] 
#[ 4 106 6 197] 
#[ 4 110 6 197] 
#[ 4 114 6 197] 
#[ 4 118 6 197] 
#[ 1 6 15 145] 
#[ 4 202 16 101] 
#[ 4 210 16 117] 
#[ 0 25 1 6] 
#[ 1 6 9 97] 
#[ 1 106 2 66] 
#[ 1 106 1 110 2 66] 
#[ 6 197 7 190] 
#[ 6 197 7 198] 
#[ 0 190 8 90] 
#[ 1 6 20 73] 
#[ 4 126 8 126] 
#[ 4 130 8 130] 
#[ 6 197 8 134] 
#[ 0 74 1 14] 
#[ 1 18 2 149] 
#[ 0 78 9 26] 
#[ 0 182 2 141] 
#[ 0 29 0 182] 
#[ 0 182 9 65] 
#[ 0 182 9 73] 
#[ 0 182 1 25] 
#[ 0 182 1 29] 
#[ 0 182 1 33] 
#[ 0 81 0 182] 
#[ 0 93 0 182] 
#[ 0 182 9 117] 
#[ 0 117 0 182] 
#[ 0 121 0 182] 
#[ 4 130 9 50] 
#[ 1 6 2 141] 
#[ 0 246 7 210] 
#[ 0 54 9 198] 
#[ 0 54 23 29] 
#[ 1 10 7 250] 
#[ 4 69 4 210] 
#[ 1 98 4 210] 
#[ 1 98 4 210 23 49] 
#[ 8 34 10 74] 
#[ 10 118 23 229] 
#[ 10 126 24 65] 
#[ 0 190 10 206] 
#[ 1 6 24 145] 
#[ 2 6 10 70] 
#[ 0 54 12 78] 
#[ 0 190 8 90 10 106] 
#[ 12 190 23 229] 
#[ 12 238 24 145] 
#[ 1 6 12 250] 
#[ 0 54 13 138] 
#[ 0 54 13 142] 
#[ 3 70 11 62] 
#[ 5 6 8 202] 
#[ 14 6 27 237] 
#[ 0 54 14 142] 
#[ 8 246 11 90] 
#[ 8 254 11 94] 
#[ 12 234 13 218] 
#[ 14 206 28 205] 
#[ 11 118 13 38] 
#[ 4 130 15 174]
	).
]

{ #category : #'generated-accessing' }
RustParser class >> cacheId [
	^'2022-04-15T15:19:28.530712-05:00'
]

{ #category : #generated }
RustParser class >> definitionComment [
"/*
Copyright (c) 2010 The Rust Project Developers
Copyright (c) 2020-2021 Student Main

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice (including the next paragraph) shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

%unicode;

%glr;
%id <lt> <gt> <amp> <rawString> <FLOAT_LITERAL> <INTEGER_LITERAL> <lparen> <lbracket>;
%right ""box"" ""break"" ""continue"" ""return"";
%right ""="" ""+="" ""-="" ""*="" ""/="" ""%="" ""&="" ""|="" ""^="" ""<<="" "">>="" ;
%nonassoc "".."" ""..="";
%left ""||"";
%left ""&&"";
%nonassoc <lt> ""<="" <gt> "">="" ""=="" ""!="" ;
%left <bar>;
%left ""^"";
%left <amp>;
%left ""<<"" "">>"" "">>>"";
%left ""+"" ""-"";
%left ""*"" ""/"" ""%"";
%left ""as"";
### unary %right ""-"" ""*"" ""!"" ""&"" ;
%left ""?"";
%left ""."";
%left <lparen> <lbracket>;
%prefix Rust;
%suffix Node;
%root Program;
%hierarchy Expression (
	ArrayExpression
	AssignmentExpression
	AsyncBlockExpression
	AttributedExpression
	AwaitExpression
	BinaryExpression
	BlockExpression
	BorrowExpression
	BoxExpression
	BreakExpression
	CallExpression
	ClosureExpression
	ContinueExpression
	ErrorPropogationExpression
	FieldExpression
	ForIteratorLoopExpression
	GroupedExpression
	IfExpression
	IfLetExpression
	IndexExpression
	LiteralExpression
	LoopExpression
	MacroInvocation
	MatchExpression
	MethodCallExpression
	PathExpression
	RangeExpression
	ReturnExpression
	StructExprStruct
	StructExprTuple
	TupleExpression
	TupleIndexExpression
	TypeCastExpression
	UnaryExpression
	UnsafeBlockExpression
	WhileLetLoopExpression
	WhileLoopExpression
);
%hierarchy Statement (
	EmptyStatement
	ExpressionStatement
	ItemStatement
	LetStatement
	MacroInvocationStatement
);
%hierarchy Type (
	ArrayType
	FunctionType
	ImplTraitType
	InferredType
	NeverType
	ParenthesizedType
	QualifiedPathInType
	RawPointerType
	ReferenceType
	SliceType
	TraitObjectType
	TupleType
	TypePath
);

<bar> : \|;
<lparen> : \(;
<lbracket> : \[;
/*parser grammar RustParser
   ;*/

/*
Copyright (c) 2010 The Rust Project Developers
Copyright (c) 2020-2021 Student Main

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice (including the next paragraph) shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/*lexer grammar RustLexer
   ;*/

/* TODO: options
{
   superClass = RustLexerBase;
} */

# https://doc.rust-lang.org/reference/keywords.html strict
# 2018+
# reserved
# reserved 2018+
# weak
# rule itself allow any identifier, but keyword has been matched before
<NON_KEYWORD_IDENTIFIER>: <isLetter>(_ | <isAlphaNumeric>)* | _ (_ | <isAlphaNumeric>)+;
<RAW_IDENTIFIER>: r\# <NON_KEYWORD_IDENTIFIER>;
# comments https://doc.rust-lang.org/reference/comments.html
<comment>
	: \/\/[^\r\n]*
	|  (\/\* [^\*]* \*+ ([^\/\*] [^\*]* \*+)* \/)
	;

shebang <SHEBANG>: \xfeff? \#\! [^\r\n\[] [^\r\n]*;

#ISOLATED_CR
# : '\r' {_input.LA(1)!='\n'}// not followed with \n ;

# whitespace https://doc.rust-lang.org/reference/whitespace.html
<whitespace>: \s+;

# tokens char and string
<CHAR_LITERAL>
   : \'
   (
      [^\'\\\n\r\t]
      | <QUOTE_ESCAPE>
      | <ASCII_ESCAPE>
      | <UNICODE_ESCAPE>
   ) \'
   ;

<STRING_LITERAL>
   : \""
   (
      [^\""\\]
      | <QUOTE_ESCAPE>
      | <ASCII_ESCAPE>
      | <UNICODE_ESCAPE>
      | <ESC_NEWLINE>
   )* \""
   ;

<rawStringStart>: b?r \#+ \"";

<simpleRawString>: b?r \"" [^\""]* \"";	#### fix

<BYTE_LITERAL>: b\' (. | <QUOTE_ESCAPE> | <BYTE_ESCAPE>) \';

<BYTE_STRING_LITERAL>: b\"" ([^\""] | <QUOTE_ESCAPE> | <BYTE_ESCAPE>)* \"";

<ASCII_ESCAPE>: \\x <OCT_DIGIT> <HEX_DIGIT> | <COMMON_ESCAPE>;

<BYTE_ESCAPE>: \\x <HEX_DIGIT> <HEX_DIGIT> | <COMMON_ESCAPE>;

<COMMON_ESCAPE>: \\ [nrt\\0];

<UNICODE_ESCAPE>
   : \\u\{ <HEX_DIGIT> <HEX_DIGIT>? <HEX_DIGIT>? <HEX_DIGIT>? <HEX_DIGIT>? <HEX_DIGIT>? \}
   ;

<QUOTE_ESCAPE>: \\ [\'\""];

<ESC_NEWLINE>: \\ \n;

# number

<INTEGER_LITERAL>
   :
   (
      <DEC_LITERAL>
      | <BIN_LITERAL>
      | <OCT_LITERAL>
      | <HEX_LITERAL>
   ) <INTEGER_SUFFIX>?
   ;

<DEC_LITERAL>: <DEC_DIGIT> (<DEC_DIGIT> | _)*;

<HEX_LITERAL>: 0x _* <HEX_DIGIT> (<HEX_DIGIT> | _)*;

<OCT_LITERAL>: 0o _* <OCT_DIGIT> (<OCT_DIGIT> | _)*;

<BIN_LITERAL>: 0b _* [01] [01_]*;
<potentialFloat>
	: <DEC_LITERAL> \.
	;

<FLOAT_LITERAL>
   : <DEC_LITERAL> <FLOAT_EXPONENT> <FLOAT_SUFFIX>?
   | <DEC_LITERAL> <FLOAT_SUFFIX>
   | <DEC_LITERAL> \. <DEC_LITERAL> <FLOAT_EXPONENT>? <FLOAT_SUFFIX>?
   ;

<INTEGER_SUFFIX>
   : u8
   | u16
   | u32
   | u64
   | u128
   | usize
   | i8
   | i16
   | i32
   | i64
   | i128
   | isize
   ;

<FLOAT_SUFFIX>: f32 | f64;

<FLOAT_EXPONENT>: [eE] [\+\-]? _* <DEC_LITERAL>;

<OCT_DIGIT>: [0-7];

<DEC_DIGIT>: [0-9];

<HEX_DIGIT>: [0-9a-fA-F];

# LIFETIME_TOKEN: '\'' IDENTIFIER_OR_KEYWORD | '\'_';

<LIFETIME_OR_LABEL>: \' <NON_KEYWORD_IDENTIFIER>;

#SHL: '<<'; SHR: '>>'; removed to avoid confusion in type parameter

<lt>
	: <
	;
<gt>
	: \>
	;
<amp>
	: \&
	;
# entry point
# 4
crate
   : <SHEBANG> 'shebang'? innerAttribute 'attr'* item+? {{}}
   ;

# 3
macroInvocation ###
   : macroInvocationWithoutBlock
   | macroInvocationWithBlock
   ;
macroInvocationWithBlock ###
	: simplePath 'name' ""!"" 'bang' ""{"" 'left' tokenTree* ""}"" 'right' {{MacroInvocation}}
	;
macroInvocationWithoutBlock ###
	: simplePath 'name' ""!"" 'bang' ""("" 'left' tokenTree* "")"" 'right' {{MacroInvocation}}
	| simplePath 'name' ""!"" 'bang' ""["" 'left' tokenTree* ""]"" 'right' {{MacroInvocation}}
	;
delimTokenTree
   : ""("" 'token' tokenTree* "")"" 'token'
   | ""["" 'token' tokenTree* ""]"" 'token'
   | ""{"" 'token' tokenTree* ""}"" 'token'
   ;
tokenTree
   : tokenTreeToken 'token'
   | delimTokenTree
   ;
tokenTreeToken
   : macroIdentifierLikeToken 'value' {{MacroToken}}
   | macroLiteralToken
   | macroPunctuationToken 'value' {{MacroToken}}
   | macroRepOp 'value' {{MacroToken}}
   | ""$"" 'value' {{MacroToken}}
   ;

macroInvocationSemi ###
   : macroInvocationWithoutBlock 'macroInvocation' "";"" 'semicolon' {{MacroInvocationStatement}}
   | macroInvocationWithBlock 'macroInvocation' {{MacroInvocationStatement}}
   ;

# 3.1
macroRulesDefinition
   : ""macro_rules"" 'macroRulesToken' ""!"" 'bang' identifier 'name' macroRulesDef {{}}
   ;
macroRulesDef
   : ""("" 'left' macroRules "")"" 'right' "";"" 'semicolon'
   | ""["" 'left' macroRules ""]"" 'right' "";"" 'semicolon'
   | ""{"" 'left' macroRules ""}"" 'right'
   ;
macroRules
   : macroRule 'rule' ("";"" 'semicolon' macroRule 'rule')* "";"" 'semicolon'?
   ;
macroRule
   : macroMatcher ""=>"" 'arrow' macroTranscriber {{}}
   ;
macroMatcher
   : ""("" 'left' macroMatch 'match'* "")"" 'right'
   | ""["" 'left' macroMatch 'match'* ""]"" 'right'
   | ""{"" 'left' macroMatch 'match'* ""}"" 'right'
   ;
macroMatch
   : macroMatchToken 'value' {{}}
   | macroMatcher {{}}
   | ""$"" 'dollar' (identifier 'name' | ""self"" 'name') "":"" 'colon' macroFragSpec 'fragment' {{}}
   | ""$"" 'dollar' ""("" 'leftParen' macroMatch 'match'+ "")"" 'rightParen' macroRepSep 'name'? macroRepOp 'op' {{}}
   ;
macroMatchToken
   : macroIdentifierLikeToken 'value' {{MacroToken}}
   | macroLiteralToken
   | macroPunctuationToken 'value' {{MacroToken}}
   | macroRepOp 'value' {{MacroToken}}
   ;
macroFragSpec
   : identifier # do validate here is wasting token
   ;
macroRepSep
   : macroIdentifierLikeToken 'value' {{MacroToken}}
   | macroLiteralToken
   | macroPunctuationToken 'value' {{MacroToken}}
   | ""$"" 'value' {{MacroToken}}
   ;
macroRepOp
   : ""*""
   | ""+""
   | ""?""
   ;
macroTranscriber
   : delimTokenTree
   ;

#configurationPredicate
# : configurationOption | configurationAll | configurationAny | configurationNot ; configurationOption: identifier (
# '=' (STRING_LITERAL | RAW_STRING_LITERAL))?; configurationAll: 'all' '(' configurationPredicateList? ')';
# configurationAny: 'any' '(' configurationPredicateList? ')'; configurationNot: 'not' '(' configurationPredicate ')';

#configurationPredicateList
# : configurationPredicate (',' configurationPredicate)* ','? ; cfgAttribute: 'cfg' '(' configurationPredicate ')';
# cfgAttrAttribute: 'cfg_attr' '(' configurationPredicate ',' cfgAttrs? ')'; cfgAttrs: attr (',' attr)* ','?;

# 6
item
   : outerAttribute 'attr'+? (visItem 'item' | macroItem 'item')
   ;
visItem
	: visibility 'visibility'? module {{Module}}
	| visibility 'visibility'? externCrate {{ExternCrate}}
	| visibility 'visibility'? useDeclaration {{UseDeclaration}}
	| visibility 'visibility'? function {{Function}}
	| visibility 'visibility'? typeAlias {{TypeAlias}}
	| visibility 'visibility'? struct {{Struct}}
	| visibility 'visibility'? enumeration {{Enum}}
	| visibility 'visibility'? union {{Union}}
	| visibility 'visibility'? constantItem {{Constant}}
	| visibility 'visibility'? staticItem {{Static}}
	| visibility 'visibility'? trait {{Trait}}
	| visibility 'visibility'? traitAlias {{TraitAlias}}
	| visibility 'visibility'? implementation {{Implementation}}
	| visibility 'visibility'? externBlock {{ExternBlock}}
	;
macroItem
   : macroInvocationSemi
   | macroRulesDefinition
   ;

# 6.1
module
   : ""unsafe"" 'unsafeToken'? ""mod"" 'modToken' identifier 'name' ("";"" 'semicolon' | ""{"" 'leftBrace' innerAttribute 'attr'* item+? ""}"" 'rightBrace') 
   ;

# 6.2
externCrate
   : ""extern"" 'externToken' ""crate"" 'crateToken' crateRef 'crate' asClause? "";"" 'semicolon'
   ;
crateRef
   : identifier
   | ""self""
   ;
asClause
   : ""as"" 'asToken' (identifier 'name' | ""_"" 'name')
   ;

# 6.3
useDeclaration
   : ""use"" 'useToken' useTree 'use' "";"" 'semicolon'
   ;
useTree
   : (simplePath 'basePath'? ""::"" 'colonColon')? (""*"" 'star' | ""{"" 'leftBrace' ( useTree 'use' ("","" 'comma' useTree 'use')* "","" 'comma'?)? ""}"" 'rightBrace') {{}}
   | simplePath 'path' (""as"" 'asToken' (identifier 'name' | ""_"" 'name'))? {{}}
   ;

# 6.4
function
   : functionQualifiers ""fn"" 'fnToken' identifier 'name' genericParams? ""("" 'leftParen' functionParameters? "")"" 'rightParen' functionReturnType? whereClause 'where'?
      (blockExpression 'block' | "";"" 'semicolon')
   ;
functionQualifiers
   : ""default"" 'defaultToken'? ""const"" 'constToken'? ""async"" 'asyncToken'? ""unsafe"" 'unsafeToken'? (""extern"" 'externToken' abi 'abi'?)? ### added default
   ;
abi
   : <STRING_LITERAL>
   | <rawString>
   | <simpleRawString>
   ;
functionParameters
   : selfParam "","" 'comma'?
   | (selfParam "","" 'comma')? functionParam ("","" 'comma' functionParam)* "","" 'comma'?
   ;
selfParam
   : outerAttribute 'attr'* (shorthandSelf | typedSelf)
   ;
shorthandSelf
   : (<amp> 'amp' lifetime 'lifetime'?)? ""mut"" 'mutToken'? ""self"" 'selfToken'
   ;
typedSelf
   : ""mut"" 'mutToken'? ""self"" 'selfToken' "":"" 'colon' type 'type'
   ;
functionParam
   : outerAttribute 'attr'* (functionParamPattern | ""..."" 'ellipsis' | type 'type')
   ;
functionParamPattern
   : pattern "":"" 'colon' (type 'type' | ""..."" 'ellipsis')
   ;
functionReturnType
   : ""->"" 'arrow' type 'type'
   ;

# 6.5
typeAlias
   : ""type"" 'typeToken' identifier 'name' genericParams? ("":"" 'colon' typeParamBounds)? whereClause 'where'? (""="" 'equalsToken' type 'type')? "";"" 'semicolon'
   ;

# 6.6
struct
   : structStruct
   | tupleStruct
   ;
structStruct
   : ""struct"" 'structToken' identifier 'name' genericParams? whereClause 'where'? (""{"" 'left' structFields? ""}"" 'right' | "";"" 'semicolon')
   ;
tupleStruct
   : ""struct"" 'structToken' identifier 'name' genericParams? ""("" 'left' tupleFields? "")"" 'right' whereClause 'where'? "";"" 'semicolon'
   ;
structFields
   : structField 'field' ("","" 'comma' structField 'field')* "","" 'comma'?
   ;
structField
   : outerAttribute 'attr'* visibility 'visibility'? identifier 'name' "":"" 'colon' type 'type' {{}}
   ;
tupleFields
   : tupleField 'field' ("","" 'comma' tupleField 'field')* "","" 'comma'?
   ;
tupleField
   : outerAttribute 'attr'* visibility 'visibility'? type 'type' {{}}
   ;

# 6.7
enumeration
   : ""enum"" 'enumToken' identifier 'name' genericParams? whereClause 'where'? ""{"" 'leftBrace' enumItems? ""}"" 'rightBrace'
   ;
enumItems
   : enumItem 'item' ("","" 'comma' enumItem 'item')* "","" 'comma'?
   ;
enumItem
   : outerAttribute 'attr'* visibility 'visibility'? identifier 'name'
   (
      enumItemTuple
      | enumItemStruct
      | enumItemDiscriminant
   )? {{}}
   ;
enumItemTuple
   : ""("" 'leftParen' tupleFields? "")"" 'rightParen'
   ;
enumItemStruct
   : ""{"" 'leftBrace' structFields? ""}"" 'rightBrace'
   ;
enumItemDiscriminant
   : ""="" 'equalsToken' expression 'value'
   ;

# 6.8
union
   : ""union"" 'unionToken' identifier 'name' genericParams? whereClause 'where'? ""{"" 'leftBrace' structFields ""}"" 'rightBrace'
   ;

# 6.9
constantItem
   : ""const"" 'constToken' (identifier 'name' | ""_"" 'name') "":"" 'colon' type 'type' (""="" 'equalsToken' expression 'value')? "";"" 'semicolon'
   ;

# 6.10
staticItem
   : ""static"" 'staticToken' ""mut"" 'mutToken'? identifier 'name' "":"" 'colon' type 'type' (""="" 'equalsToken' expression 'value')? "";"" 'semicolon'
   ;

# 6.11
trait
   : ""unsafe"" 'unsafeToken'? ""auto"" 'autoToken'? ""trait"" 'traitToken' identifier 'name' genericParams? ("":"" 'colon' typeParamBounds?)? whereClause 'where'? ""{"" 'leftBrace' innerAttribute 'attr'* associatedItem 'item'+? ""}"" 'rightBrace'
   ;
traitAlias 
	: ""unsafe"" 'unsafeToken'? ""auto"" 'autoToken'? ""trait"" 'traitToken' identifier 'name' genericParams? ""="" 'equalsToken' typeParamBounds? ("":"" 'colon' typeParamBounds?)? whereClause 'where'? "";"" 'semicolon'
	;

# 6.12
implementation
   : inherentImpl
   | traitImpl
   ;
inherentImpl
   : ""impl"" 'implToken' genericParams? type 'type' whereClause 'where'? ""{"" 'leftBrace' innerAttribute 'attr'* associatedItem 'item'+? ""}"" 'rightBrace'
   ;
traitImpl
   : ""unsafe"" 'unsafeToken'? ""impl"" 'implToken' genericParams? ""const"" 'constToken'? ""!"" 'bang'? typePath 'type' ""for"" 'forToken' type 'type' whereClause 'where'? ""{"" 'leftBrace' innerAttribute 'attr'* associatedItem 'item'+? ""}"" 'rightBrace'	### added const
   ;

# 6.13
externBlock
   : ""unsafe"" 'unsafeToken'? ""extern"" 'externToken' abi 'abi'? ""{"" 'leftBrace' innerAttribute 'attr'* externalItem 'item'+? ""}"" 'rightBrace'
   ;
externalItem
   : outerAttribute 'attr'+? macroInvocationSemi 'macro' {{AttributedMacroInvocation}}
   | outerAttribute 'attr'+? visibility 'visibility'? staticItem {{Static}}
   | outerAttribute 'attr'+? visibility 'visibility'? function {{Function}}
   ;

# 6.14
genericParams
   : <lt> 'lt' ((genericParam 'param' "","" 'comma')+? genericParam 'param' "","" 'comma'? )?<gt> 'gt'
   ;
genericParam
   : outerAttribute 'attr'*
   (
      lifetimeParam 'param'
      | typeParam 'param'
      | constParam 'param'
   ) {{}}
   ;
lifetimeParam
   : <LIFETIME_OR_LABEL> 'lifetime' ("":"" 'colon' lifetimeBounds)? {{}}	### remove outerAttribute?
   ;
typeParam
   : identifier 'name' ("":"" 'colon' typeParamBounds?)? (""="" 'equalsToken' type 'type')? {{}}	### remove outerAttribute?
   ;
constParam
   : ""const"" 'constToken' identifier 'name' "":"" 'colon' type 'type' {{}}
   ;

whereClause
   : ""where"" 'whereToken' (whereClauseItem 'clause' "","" 'comma')* whereClauseItem 'clause'? {{}}
   ;
whereClauseItem
   : lifetimeWhereClauseItem
   | typeBoundWhereClauseItem
   ;
lifetimeWhereClauseItem
   : lifetime 'lifetime' "":"" 'colon' lifetimeBounds {{}}
   ;
typeBoundWhereClauseItem
   : forLifetimes? type 'type' "":"" 'colon' typeParamBounds? {{}}
   ;
forLifetimes
   : ""for"" 'forToken' genericParams
   ;

# 6.15
associatedItem
   : outerAttribute 'attr'+? macroInvocationSemi 'macro' {{AttributedMacroInvocation}}
   | outerAttribute 'attr'+? visibility 'visibility'? typeAlias {{TypeAlias}}
   | outerAttribute 'attr'+? visibility 'visibility'? constantItem {{Constant}}
   | outerAttribute 'attr'+? visibility 'visibility'? function {{Function}}
   ;

# 7
innerAttribute
   : ""#"" 'hashToken' ""!"" 'bang' ""["" 'leftBracket' attr ""]"" 'rightBracket' {{Attribute}}
   ;
outerAttribute
   : ""#"" 'hashToken' ""["" 'leftBracket' attr ""]"" 'rightBracket' {{Attribute}}
   ;
attr
   : simplePath 'path' attrInput?
   ;
attrInput
   : delimTokenTree
   | ""="" 'equalsToken' literalExpression 'value'
   ; # w/o suffix

#metaItem
# : simplePath ( '=' literalExpression //w | '(' metaSeq ')' )? ; metaSeq: metaItemInner (',' metaItemInner)* ','?;
# metaItemInner: metaItem | literalExpression; // w

#metaWord: identifier; metaNameValueStr: identifier '=' ( STRING_LITERAL | RAW_STRING_LITERAL); metaListPaths:
# identifier '(' ( simplePath (',' simplePath)* ','?)? ')'; metaListIdents: identifier '(' ( identifier (','
# identifier)* ','?)? ')'; metaListNameValueStr : identifier '(' (metaNameValueStr ( ',' metaNameValueStr)* ','?)? ')'
# ;

# 8
statement
   : "";"" 'semicolon' {{EmptyStatement}}
   | item {{ItemStatement}}
   | letStatement
   | expressionStatement {{ExpressionStatement}}
   | macroInvocationSemi
   ;

letStatement
   : outerAttribute 'attr'* ""let"" 'letToken' pattern ("":"" 'colon' type 'type')? (""="" 'equalsToken' expression 'value')? "";"" 'semicolon' {{}}
   ;

expressionStatement
   : expressionWithoutBlock 'expression' "";"" 'semicolon'
   | expressionWithBlock 'expression'
   ;

# 8.2
expression
   : expressionWithoutBlock
   | expressionWithBlock                                # ExpressionWithBlock_
   ;
expressionWithoutBlock
	: outerAttribute 'attr' expressionWithoutBlock 'expression' {{AttributedExpression}}                         # AttributedExpression # technical, remove left recursive
   | literalExpression                                  # LiteralExpression_
   | pathExpression                                     # PathExpression_
   | expression 'expression' ""."" 'period' pathExprSegment <lparen> 'leftParen' callParams? "")"" 'rightParen' {{MethodCallExpression}} # MethodCallExpression   # 8.2.10
   | expression 'expression' ""."" 'period' identifier 'name' {{FieldExpression}}                         # FieldExpression  # 8.2.11
   | expression 'expression' ""."" 'period' tupleIndex 'index' {{TupleIndexExpression}}                          # TupleIndexingExpression   # 8.2.7
   | expression 'expression' ""."" 'period' ""await"" 'awaitToken' {{AwaitExpression}}                             # AwaitExpression  # 8.2.18
   | expression 'expression' <lparen> 'leftParen' callParams? "")"" 'rightParen' {{CallExpression}}                     # CallExpression   # 8.2.9
   | expression 'expression' <lbracket> 'leftBracket' expression 'index' ""]"" 'rightBracket' {{IndexExpression}}                      # IndexExpression  # 8.2.6
   | expression 'expression' ""?"" 'question' {{ErrorPropogationExpression}}                                 # ErrorPropagationExpression   # 8.2.4
   | (""&"" 'amp' | ""&&"" 'amp') ""mut"" 'mutToken'? expression 'expression' {{BorrowExpression}}                    # BorrowExpression # 8.2.4
   | ""*"" 'operator' expression 'value' {{UnaryExpression}}                                     # DereferenceExpression  # 8.2.4
   | (""-"" 'operator' | ""!"" 'operator') expression 'value' {{UnaryExpression}}                             # NegationExpression  # 8.2.4
   | expression 'expression' ""as"" 'asToken' typeNoBounds 'type' {{TypeCastExpression}}                # TypeCastExpression  # 8.2.4
   | expression 'left' (""*"" 'operator' | ""/"" 'operator' | ""%"" 'operator') expression 'right'  {{BinaryExpression}}            # ArithmeticOrLogicalExpression   # 8.2.4
   | expression 'left' (""+"" 'operator' | ""-"" 'operator') expression 'right' {{BinaryExpression}}                  # ArithmeticOrLogicalExpression   # 8.2.4
   | expression 'left' (""<<"" 'operator' |  "">>"" 'operator' | "">>>"" 'operator') expression 'right' {{BinaryExpression}}                  # ArithmeticOrLogicalExpression   # 8.2.4
   | expression 'left' <amp> 'operator' expression 'right' {{BinaryExpression}}                          # ArithmeticOrLogicalExpression   # 8.2.4
   | expression 'left' ""^"" 'operator' expression 'right' {{BinaryExpression}}                          # ArithmeticOrLogicalExpression   # 8.2.4
   | expression 'left' <bar> 'operator' expression 'right' {{BinaryExpression}}                          # ArithmeticOrLogicalExpression   # 8.2.4
   | expression 'left' ( ""=="" 'operator' | ""!="" 'operator' | <gt> 'operator' | <lt> 'operator' | "">="" 'operator' | ""<="" 'operator' ) expression  'right' {{BinaryExpression}}         # ComparisonExpression   # 8.2.4
   | expression 'left' ""&&"" 'operator' expression 'right' {{BinaryExpression}}                        # LazyBooleanExpression  # 8.2.4
   | expression 'left' ""||"" 'operator' expression 'right' {{BinaryExpression}}                         # LazyBooleanExpression  # 8.2.4
   | expression 'from' "".."" 'operator' expression 'to'? {{RangeExpression}}                        # RangeExpression  # 8.2.14
   | "".."" 'operator' expression 'to'? {{RangeExpression}}                                  # RangeExpression  # 8.2.14
   | ""..="" 'operator' expression 'to' {{RangeExpression}}                                   # RangeExpression  # 8.2.14
   | expression 'from' ""..="" 'operator' expression 'to' {{RangeExpression}}                        # RangeExpression  # 8.2.14
   | expression 'lhs' ""="" 'operator' expression 'rhs' {{AssignmentExpression}}                          # AssignmentExpression   # 8.2.4
   | expression 'lhs' ( ""+="" 'operator' | ""-="" 'operator' | ""*="" 'operator' | ""/="" 'operator' | ""%="" 'operator' | ""&="" 'operator' | ""|="" 'operator' | ""^="" 'operator' | ""<<="" 'operator' | "">>="" 'operator' ) expression 'rhs' {{AssignmentExpression}}       # CompoundAssignmentExpression # 8.2.4
   | ""continue"" 'continueToken' <LIFETIME_OR_LABEL> 'label'? expression 'value'? {{ContinueExpression}}          # ContinueExpression  # 8.2.13
   | ""break"" 'breakToken' <LIFETIME_OR_LABEL> 'label'? expression 'value'? {{BreakExpression}}            # BreakExpression  # 8.2.13
   | ""return"" 'returnToken' expression 'value'? {{ReturnExpression}}                               # ReturnExpression # 8.2.17
   | ""("" 'leftParen' innerAttribute 'attr'* expression 'expression' "")"" 'rightParen' {{GroupedExpression}}                # GroupedExpression   # 8.2.5
   | ""["" 'leftBracket' innerAttribute 'attr'* arrayElements? ""]"" 'rightBracket' {{ArrayExpression}}            # ArrayExpression  # 8.2.6
   | ""("" 'leftParen' innerAttribute 'attr'* tupleElements? "")"" 'rightParen' {{TupleExpression}}            # TupleExpression  # 8.2.7
   | structExpression                                   # StructExpression_   # 8.2.8
### handled by structExpression   | enumerationVariantExpression                       # EnumerationVariantExpression_
   | closureExpression                                  # ClosureExpression_  # 8.2.12
   | macroInvocation                                    # MacroInvocationAsExpression
   | ""box"" 'boxToken' expression 'value' {{BoxExpression}} ###
	;

expressionWithBlock
   : outerAttribute 'attr' expressionWithBlock 'expression' {{AttributedExpression}} # technical
   | blockExpression
   | asyncBlockExpression
   | unsafeBlockExpression
   | loopExpression
   | ifExpression
   | ifLetExpression
   | matchExpression
   ;

# 8.2.1
literalExpression
   : <CHAR_LITERAL> 'value' {{}}
   | <STRING_LITERAL> 'value' {{}}
   | <rawString> 'value' {{}}
   | <simpleRawString> 'value' {{}}
   | <BYTE_LITERAL> 'value' {{}}
   | <BYTE_STRING_LITERAL> 'value' {{}}
   | LiteralInteger
   | LiteralFloat 
   | ""true"" 'value' {{}}
   | ""false"" 'value' {{}}
   ;
LiteralFloat 
	: <FLOAT_LITERAL> 'value' {{LiteralExpression}}
	;
LiteralInteger 
	: <INTEGER_LITERAL> 'value'  {{LiteralExpression}}
	;

# 8.2.2
pathExpression
   : pathInExpression
   | qualifiedPathInExpression
   ;

# 8.2.3
blockExpression
   : ""{"" 'leftBrace' innerAttribute 'attr'* statements? ""}"" 'rightBrace' {{}}
   ;
statements
   : statement 'statement'+ expressionWithoutBlock 'statement'?
   | expressionWithoutBlock 'statement'
   ;

asyncBlockExpression
   : ""async"" 'asyncToken' ""move"" 'moveToken'? blockExpression 'expression' {{}}
   ;
unsafeBlockExpression
   : ""unsafe"" 'unsafeToken' blockExpression 'expression' {{}}
   ;

# 8.2.6
arrayElements
   : expression 'element' ("","" 'separator' expression 'element')* "","" 'separator'?
   | expression 'element' "";"" 'separator' expression 'element'
   ;

# 8.2.7
tupleElements
   : (expression 'element' "","" 'comma')+ expression 'element'?
   ;
tupleIndex
   : <INTEGER_LITERAL>
   ;

# 8.2.8
structExpression
   : structExprStruct
   | structExprTuple
   ### defined in pathExpression -- | structExprUnit
   ;
structExprStruct
   : pathInExpression 'path' ""{"" 'leftBrace' innerAttribute 'attr'* (structExprFields | structBase)? ""}"" 'rightBrace' {{}}
   ;
structExprFields
   : structExprField 'field' ("","" 'comma' structExprField 'field')* ("","" 'comma' structBase | "","" 'comma'?)
   ;
# outerAttribute here is not in doc
structExprField
   : outerAttribute 'attr'* (identifier 'name' | (identifier 'name' | tupleIndex 'name') "":""  'colon' expression 'value') {{}}
   ;
structBase
   : "".."" 'dotDot' expression 'from'
   ;
structExprTuple
   : pathInExpression 'path' ""("" 'leftParen' (expression 'arg' ("","" 'comma' expression 'arg')* "","" 'comma'?)? "")"" 'rightParen' {{}} ###
   ;
#structExprUnit
#   : pathInExpression
#   ;

#enumerationVariantExpression
#   : enumExprStruct
   ### same as structExprTuple | enumExprTuple
   ### defined in pathExpression -- | enumExprFieldless
#   ;
#enumExprStruct
#   : pathInExpression 'path' ""{"" 'leftBrace' enumExprFields? ""}"" 'rightBrace' {{}}
#   ;
#enumExprFields
#   : enumExprField 'field' ("","" 'comma' enumExprField 'field')* "","" 'comma'?
#   ;
#enumExprField
#   : identifier 'name' {{}}
#   | (identifier 'name' | tupleIndex 'name') "":"" 'colon' expression 'value' {{}}
#   ;
#enumExprFieldless
#   : pathInExpression
#   ;

# 8.2.9
callParams
   : expression 'arg' ("","" 'comma' expression 'arg')* "","" 'comma'?
   ;

# 8.2.12
closureExpression
   : ""move"" 'moveToken'? (""||"" 'bar' | ""|"" 'bar' closureParameters? ""|"" 'bar')
   (
      expression 'expression'
      | ""->"" 'arrow' typeNoBounds 'type' blockExpression 'expression'
   ) {{}}
   ;
closureParameters
   : closureParam 'parameter' ("","" 'comma' closureParam 'parameter')* "","" 'comma'?
   ;
closureParam
   : outerAttribute 'attr'* pattern ("":"" 'colon' type 'type')? {{}}
   ;

# 8.2.13
loopExpression
   : loopLabel? infiniteLoopExpression {{}}
   | loopLabel? predicateLoopExpression {{WhileLoopExpression}} 
   | loopLabel? predicatePatternLoopExpression {{WhileLetLoopExpression}}
   | loopLabel? iteratorLoopExpression {{ForIteratorLoopExpression}}
   ;
infiniteLoopExpression
   : ""loop"" 'loopToken' blockExpression 'block'
   ;
predicateLoopExpression
   : ""while"" 'whileToken' expression 'condition' /*except structExpression*/ blockExpression 'block'
   ;
predicatePatternLoopExpression
   : ""while"" 'whileToken' ""let"" 'letToken' matchArmPatterns ""="" 'equalsToken' expression 'value' blockExpression 'block'
   ;
iteratorLoopExpression
   : ""for"" 'forToken' pattern ""in"" 'inToken' expression 'value' blockExpression 'block'
   ;
loopLabel
   : <LIFETIME_OR_LABEL> 'label' "":"" 'colon'
   ;

# 8.2.15
ifExpression
   : ""if"" 'ifToken' expression 'conditional' blockExpression 'thenValue'
   (
      ""else"" 'elseToken' (blockExpression 'elseValue' | ifExpression 'elseValue' | ifLetExpression 'elseValue')
   )? {{}}
   ;
ifLetExpression
	: ""if"" 'ifToken' ""let"" 'letToken' matchArmPatterns ""="" 'equalsToken' expression 'matchValue' blockExpression 'thenValue'
	(
		""else"" 'elseToken' (blockExpression 'elseValue' | ifExpression 'elseValue' | ifLetExpression 'elseValue')
	)? {{}}
	| ""let"" 'letToken' matchArmPatterns ""="" 'equalsToken' expression 'matchValue' ""else"" 'elseToken' blockExpression 'elseValue' {{}}	### added
   ;

# 8.2.16
matchExpression
   : ""match"" 'matchToken' expression 'value' ""{"" 'leftBrace' innerAttribute 'attr'* matchArms? ""}"" 'rightBrace' {{}}
   ;
matchArms
   : (matchArm 'arm' ""=>"" 'arrow' matchArmExpression)* matchArm 'arm' ""=>"" 'arrow' ( expressionWithoutBlock 'armValue' | expressionWithBlock 'armValue') "","" 'comma'?
   ;
matchArmExpression
   : expressionWithoutBlock 'armValue' "","" 'comma'
   | expressionWithBlock 'armValue' "","" 'comma'?
   ;
matchArm
   : outerAttribute 'attr'* matchArmPatterns matchArmGuard? {{}}
   ;
matchArmPatterns
   : pattern ### was: ""|""? pattern (""|"" pattern)*
   ;
matchArmGuard
   : ""if"" 'ifToken' expression 'condition'
   | ""if"" 'ifToken' ""let"" 'letToken' matchArmPatterns ""="" 'equalsToken' expression 'matchValue'	### added
   ;

# 9
pattern
   : ""|"" 'bar'? patternNoTopAlt 'pattern' (""|"" 'bar' patternNoTopAlt 'pattern')* 
   ;
patternNoTopAlt 
	: patternWithoutRange
	| rangePattern
	;
patternWithoutRange
   : literalPattern
   | identifierPattern
   | wildcardPattern
   | restPattern
   | obsoleteRangePattern
   | referencePattern
   | structPattern
   | tupleStructPattern
   | tuplePattern
   | groupedPattern
   | slicePattern
   | pathPattern
   | macroInvocation
   | ""box"" 'boxToken' patternWithoutRange 'pattern' {{BoxPattern}}
   ;

literalPattern
   : ""true"" 'value' {{LiteralExpression}}
   | ""false"" 'value' {{LiteralExpression}}
   | <CHAR_LITERAL> 'value' {{LiteralExpression}}
   | <BYTE_LITERAL> 'value' {{LiteralExpression}}
   | <STRING_LITERAL> 'value' {{LiteralExpression}}
   | <rawString> 'value' {{LiteralExpression}}
   | <simpleRawString> 'value' {{LiteralExpression}}
   | <BYTE_STRING_LITERAL> 'value' {{LiteralExpression}}
   | LiteralInteger
   | ""-"" 'operator' LiteralInteger 'value' {{UnaryExpression}}
   | LiteralFloat
   | ""-"" 'operator' LiteralFloat 'value' {{UnaryExpression}}
   ;

identifierPattern
   : ""ref"" 'refToken'? ""mut"" 'mutToken'? identifier 'name' (""@"" 'atToken' pattern)? {{}}
   ;
wildcardPattern
   : ""_"" 'underscore' {{}}
   ;
restPattern
   : "".."" 'operator' {{}}
   ;
rangePattern
   : rangePatternBound 'from' ""..="" 'operator' rangePatternBound 'to' {{}}
   | rangePatternBound 'from' "".."" 'operator' {{}}	### added
   ;
obsoleteRangePattern
   : rangePatternBound 'from' ""..."" 'operator' rangePatternBound 'to' {{RangePattern}}
   ;
rangePatternBound
   : <CHAR_LITERAL> 'value' {{LiteralExpression}}
   | <BYTE_LITERAL> 'value' {{LiteralExpression}}
   | LiteralInteger
   | ""-"" 'operator' LiteralInteger 'value' {{UnaryExpression}}
   | LiteralFloat
   | ""-"" 'operator' LiteralFloat 'value' {{UnaryExpression}}
   | pathInExpression
   | qualifiedPathInExpression
   ;
referencePattern
   : (<amp> 'amp' | ""&&"" 'amp') ""mut"" 'mutToken'? patternWithoutRange 'pattern' {{}}
   ;
structPattern
   : pathInExpression 'path' ""{"" 'leftBrace' structPatternElements? ""}"" 'rightBrace' {{}}
   ;
structPatternElements
   : structPatternFields ("","" 'comma' structPatternEtCetera 'field'?)?
   | structPatternEtCetera 'field'
   ;
structPatternFields
   : structPatternField 'field' ("","" 'comma' structPatternField 'field')*
   ;
structPatternField
   : outerAttribute 'attr'*
   (
      tupleIndex 'name' "":"" 'colon' pattern
      | identifier 'name' "":"" 'colon' pattern
      | ""ref"" 'refToken'? ""mut"" 'mutToken'? identifier 'name'
   ) {{}}
   ;
structPatternEtCetera
   : outerAttribute 'attr'* "".."" 'dotDot' {{}}
   ;
tupleStructPattern
   : pathInExpression 'path' ""("" 'leftParen' tupleStructItems? "")"" 'rightParen' {{}}
   ;
tupleStructItems
   : pattern ("","" 'comma' pattern)+? "","" 'comma'?
   ;
tuplePattern
   : ""("" 'leftParen' tuplePatternItems? "")"" 'rightParen' {{}}
   ;
tuplePatternItems
   : pattern "","" 'comma'
   | restPattern 'restPattern'
   | pattern ("","" 'comma' pattern)+ "","" 'comma'?
   ;
groupedPattern
   : ""("" 'leftParen' pattern "")"" 'rightParen' {{}}
   ;
slicePattern
   : ""["" 'leftBracket' slicePatternItems? ""]"" 'rightBracket' {{}}
   ;
slicePatternItems
   : pattern ("","" 'comma' pattern)+? "","" 'comma'?
   ;
pathPattern
   : pathInExpression
   | qualifiedPathInExpression
   ;

# 10.1
type
   : typeNoBoundsWithoutImpl	###
   | implTraitType
   | traitObjectType
   ;
typeNoBounds
   : typeNoBoundsWithoutImpl	###
   | implTraitTypeOneBound
   ;
typeNoBoundsWithoutImpl	###
   : parenthesizedType
   | traitObjectTypeOneBound
   | typePath
   | tupleType
   | neverType
   | rawPointerType
   | referenceType
   | arrayType
   | sliceType
   | inferredType
   | qualifiedPathInType
   | bareFunctionType
   | macroInvocation
   ;
parenthesizedType
   : ""("" 'leftParen' type 'type' "")"" 'rightParen' {{}}
   ;

# 10.1.4
neverType
   : ""!"" 'bang' {{}}
   ;

# 10.1.5
tupleType
   : ""("" 'leftParen' ((type 'type' "","" 'comma')+ type 'type'?)? "")"" 'rightParen' {{}}
   ;

# 10.1.6
arrayType
   : ""["" 'leftBracket' type 'type' "";"" 'semicolon' expression 'length' ""]"" 'rightBracket' {{ArrayType}}
   ;

# 10.1.7
sliceType
   : ""["" 'leftBracket' type 'type' ""]"" 'rightBracket' {{SliceType}}
   ;

# 10.1.13
referenceType
   : <amp> 'amp' lifetime 'lifetime'? ""mut"" 'mutToken'? typeNoBounds 'type' {{}}
   ;
rawPointerType
   : ""*"" 'star' (""mut"" 'mutToken' | ""const"" 'constToken') typeNoBounds 'type' {{}}
   ;

# 10.1.14
bareFunctionType
   : forLifetimes? functionTypeQualifiers ""fn"" 'fnToken' ""("" 'leftParen' functionParametersMaybeNamedVariadic? "")"" 'rightParen' bareFunctionReturnType? {{FunctionType}}
   ;
functionTypeQualifiers
   : ""unsafe"" 'unsafeToken'? (""extern"" 'externToken' abi 'abi'?)?
   ;
bareFunctionReturnType
   : ""->"" 'arrow' typeNoBounds 'type'
   ;
functionParametersMaybeNamedVariadic
   : maybeNamedFunctionParameters
   | maybeNamedFunctionParametersVariadic
   ;
maybeNamedFunctionParameters
   : maybeNamedParam ("","" 'comma' maybeNamedParam)* "","" 'comma'?
   ;
maybeNamedParam
   : outerAttribute 'attr'* ((identifier 'name' | ""_"" 'name') "":"" 'colon')? type 'type'
   ;
maybeNamedFunctionParametersVariadic
   : maybeNamedParam ("","" 'comma' maybeNamedParam)* "","" 'comma' outerAttribute 'attr'* ""..."" 'ellipsis'
   ;

# 10.1.15
traitObjectType
   : ""dyn"" 'dynToken'? typeParamBounds {{}}
   ;
traitObjectTypeOneBound
   : ""dyn"" 'dynToken'? traitBound 'typeBound' {{TraitObjectType}}
   ;
implTraitType
   : ""impl"" 'implToken' typeParamBounds {{}}
   ;
implTraitTypeOneBound
   : ""impl"" 'implToken' traitBound 'typeBound' {{ImplTraitType}}
   ;

# 10.1.18
inferredType
   : ""_"" 'underscore' {{}}
   ;

# 10.6
typeParamBounds
   : typeParamBound 'typeBound' (""+"" 'plus' typeParamBound 'typeBound')* ""+"" 'plus'?
   ;
typeParamBound
   : lifetime 'lifetime' {{Lifetime}}
   | traitBound
   ;
traitBound
   : ""?"" 'question'? forLifetimes? typePath 'type' {{}}
   | ""("" 'leftParen' ""?"" 'question'? forLifetimes? typePath 'type' "")"" 'rightParen' {{}}
   ;
lifetimeBounds
   : (lifetime 'lifetimeBound' ""+"" 'plus' )* lifetime 'lifetimeBound'?
   ;
lifetime
   : <LIFETIME_OR_LABEL>
   | ""'static""
   | ""'_""
   ;

# 12.4
simplePath
   : ""::"" 'separator' ? simplePathSegment (""::"" 'separator' simplePathSegment)+? {{Path}}
   ;
simplePathSegment
   : identifier 'name'
   | ""super"" 'name'
   | ""self"" 'name'
   | ""crate"" 'name'
   | ""$crate"" 'name'
   ;

pathInExpression
   : ""::"" 'separator'? pathExprSegment (""::"" 'separator' pathExprSegment)+? {{PathExpression}}
   ;
pathExprSegment
   : pathIdentSegment (""::"" 'separator' genericArgs 'genericArgs')?
   ;
pathIdentSegment
   : simplePathSegment
   | ""Self"" 'name'
   ;

#TODO: let x : T<_>=something;
genericArgs
   : <lt> 'lt' <gt> 'gt' {{}}
   ### handled below by genericArg ###| <lt> 'lt' genericArgsLifetimes ("","" 'comma' genericArgsTypes)? ("","" 'comma' genericArgsBindings)? "","" 'comma'? <gt> 'gt'
   ### handled below by genericArg ###| <lt> 'lt' genericArgsTypes ("","" 'comma' genericArgsBindings)? "","" 'comma'? <gt> 'gt'
   | <lt> 'lt' genericArg 'genericArg' ("","" 'comma' genericArg 'genericArg')* "","" 'comma'? <gt> 'gt' {{}}
   ;
genericArg
   : lifetime 'lifetime' {{Lifetime}}
   | type
   | genericArgsConst
   | genericArgsBinding
   ;
genericArgsConst
   : blockExpression
   | ""-"" 'operator' literalExpression 'value' {{UnaryExpression}}
   | literalExpression
   | simplePathSegment {{PathExpression}}
   ;
#genericArgsLifetimes
#   : lifetime ("","" 'comma' lifetime)*
#   ;
#genericArgsTypes
#   : type 'type' ("","" 'comma' type 'type')*
#   ;
#genericArgsBindings
#   : genericArgsBinding 'binding' ("","" 'comma' genericArgsBinding 'binding')*
#   ;
genericArgsBinding
   : identifier 'name' ""="" 'equalsToken' type 'type' {{GenericArgBinding}}
   ;

qualifiedPathInExpression
   : qualifiedPathType (""::"" 'separator' pathExprSegment)+ {{PathExpression}}
   ;
qualifiedPathType
   : <lt> 'lt' type 'type' (""as"" 'asToken' typePath 'typePath')? <gt> 'gt'
   ;
qualifiedPathInType
   : qualifiedPathType (""::"" 'separator' typePathSegment)+ {{}}
   ;

typePath
   : ""::"" 'separator'? typePathSegment (""::"" 'separator' typePathSegment)+? {{}}
   ;
typePathSegment
   : pathIdentSegment ""::"" 'separator'? (genericArgs 'genericArgs' | typePathFn)?
   ;
typePathFn
   : ""("" 'leftParen' typePathInputs? "")"" 'rightParen' (""->"" 'arrow' type 'type')?
   ;
typePathInputs
   : type 'type' ("","" 'comma' type 'type')* "","" 'comma'?
   ;

# 12.6
visibility
   : ""pub"" 'pubToken' (""("" 'leftParen' (""crate"" 'crateToken' | ""self"" 'selfToken' | ""super"" 'superToken' | ""in"" 'inToken' simplePath 'path') "")"" 'rightParen')? {{}}
   | ""crate"" 'crateToken' {{}} ### added
   ;

# technical
identifier
   : <NON_KEYWORD_IDENTIFIER>
   | <RAW_IDENTIFIER>
   | ""macro_rules""
   | ""auto""	###
   ;
keyword
   : ""as""
   | ""break""
   | ""const""
   | ""continue""
   | ""crate""
   | ""else""
   | ""enum""
   | ""extern""
   ### part of macroLiteralToken -- | ""false""
   | ""fn""
   | ""for""
   | ""if""
   | ""impl""
   | ""in""
   | ""let""
   | ""loop""
   | ""match""
   | ""mod""
   | ""move""
   | ""mut""
   | ""pub""
   | ""ref""
   | ""return""
   | ""self""
   | ""Self""
   | ""static""
   | ""struct""
   | ""super""
   | ""trait""
   ### part of macroLiteralToken -- | ""true""
   | ""type""
   | ""unsafe""
   | ""use""
   | ""where""
   | ""while""

   # 2018+
   | ""async""
   | ""await""
   | ""dyn""
   # reserved
   | ""abstract""
   | ""become""
   | ""box""
   | ""do""
   | ""final""
   | ""macro""
   | ""override""
   | ""priv""
   | ""typeof""
   | ""unsized""
   | ""virtual""
   | ""yield""
   | ""try""
   | ""union""
   | ""'static""
   ;
macroIdentifierLikeToken
   : keyword
   | identifier
   | ""'_""
   | ""$crate""
   | <LIFETIME_OR_LABEL>
   ;
macroLiteralToken
   : literalExpression
   ;
# macroDelimiterToken: '{' | '}' | '[' | ']' | '(' | ')';
macroPunctuationToken
   : ""-""
   #| '+' | '*'
   | ""/""
   | ""%""
   | ""^""
   | ""!""
   | <amp>
   | ""|""
   | ""&&""
   | ""||""
   # already covered by '<' and '>' in macro | shl | shr
   | ""<<""	###
   | "">>""	###
   | "">>>""###
   | ""+=""
   | ""-=""
   | ""*=""
   | ""/=""
   | ""%=""
   | ""^=""
   | ""&=""
   | ""|=""
   | ""<<=""
   | "">>=""
   | ""=""
   | ""==""
   | ""!=""
   | <gt>
   | <lt>
   | "">=""
   | ""<=""
   | ""@""
   | ""_""
   | "".""
   | ""..""
   | ""...""
   | ""..=""
   | "",""
   | "";""
   | "":"" 'colon'
   | ""::""
   | ""->""
   | ""=>""
   | ""#""
   #| '$' | '?'
   ;

# LA can be removed, legal rust code still pass but the cost is `let c = a < < b` will pass... i hope antlr5 can add
# some new syntax? dsl? for these stuff so i needn't write it in (at least) 5 language"
]

{ #category : #'file types' }
RustParser class >> fileExtension [
	^ '.rs'
]

{ #category : #generated }
RustParser class >> reduceTable [
^#(
	#(132 0 #reduceActionForinnerAttribute__attr__1: 6820865 false) 
	#(173 0 #reduceActionFor__extern___externToken__abi__abi____1: 12014593 false) 
	#(131 1 #reduceActionForcrate1: 6788097 false) 
	#(131 2 #reduceActionForcrate3: 6788099 false) 
	#(363 1 #liftFirstValue: 37131269 false) 
	#(387 1 #liftFirstValue: 39596036 false) 
	#(363 1 #liftFirstValue: 37131268 false) 
	#(386 1 #reduceActionForvisibility6: 39355398 false) 
	#(172 1 #reduceActionFor__extern___externToken__abi__abi___1: 12014593 false) 
	#(338 0 #reduceActionForfunctionTypeQualifiers1: 35459073 false) 
	#(387 1 #liftFirstValue: 39596035 false) 
	#(386 1 #reduceActionForvisibility1: 39355393 false) 
	#(363 1 #liftFirstValue: 37131267 false) 
	#(363 1 #liftFirstValue: 37131266 false) 
	#(387 1 #liftFirstValue: 39596033 false) 
	#(387 1 #liftFirstValue: 39596034 false) 
	#(131 2 #reduceActionForcrate2: 6788098 false) 
	#(141 1 #reduceActionFormacroInvocationSemi2: 7720962 false) 
	#(160 1 #liftFirstValue: 10841089 false) 
	#(160 1 #liftFirstValue: 10841090 false) 
	#(133 1 #reduceActionForitem_1: 6844417 false) 
	#(157 1 #reduceActionForitem1: 10010625 false) 
	#(157 1 #reduceActionForitem1: 10010626 false) 
	#(159 1 #reduceActionForvisItem1: 10087425 false) 
	#(159 1 #reduceActionForvisItem3: 10087427 false) 
	#(159 1 #reduceActionForvisItem5: 10087429 false) 
	#(159 1 #reduceActionForvisItem7: 10087431 false) 
	#(173 1 #reduceActionFor__extern___externToken__abi__abi____2: 12014594 false) 
	#(171 1 #reduceActionForfunctionQualifiers1: 11893761 false) 
	#(159 1 #reduceActionForvisItem9: 10087433 false) 
	#(159 1 #reduceActionForvisItem11: 10087435 false) 
	#(186 1 #reduceActionFor__extern___externToken__abi__abi____2: 12983297 false) 
	#(186 1 #reduceActionForstruct2: 12983298 false) 
	#(159 1 #reduceActionForvisItem13: 10087437 false) 
	#(159 1 #reduceActionForvisItem15: 10087439 false) 
	#(159 1 #reduceActionForvisItem17: 10087441 false) 
	#(159 1 #reduceActionForvisItem19: 10087443 false) 
	#(159 1 #reduceActionForvisItem21: 10087445 false) 
	#(159 1 #reduceActionForvisItem23: 10087447 false) 
	#(159 1 #reduceActionForvisItem25: 10087449 false) 
	#(216 1 #reduceActionForimplementation1: 15343617 false) 
	#(216 1 #reduceActionForimplementation2: 15343618 false) 
	#(159 1 #reduceActionForvisItem27: 10087451 false) 
	#(132 2 #reduceActionForinnerAttribute__attr__2: 6820866 false) 
	#(158 1 #reduceActionForouterAttribute__attr__1: 10020865 false) 
	#(360 1 #reduceActionForsimplePath1: 37022721 false) 
	#(363 1 #liftFirstValue: 37131265 false) 
	#(131 3 #reduceActionForcrate4: 6788100 false) 
	#(360 2 #reduceActionForsimplePath3: 37022723 false) 
	#(171 2 #reduceActionForfunctionQualifiers3: 11893763 false) 
	#(171 2 #reduceActionForfunctionQualifiers5: 11893765 false) 
	#(171 2 #reduceActionForfunctionQualifiers9: 11893769 false) 
	#(174 1 #liftFirstValue: 12076033 false) 
	#(174 1 #liftFirstValue: 12076035 false) 
	#(172 2 #reduceActionFor__extern___externToken__abi__abi___2: 12014594 false) 
	#(174 1 #liftFirstValue: 12076034 false) 
	#(329 1 #reduceActionForneverType1: 34655233 false) 
	#(359 1 #liftFirstValue: 36948995 false) 
	#(359 1 #liftFirstValue: 36948994 false) 
	#(368 1 #liftFirstValue: 37472258 false) 
	#(350 1 #reduceActionForinferredType1: 36452353 false) 
	#(338 1 #reduceActionForfunctionTypeQualifiers2: 35459074 false) 
	#(338 1 #reduceActionForfunctionTypeQualifiers4: 35459076 false) 
	#(359 1 #liftFirstValue: 36948993 false) 
	#(179 0 #reduceActionForinnerAttribute__attr__1: 12305409 false) 
	#(327 1 #liftFirstValue: 34274317 false) 
	#(134 1 #liftFirstValue: 6866946 false) 
	#(134 1 #liftFirstValue: 6866945 false) 
	#(325 1 #liftFirstValue: 34109441 false) 
	#(327 1 #liftFirstValue: 34274305 false) 
	#(327 1 #liftFirstValue: 34274309 false) 
	#(327 1 #liftFirstValue: 34274308 false) 
	#(327 1 #liftFirstValue: 34274312 false) 
	#(327 1 #liftFirstValue: 34274313 false) 
	#(327 1 #liftFirstValue: 34274311 false) 
	#(327 1 #liftFirstValue: 34274310 false) 
	#(327 1 #liftFirstValue: 34274316 false) 
	#(325 1 #liftFirstValue: 34109443 false) 
	#(327 1 #liftFirstValue: 34274306 false) 
	#(325 1 #liftFirstValue: 34109442 false) 
	#(327 1 #liftFirstValue: 34274314 false) 
	#(346 1 #reduceActionFortraitObjectType1: 36117505 false) 
	#(353 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 36555777 false) 
	#(347 1 #reduceActionFortraitObjectTypeOneBound1: 36184065 false) 
	#(354 1 #liftFirstValue: 36615170 false) 
	#(354 1 #reduceActionFortypeParamBound1: 36615169 false) 
	#(368 1 #liftFirstValue: 37472257 false) 
	#(381 1 #reduceActionFortypePathSegment1: 39062529 false) 
	#(327 1 #liftFirstValue: 34274315 false) 
	#(355 1 #reduceActionFortraitBound1: 36690945 false) 
	#(327 1 #liftFirstValue: 34274307 false) 
	#(380 1 #reduceActionFortypePath1: 38965249 false) 
	#(210 0 #nil 15001601 false) 
	#(171 2 #reduceActionForfunctionQualifiers2: 11893762 false) 
	#(166 1 #reduceActionForuseTree1: 11390977 false) 
	#(166 1 #reduceActionForuseTree10: 11390986 false) 
	#(133 2 #reduceActionForitem_2: 6844418 false) 
	#(141 2 #reduceActionFormacroInvocationSemi1: 7720961 false) 
	#(157 2 #reduceActionForitem3: 10010627 false) 
	#(157 2 #reduceActionForitem3: 10010628 false) 
	#(158 2 #reduceActionForinnerAttribute__attr__2: 10020866 false) 
	#(362 1 #reduceActionFor_______separator__simplePathSegment__1: 37076993 false) 
	#(360 2 #reduceActionForsimplePath2: 37022722 false) 
	#(159 2 #reduceActionForvisItem2: 10087426 false) 
	#(159 2 #reduceActionForvisItem4: 10087428 false) 
	#(159 2 #reduceActionForvisItem6: 10087430 false) 
	#(159 2 #reduceActionForvisItem8: 10087432 false) 
	#(159 2 #reduceActionForvisItem10: 10087434 false) 
	#(159 2 #reduceActionForvisItem12: 10087436 false) 
	#(159 2 #reduceActionForvisItem14: 10087438 false) 
	#(159 2 #reduceActionForvisItem16: 10087440 false) 
	#(159 2 #reduceActionForvisItem18: 10087442 false) 
	#(159 2 #reduceActionForvisItem20: 10087444 false) 
	#(159 2 #reduceActionForvisItem22: 10087446 false) 
	#(159 2 #reduceActionForvisItem24: 10087448 false) 
	#(159 2 #reduceActionForvisItem26: 10087450 false) 
	#(159 2 #reduceActionForvisItem28: 10087452 false) 
	#(239 1 #reduceActionForattr1: 17922049 false) 
	#(360 3 #reduceActionForsimplePath4: 37022724 false) 
	#(171 3 #reduceActionForfunctionQualifiers4: 11893764 false) 
	#(171 3 #reduceActionForfunctionQualifiers7: 11893767 false) 
	#(171 3 #reduceActionForfunctionQualifiers6: 11893766 false) 
	#(171 3 #reduceActionForfunctionQualifiers11: 11893771 false) 
	#(171 3 #reduceActionForfunctionQualifiers13: 11893773 false) 
	#(171 3 #reduceActionForfunctionQualifiers10: 11893770 false) 
	#(231 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 16949249 false) 
	#(163 1 #liftFirstValue: 11198466 false) 
	#(163 1 #liftFirstValue: 11198465 false) 
	#(330 2 #reduceActionFortupleType1: 34702337 false) 
	#(332 1 #reduceActionFor_______separator__simplePathSegment__1: 34735105 false) 
	#(380 2 #reduceActionFortypePath3: 38965251 false) 
	#(355 2 #reduceActionFortraitBound3: 36690947 false) 
	#(346 2 #reduceActionFortraitObjectType2: 36117506 false) 
	#(347 2 #reduceActionFortraitObjectTypeOneBound2: 36184066 false) 
	#(338 2 #reduceActionForfunctionTypeQualifiers3: 35459075 false) 
	#(235 2 #reduceActionForforLifetimes1: 17294337 false) 
	#(348 2 #reduceActionForimplTraitType1: 36281345 false) 
	#(338 2 #reduceActionForfunctionTypeQualifiers5: 35459077 false) 
	#(222 2 #reduceActionForgenericParams1: 16293889 false) 
	#(224 1 #reduceActionFor_______separator__simplePathSegment__1: 16324609 false) 
	#(335 2 #reduceActionForreferenceType1: 35044353 false) 
	#(326 1 #liftFirstValue: 34194433 false) 
	#(326 1 #liftFirstValue: 34194434 false) 
	#(355 2 #reduceActionFortraitBound2: 36690946 false) 
	#(351 2 #reduceActionFortypeParamBounds1: 36506625 false) 
	#(381 2 #reduceActionFortypePathSegment4: 39062532 false) 
	#(381 2 #reduceActionFortypePathSegment2: 39062530 false) 
	#(381 2 #reduceActionFortypePathSegment3: 39062531 false) 
	#(379 1 #reduceActionFor_______separator__typePathSegment__1: 38917121 false) 
	#(377 2 #reduceActionForqualifiedPathInType1: 38873089 false) 
	#(380 2 #reduceActionFortypePath2: 38965250 false) 
	#(161 3 #reduceActionFormodule1: 10915841 false) 
	#(187 3 #reduceActionForstructStruct3: 13031427 false) 
	#(209 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 14982145 false) 
	#(215 0 #reduceActionFor______colon__typeParamBounds___1: 15261697 false) 
	#(210 1 #liftFirstValue: 15001602 false) 
	#(185 3 #reduceActionFortypeAlias1: 12798977 false) 
	#(166 2 #reduceActionForuseTree4: 11390980 false) 
	#(166 2 #reduceActionForuseTree2: 11390978 false) 
	#(168 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 11496449 false) 
	#(165 3 #reduceActionForuseDeclaration1: 11317249 false) 
	#(136 0 #reduceActionForinnerAttribute__attr__1: 7030785 false) 
	#(361 2 #reduceActionFor__extern___externToken__abi__abi___2: 37076993 false) 
	#(362 2 #reduceActionFor_______separator__simplePathSegment__2: 37076994 false) 
	#(238 4 #reduceActionForouterAttribute1: 17822721 false) 
	#(240 1 #reduceActionForattrInput1: 17967105 false) 
	#(239 2 #reduceActionForattr2: 17922050 false) 
	#(171 4 #reduceActionForfunctionQualifiers8: 11893768 false) 
	#(171 4 #reduceActionForfunctionQualifiers12: 11893772 false) 
	#(171 4 #reduceActionForfunctionQualifiers15: 11893775 false) 
	#(171 4 #reduceActionForfunctionQualifiers14: 11893774 false) 
	#(229 2 #reduceActionForwhereClause1: 16910337 false) 
	#(197 4 #reduceActionForenumeration1: 13745153 false) 
	#(200 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 13919233 false) 
	#(162 4 #reduceActionForexternCrate1: 11086849 false) 
	#(219 4 #reduceActionForexternBlock1: 15860737 false) 
	#(221 1 #reduceActionForexternalItem1: 16022529 false) 
	#(221 1 #reduceActionForvisItem7: 16022535 false) 
	#(221 1 #reduceActionForvisItem19: 16022531 false) 
	#(220 1 #reduceActionForouterAttribute__attr__1: 15977473 false) 
	#(328 3 #reduceActionForparenthesizedType1: 34565121 false) 
	#(331 2 #reduceActionFor__extern___externToken__abi__abi___2: 34735105 false) 
	#(330 3 #reduceActionFortupleType2: 34702338 false) 
	#(332 2 #reduceActionFor_______separator__simplePathSegment__2: 34735106 false) 
	#(355 3 #reduceActionFortraitBound5: 36690949 false) 
	#(336 3 #reduceActionForrawPointerType2: 35146754 false) 
	#(336 3 #reduceActionForrawPointerType1: 35146753 false) 
	#(380 3 #reduceActionFortypePath4: 38965252 false) 
	#(355 3 #reduceActionFortraitBound4: 36690948 false) 
	#(334 3 #reduceActionForsliceType1: 34948097 false) 
	#(338 3 #reduceActionForfunctionTypeQualifiers6: 35459078 false) 
	#(226 1 #reduceActionForlifetimeParam1: 16560129 false) 
	#(225 2 #reduceActionForgenericParam1: 16414721 false) 
	#(225 2 #reduceActionForgenericParam1: 16414722 false) 
	#(225 2 #reduceActionForgenericParam1: 16414723 false) 
	#(179 2 #reduceActionForinnerAttribute__attr__2: 12305410 false) 
	#(227 1 #reduceActionFortypeParam1: 16679937 false) 
	#(224 2 #reduceActionFor_______separator__simplePathSegment__2: 16324610 false) 
	#(223 2 #reduceActionFor__extern___externToken__abi__abi___2: 16324609 false) 
	#(222 3 #reduceActionForgenericParams2: 16293890 false) 
	#(376 3 #reduceActionForqualifiedPathType1: 38772737 false) 
	#(349 2 #reduceActionForimplTraitTypeOneBound1: 36346881 false) 
	#(335 3 #reduceActionForreferenceType2: 35044354 false) 
	#(335 3 #reduceActionForreferenceType3: 35044355 false) 
	#(351 3 #reduceActionFortypeParamBounds2: 36506626 false) 
	#(353 2 #reduceActionFor_______separator__simplePathSegment__2: 36555778 false) 
	#(382 2 #reduceActionFortypePathFn1: 39168001 false) 
	#(385 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 39301121 false) 
	#(381 3 #reduceActionFortypePathSegment5: 39062533 false) 
	#(381 3 #reduceActionFortypePathSegment6: 39062534 false) 
	#(247 1 #reduceActionForliteralExpression10: 25168906 false) 
	#(247 1 #reduceActionForliteralExpression10: 25168905 false) 
	#(247 1 #reduceActionForliteralExpression10: 25168897 false) 
	#(247 1 #reduceActionForliteralExpression10: 25168898 false) 
	#(247 1 #reduceActionForliteralExpression10: 25168900 false) 
	#(247 1 #reduceActionForliteralExpression10: 25168901 false) 
	#(247 1 #reduceActionForliteralExpression10: 25168902 false) 
	#(249 1 #reduceActionForliteralExpression10: 25564161 false) 
	#(248 1 #reduceActionForliteralExpression10: 25496577 false) 
	#(369 2 #reduceActionForgenericArgs1: 37570561 false) 
	#(373 1 #liftFirstValue: 38132739 false) 
	#(247 1 #liftFirstValue: 25168904 false) 
	#(247 1 #liftFirstValue: 25168903 false) 
	#(373 1 #liftFirstValue: 38132737 false) 
	#(372 1 #liftFirstValue: 38020098 false) 
	#(372 1 #reduceActionFortypeParamBound1: 38020097 false) 
	#(373 1 #reduceActionForgenericArgsConst4: 38132740 false) 
	#(371 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 37946369 false) 
	#(372 1 #liftFirstValue: 38020099 false) 
	#(372 1 #liftFirstValue: 38020100 false) 
	#(247 1 #reduceActionForliteralExpression10: 25168899 false) 
	#(378 2 #reduceActionFor_______separator__typePathSegment_1: 38917121 false) 
	#(379 2 #reduceActionFor_______separator__typePathSegment__2: 38917122 false) 
	#(142 4 #reduceActionFormacroRulesDefinition1: 7934977 false) 
	#(386 4 #reduceActionForvisibility2: 39355394 false) 
	#(386 4 #reduceActionForvisibility3: 39355395 false) 
	#(386 4 #reduceActionForvisibility4: 39355396 false) 
	#(195 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 13596673 false) 
	#(187 4 #reduceActionForstructStruct1: 13031425 false) 
	#(191 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 13385729 false) 
	#(187 4 #reduceActionForstructStruct9: 13031433 false) 
	#(187 4 #reduceActionForstructStruct6: 13031430 false) 
	#(209 1 #reduceActionFor__extern___externToken__abi__abi____2: 14982146 false) 
	#(214 1 #reduceActionFor______colon__typeParamBounds__1: 15261697 false) 
	#(215 1 #reduceActionFor__extern___externToken__abi__abi____2: 15261698 false) 
	#(185 4 #reduceActionFortypeAlias9: 12798985 false) 
	#(185 4 #reduceActionFortypeAlias3: 12798979 false) 
	#(161 4 #reduceActionFormodule4: 10915844 false) 
	#(166 3 #reduceActionForuseTree5: 11390981 false) 
	#(169 0 #nil 11526145 false) 
	#(166 3 #reduceActionForuseTree7: 11390983 false) 
	#(166 3 #reduceActionForuseTree12: 11390988 false) 
	#(166 3 #reduceActionForuseTree12: 11390987 false) 
	#(237 5 #reduceActionForinnerAttribute1: 17712129 false) 
	#(240 2 #reduceActionForattrInput2: 17967106 false) 
	#(206 5 #reduceActionForconstantItem3: 14516227 false) 
	#(206 5 #reduceActionForconstantItem3: 14516225 false) 
	#(171 5 #reduceActionForfunctionQualifiers16: 11893776 false) 
	#(231 2 #reduceActionFor_______separator__simplePathSegment__2: 16949250 false) 
	#(229 3 #reduceActionForwhereClause2: 16910338 false) 
	#(232 1 #liftFirstValue: 17027073 false) 
	#(232 1 #liftFirstValue: 17027074 false) 
	#(201 2 #reduceActionForenumItem1: 13969409 false) 
	#(197 5 #reduceActionForenumeration2: 13745154 false) 
	#(198 2 #reduceActionFortypeParamBounds1: 13887489 false) 
	#(197 5 #reduceActionForenumeration5: 13745157 false) 
	#(197 5 #reduceActionForenumeration3: 13745155 false) 
	#(164 2 #reduceActionFor__extern___externToken__abi__abi___2: 11241474 false) 
	#(164 2 #reduceActionFor__extern___externToken__abi__abi___2: 11241473 false) 
	#(162 5 #reduceActionForexternCrate2: 11086850 false) 
	#(221 2 #reduceActionForexternalItem2: 16022530 false) 
	#(221 2 #reduceActionForexternalItem9: 16022537 false) 
	#(221 2 #reduceActionForexternalItem5: 16022533 false) 
	#(219 5 #reduceActionForexternBlock2: 15860738 false) 
	#(220 2 #reduceActionForinnerAttribute__attr__2: 15977474 false) 
	#(221 2 #reduceActionForvisItem8: 16022536 false) 
	#(221 2 #reduceActionForvisItem20: 16022532 false) 
	#(219 5 #reduceActionForexternBlock3: 15860739 false) 
	#(355 4 #reduceActionFortraitBound7: 36690951 false) 
	#(355 4 #reduceActionFortraitBound6: 36690950 false) 
	#(330 4 #reduceActionFortupleType3: 34702339 false) 
	#(245 1 #reduceActionForexpressionWithoutBlock42: 19207210 false) 
	#(245 1 #reduceActionForexpressionWithoutBlock61: 19207229 false) 
	#(245 1 #reduceActionForexpressionWithoutBlock57: 19207225 false) 
	#(245 1 #reduceActionForexpressionWithoutBlock65: 19207233 false) 
	#(245 1 #liftFirstValue: 19207242 false) 
	#(244 1 #liftFirstValue: 19081217 false) 
	#(244 1 #liftFirstValue: 19081218 false) 
	#(245 1 #liftFirstValue: 19207170 false) 
	#(245 1 #liftFirstValue: 19207171 false) 
	#(246 1 #liftFirstValue: 24877058 false) 
	#(246 1 #liftFirstValue: 24877059 false) 
	#(246 1 #liftFirstValue: 24877060 false) 
	#(245 1 #liftFirstValue: 19207240 false) 
	#(263 1 #liftFirstValue: 26475521 false) 
	#(263 1 #liftFirstValue: 26475522 false) 
	#(245 1 #liftFirstValue: 19207241 false) 
	#(246 1 #liftFirstValue: 24877061 false) 
	#(279 1 #reduceActionForloopExpression1: 28421121 false) 
	#(279 1 #reduceActionForloopExpression3: 28421123 false) 
	#(279 1 #reduceActionForloopExpression5: 28421125 false) 
	#(279 1 #reduceActionForloopExpression7: 28421127 false) 
	#(246 1 #liftFirstValue: 24877062 false) 
	#(246 1 #liftFirstValue: 24877063 false) 
	#(246 1 #liftFirstValue: 24877064 false) 
	#(250 1 #liftFirstValue: 25646081 false) 
	#(364 1 #reduceActionForpathInExpression1: 37261313 false) 
	#(367 1 #reduceActionForfunctionTypeQualifiers2: 37381121 false) 
	#(250 1 #liftFirstValue: 25646082 false) 
	#(358 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 36876289 false) 
	#(227 2 #reduceActionFortypeParam3: 16679939 false) 
	#(222 4 #reduceActionForgenericParams4: 16293892 false) 
	#(222 4 #reduceActionForgenericParams3: 16293891 false) 
	#(335 4 #reduceActionForreferenceType4: 35044356 false) 
	#(217 5 #reduceActionForinherentImpl1: 15397889 false) 
	#(236 1 #reduceActionForexternalItem1: 17357825 false) 
	#(236 1 #reduceActionForvisItem7: 17357835 false) 
	#(236 1 #reduceActionForvisItem9: 17357827 false) 
	#(236 1 #reduceActionForvisItem17: 17357831 false) 
	#(211 1 #reduceActionForouterAttribute__attr__1: 15063041 false) 
	#(337 4 #reduceActionForbareFunctionType1: 35263489 false) 
	#(340 1 #reduceActionForfunctionParametersMaybeNamedVariadic1: 35622913 false) 
	#(343 0 #reduceActionFor______comma__maybeNamedParam__1: 35794945 false) 
	#(340 1 #reduceActionFor__extern___externToken__abi__abi____2: 35622914 false) 
	#(352 2 #reduceActionFor__extern___externToken__abi__abi___2: 36555777 false) 
	#(383 2 #reduceActionFortypeParamBounds1: 39268353 false) 
	#(382 3 #reduceActionFortypePathFn3: 39168003 false) 
	#(373 2 #reduceActionForgenericArgsConst2: 38132738 false) 
	#(149 0 #reduceActionForinnerAttribute__attr__1: 8413185 false) 
	#(146 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 8254465 false) 
	#(161 5 #reduceActionFormodule2: 10915842 false) 
	#(386 5 #reduceActionForvisibility5: 39355397 false) 
	#(207 5 #reduceActionForstaticItem1: 14685185 false) 
	#(188 5 #reduceActionFortupleStruct1: 13192193 false) 
	#(196 2 #reduceActionFortupleField1: 13649921 false) 
	#(193 2 #reduceActionFortypeParamBounds1: 13559809 false) 
	#(187 5 #reduceActionForstructStruct2: 13031426 false) 
	#(189 2 #reduceActionFortypeParamBounds1: 13346817 false) 
	#(187 5 #reduceActionForstructStruct7: 13031431 false) 
	#(187 5 #reduceActionForstructStruct12: 13031436 false) 
	#(187 5 #reduceActionForstructStruct4: 13031428 false) 
	#(214 2 #reduceActionFor______colon__typeParamBounds__2: 15261698 false) 
	#(212 0 #reduceActionForinnerAttribute__attr__1: 15063041 false) 
	#(185 5 #reduceActionFortypeAlias5: 12798981 false) 
	#(185 5 #reduceActionFortypeAlias2: 12798978 false) 
	#(185 5 #reduceActionFortypeAlias11: 12798987 false) 
	#(205 5 #reduceActionForunion1: 14368769 false) 
	#(219 5 #reduceActionForexternBlock5: 15860741 false) 
	#(169 1 #liftFirstValue: 11526146 false) 
	#(168 2 #reduceActionFor_______separator__simplePathSegment__2: 11496450 false) 
	#(166 4 #reduceActionForuseTree8: 11390984 false) 
	#(175 1 #reduceActionForfunctionParameters1: 12148737 false) 
	#(177 0 #reduceActionFor______comma__functionParam__1: 12241921 false) 
	#(391 1 #liftFirstValue: 40708101 false) 
	#(391 1 #liftFirstValue: 40708121 false) 
	#(391 1 #liftFirstValue: 40708138 false) 
	#(140 1 #reduceActionFortokenTreeToken5: 7497733 false) 
	#(389 1 #liftFirstValue: 40491012 false) 
	#(391 1 #liftFirstValue: 40708099 false) 
	#(391 1 #liftFirstValue: 40708113 false) 
	#(391 1 #liftFirstValue: 40708104 false) 
	#(391 1 #liftFirstValue: 40708115 false) 
	#(389 1 #liftFirstValue: 40491011 false) 
	#(388 1 #liftFirstValue: 39701555 false) 
	#(137 5 #reduceActionFormacroInvocationWithoutBlock1: 7077889 false) 
	#(155 1 #liftFirstValue: 9279489 false) 
	#(391 1 #liftFirstValue: 40708111 false) 
	#(155 1 #liftFirstValue: 9279490 false) 
	#(391 1 #liftFirstValue: 40708109 false) 
	#(391 1 #liftFirstValue: 40708132 false) 
	#(391 1 #liftFirstValue: 40708097 false) 
	#(391 1 #liftFirstValue: 40708110 false) 
	#(391 1 #liftFirstValue: 40708136 false) 
	#(391 1 #liftFirstValue: 40708128 false) 
	#(391 1 #liftFirstValue: 40708129 false) 
	#(391 1 #liftFirstValue: 40708130 false) 
	#(391 1 #liftFirstValue: 40708131 false) 
	#(391 1 #liftFirstValue: 40708098 false) 
	#(391 1 #liftFirstValue: 40708112 false) 
	#(391 1 #liftFirstValue: 40708134 false) 
	#(391 1 #liftFirstValue: 40708135 false) 
	#(391 1 #liftFirstValue: 40708133 false) 
	#(391 1 #liftFirstValue: 40708106 false) 
	#(391 1 #liftFirstValue: 40708117 false) 
	#(391 1 #liftFirstValue: 40708125 false) 
	#(391 1 #liftFirstValue: 40708119 false) 
	#(391 1 #liftFirstValue: 40708120 false) 
	#(391 1 #liftFirstValue: 40708137 false) 
	#(391 1 #liftFirstValue: 40708124 false) 
	#(391 1 #liftFirstValue: 40708107 false) 
	#(391 1 #liftFirstValue: 40708118 false) 
	#(391 1 #liftFirstValue: 40708108 false) 
	#(155 1 #liftFirstValue: 9279491 false) 
	#(391 1 #liftFirstValue: 40708126 false) 
	#(388 1 #liftFirstValue: 39701528 false) 
	#(391 1 #liftFirstValue: 40708100 false) 
	#(391 1 #liftFirstValue: 40708114 false) 
	#(391 1 #liftFirstValue: 40708127 false) 
	#(388 1 #liftFirstValue: 39701541 false) 
	#(388 1 #liftFirstValue: 39701505 false) 
	#(388 1 #liftFirstValue: 39701538 false) 
	#(388 1 #liftFirstValue: 39701539 false) 
	#(388 1 #liftFirstValue: 39701542 false) 
	#(388 1 #liftFirstValue: 39701543 false) 
	#(388 1 #liftFirstValue: 39701506 false) 
	#(388 1 #liftFirstValue: 39701507 false) 
	#(388 1 #liftFirstValue: 39701508 false) 
	#(388 1 #liftFirstValue: 39701509 false) 
	#(388 1 #liftFirstValue: 39701544 false) 
	#(388 1 #liftFirstValue: 39701540 false) 
	#(388 1 #liftFirstValue: 39701510 false) 
	#(388 1 #liftFirstValue: 39701511 false) 
	#(388 1 #liftFirstValue: 39701512 false) 
	#(388 1 #liftFirstValue: 39701545 false) 
	#(388 1 #liftFirstValue: 39701513 false) 
	#(388 1 #liftFirstValue: 39701514 false) 
	#(388 1 #liftFirstValue: 39701515 false) 
	#(388 1 #liftFirstValue: 39701516 false) 
	#(388 1 #liftFirstValue: 39701517 false) 
	#(388 1 #liftFirstValue: 39701518 false) 
	#(388 1 #liftFirstValue: 39701519 false) 
	#(388 1 #liftFirstValue: 39701546 false) 
	#(388 1 #liftFirstValue: 39701520 false) 
	#(388 1 #liftFirstValue: 39701521 false) 
	#(388 1 #liftFirstValue: 39701522 false) 
	#(388 1 #liftFirstValue: 39701523 false) 
	#(388 1 #liftFirstValue: 39701547 false) 
	#(388 1 #liftFirstValue: 39701548 false) 
	#(388 1 #liftFirstValue: 39701524 false) 
	#(388 1 #liftFirstValue: 39701525 false) 
	#(388 1 #liftFirstValue: 39701526 false) 
	#(388 1 #liftFirstValue: 39701527 false) 
	#(388 1 #liftFirstValue: 39701529 false) 
	#(388 1 #liftFirstValue: 39701530 false) 
	#(388 1 #liftFirstValue: 39701531 false) 
	#(388 1 #liftFirstValue: 39701532 false) 
	#(388 1 #liftFirstValue: 39701553 false) 
	#(388 1 #liftFirstValue: 39701533 false) 
	#(388 1 #liftFirstValue: 39701549 false) 
	#(388 1 #liftFirstValue: 39701554 false) 
	#(388 1 #liftFirstValue: 39701534 false) 
	#(388 1 #liftFirstValue: 39701550 false) 
	#(388 1 #liftFirstValue: 39701535 false) 
	#(388 1 #liftFirstValue: 39701551 false) 
	#(388 1 #liftFirstValue: 39701536 false) 
	#(388 1 #liftFirstValue: 39701537 false) 
	#(388 1 #liftFirstValue: 39701552 false) 
	#(391 1 #liftFirstValue: 40708103 false) 
	#(391 1 #liftFirstValue: 40708116 false) 
	#(391 1 #liftFirstValue: 40708105 false) 
	#(389 1 #liftFirstValue: 40491013 false) 
	#(391 1 #liftFirstValue: 40708123 false) 
	#(391 1 #liftFirstValue: 40708122 false) 
	#(391 1 #liftFirstValue: 40708102 false) 
	#(139 1 #reduceActionFor__extern___externToken__abi__abi____2: 7433218 false) 
	#(136 2 #reduceActionFortokenTree_2: 7030786 false) 
	#(139 1 #reduceActionForouterAttribute__attr__1: 7433217 false) 
	#(140 1 #reduceActionFortokenTreeToken5: 7497732 false) 
	#(390 1 #liftFirstValue: 40601601 false) 
	#(389 1 #liftFirstValue: 40491010 false) 
	#(389 1 #liftFirstValue: 40491009 false) 
	#(140 1 #reduceActionFortokenTreeToken5: 7497729 false) 
	#(140 1 #liftFirstValue: 7497730 false) 
	#(140 1 #reduceActionFortokenTreeToken5: 7497731 false) 
	#(137 5 #reduceActionFormacroInvocationWithoutBlock1: 7077890 false) 
	#(135 5 #reduceActionFormacroInvocationWithoutBlock1: 6957057 false) 
	#(138 3 #reduceActionFordelimTokenTree1: 7289857 false) 
	#(138 3 #reduceActionFordelimTokenTree1: 7289858 false) 
	#(138 3 #reduceActionFordelimTokenTree1: 7289859 false) 
	#(230 2 #reduceActionFor__extern___externToken__abi__abi___2: 16949249 false) 
	#(234 2 #reduceActionFortypeBoundWhereClauseItem1: 17197057 false) 
	#(201 3 #reduceActionForenumItem5: 13969413 false) 
	#(201 3 #reduceActionForenumItem2: 13969410 false) 
	#(201 3 #reduceActionForenumItem3: 13969411 false) 
	#(201 3 #reduceActionForenumItem4: 13969412 false) 
	#(198 3 #reduceActionFortypeParamBounds2: 13887490 false) 
	#(200 2 #reduceActionFor_______separator__simplePathSegment__2: 13919234 false) 
	#(197 6 #reduceActionForenumeration6: 13745158 false) 
	#(197 6 #reduceActionForenumeration7: 13745159 false) 
	#(197 6 #reduceActionForenumeration4: 13745156 false) 
	#(221 3 #reduceActionForexternalItem10: 16022538 false) 
	#(221 3 #reduceActionForexternalItem6: 16022534 false) 
	#(219 6 #reduceActionForexternBlock4: 15860740 false) 
	#(355 5 #reduceActionFortraitBound8: 36690952 false) 
	#(245 2 #reduceActionForgenericArgsConst2: 19207187 false) 
	#(245 2 #reduceActionForexpressionWithoutBlock13: 19207181 false) 
	#(245 2 #reduceActionForexpressionWithoutBlock13: 19207183 false) 
	#(245 2 #reduceActionForgenericArgsConst2: 19207185 false) 
	#(245 2 #reduceActionForgenericArgsConst2: 19207186 false) 
	#(245 2 #reduceActionForexpressionWithoutBlock43: 19207211 false) 
	#(245 2 #reduceActionForexpressionWithoutBlock43: 19207212 false) 
	#(364 2 #reduceActionForpathInExpression3: 37261315 false) 
	#(254 2 #reduceActionForasyncBlockExpression1: 25955329 false) 
	#(245 2 #reduceActionForexpressionWithoutBlock75: 19207243 false) 
	#(245 2 #reduceActionForexpressionWithoutBlock63: 19207231 false) 
	#(245 2 #reduceActionForexpressionWithoutBlock62: 19207230 false) 
	#(245 2 #reduceActionForexpressionWithoutBlock59: 19207227 false) 
	#(245 2 #reduceActionForexpressionWithoutBlock58: 19207226 false) 
	#(303 1 #reduceActionForrestPattern1: 31975425 false) 
	#(302 1 #reduceActionForwildcardPattern1: 31926273 false) 
	#(300 1 #reduceActionForliteralExpression10: 31220738 false) 
	#(300 1 #reduceActionForliteralExpression10: 31220737 false) 
	#(300 1 #reduceActionForliteralExpression10: 31220739 false) 
	#(306 1 #reduceActionForliteralExpression10: 32292865 false) 
	#(300 1 #reduceActionForliteralExpression10: 31220741 false) 
	#(300 1 #reduceActionForliteralExpression10: 31220743 false) 
	#(300 1 #reduceActionForliteralExpression10: 31220740 false) 
	#(306 1 #reduceActionForliteralExpression10: 32292866 false) 
	#(300 1 #reduceActionForliteralExpression10: 31220744 false) 
	#(299 1 #liftFirstValue: 30853133 false) 
	#(300 1 #liftFirstValue: 31220747 false) 
	#(306 1 #liftFirstValue: 32292869 false) 
	#(300 1 #liftFirstValue: 31220745 false) 
	#(306 1 #liftFirstValue: 32292867 false) 
	#(297 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 30746625 false) 
	#(298 1 #liftFirstValue: 30792705 false) 
	#(299 1 #liftFirstValue: 30853121 false) 
	#(299 1 #liftFirstValue: 30853122 false) 
	#(299 1 #liftFirstValue: 30853123 false) 
	#(299 1 #liftFirstValue: 30853124 false) 
	#(298 1 #liftFirstValue: 30792706 false) 
	#(299 1 #liftFirstValue: 30853125 false) 
	#(299 1 #liftFirstValue: 30853126 false) 
	#(299 1 #liftFirstValue: 30853127 false) 
	#(299 1 #liftFirstValue: 30853128 false) 
	#(299 1 #liftFirstValue: 30853129 false) 
	#(299 1 #liftFirstValue: 30853130 false) 
	#(299 1 #liftFirstValue: 30853131 false) 
	#(299 1 #liftFirstValue: 30853132 false) 
	#(324 1 #liftFirstValue: 34029569 false) 
	#(306 1 #liftFirstValue: 32292871 false) 
	#(324 1 #liftFirstValue: 34029570 false) 
	#(306 1 #liftFirstValue: 32292872 false) 
	#(301 1 #reduceActionForidentifierPattern1: 31811585 false) 
	#(300 1 #reduceActionForliteralExpression10: 31220742 false) 
	#(293 1 #reduceActionFor__extern___externToken__abi__abi____2: 30444545 false) 
	#(280 2 #reduceActionFor__extern___externToken__abi__abi___2: 28699649 false) 
	#(245 2 #reduceActionForexpressionWithoutBlock66: 19207234 false) 
	#(255 2 #reduceActionForunsafeBlockExpression1: 26063873 false) 
	#(277 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 28263425 false) 
	#(274 2 #reduceActionForclosureExpression1: 27992065 false) 
	#(284 2 #reduceActionFor__extern___externToken__abi__abi___2: 29190145 false) 
	#(245 2 #reduceActionForexpressionWithoutBlock1: 19207169 false) 
	#(246 2 #reduceActionForexpressionWithoutBlock1: 24877057 false) 
	#(245 2 #reduceActionForexpressionWithoutBlock40: 19207208 false) 
	#(245 2 #reduceActionForexpressionWithoutBlock12: 19207180 false) 
	#(333 5 #reduceActionForarrayType1: 34816001 false) 
	#(279 2 #reduceActionForloopExpression2: 28421122 false) 
	#(279 2 #reduceActionForloopExpression4: 28421124 false) 
	#(279 2 #reduceActionForloopExpression6: 28421126 false) 
	#(279 2 #reduceActionForloopExpression8: 28421128 false) 
	#(366 1 #reduceActionFor_______separator__pathExprSegment__1: 37318657 false) 
	#(364 2 #reduceActionForpathInExpression2: 37261314 false) 
	#(375 2 #reduceActionForqualifiedPathInExpression1: 38661121 false) 
	#(226 3 #reduceActionForlifetimeParam2: 16560130 false) 
	#(356 1 #reduceActionFor__extern___externToken__abi__abi____2: 36855809 false) 
	#(227 3 #reduceActionFortypeParam5: 16679941 false) 
	#(227 3 #reduceActionFortypeParam2: 16679938 false) 
	#(222 5 #reduceActionForgenericParams5: 16293893 false) 
	#(376 5 #reduceActionForqualifiedPathType2: 38772738 false) 
	#(217 6 #reduceActionForinherentImpl5: 15397893 false) 
	#(337 5 #reduceActionForbareFunctionType5: 35263493 false) 
	#(236 2 #reduceActionForexternalItem2: 17357826 false) 
	#(236 2 #reduceActionForexternalItem9: 17357837 false) 
	#(236 2 #reduceActionForassociatedItem5: 17357829 false) 
	#(236 2 #reduceActionForassociatedItem9: 17357833 false) 
	#(217 6 #reduceActionForinherentImpl2: 15397890 false) 
	#(211 2 #reduceActionForinnerAttribute__attr__2: 15063042 false) 
	#(236 2 #reduceActionForvisItem8: 17357836 false) 
	#(236 2 #reduceActionForvisItem10: 17357828 false) 
	#(236 2 #reduceActionForvisItem18: 17357832 false) 
	#(217 6 #reduceActionForinherentImpl3: 15397891 false) 
	#(337 5 #reduceActionForbareFunctionType2: 35263490 false) 
	#(344 2 #reduceActionFormaybeNamedParam1: 35845121 false) 
	#(337 5 #reduceActionForbareFunctionType3: 35263491 false) 
	#(341 2 #reduceActionFormaybeNamedFunctionParameters1: 35743745 false) 
	#(382 4 #reduceActionFortypePathFn2: 39168002 false) 
	#(383 3 #reduceActionFortypeParamBounds2: 39268354 false) 
	#(385 2 #reduceActionFor_______separator__simplePathSegment__2: 39301122 false) 
	#(241 1 #reduceActionForstatement1: 18607105 false) 
	#(251 3 #reduceActionForblockExpression1: 25730049 false) 
	#(241 1 #liftFirstValue: 18607109 false) 
	#(241 1 #reduceActionForstatement2: 18607106 false) 
	#(253 1 #reduceActionForouterAttribute__attr__1: 25847809 false) 
	#(241 1 #liftFirstValue: 18607107 false) 
	#(241 1 #reduceActionForstatement4: 18607108 false) 
	#(252 1 #reduceActionForouterAttribute__attr__1: 25831427 false) 
	#(243 1 #reduceActionFor__extern___externToken__abi__abi___1: 18951170 false) 
	#(252 1 #reduceActionFor__extern___externToken__abi__abi____2: 25831425 false) 
	#(369 4 #reduceActionForgenericArgs2: 37570562 false) 
	#(371 2 #reduceActionFor_______separator__simplePathSegment__2: 37946370 false) 
	#(374 3 #reduceActionForgenericArgsBinding1: 38558721 false) 
	#(144 2 #reduceActionFortypeParamBounds1: 8220673 false) 
	#(143 3 #reduceActionFormacroRulesDef3: 8048643 false) 
	#(161 6 #reduceActionFormodule3: 10915843 false) 
	#(207 6 #reduceActionForstaticItem3: 14685187 false) 
	#(188 6 #reduceActionFortupleStruct2: 13192194 false) 
	#(196 3 #reduceActionFortupleField2: 13649922 false) 
	#(188 6 #reduceActionFortupleStruct3: 13192195 false) 
	#(193 3 #reduceActionFortypeParamBounds2: 13559810 false) 
	#(195 2 #reduceActionFor_______separator__simplePathSegment__2: 13596674 false) 
	#(189 3 #reduceActionFortypeParamBounds2: 13346818 false) 
	#(191 2 #reduceActionFor_______separator__simplePathSegment__2: 13385730 false) 
	#(188 6 #reduceActionFortupleStruct5: 13192197 false) 
	#(187 6 #reduceActionForstructStruct8: 13031432 false) 
	#(187 6 #reduceActionForstructStruct10: 13031434 false) 
	#(187 6 #reduceActionForstructStruct5: 13031429 false) 
	#(213 6 #reduceActionFortraitAlias1: 15110145 false) 
	#(212 1 #reduceActionFor__extern___externToken__abi__abi____2: 15063042 false) 
	#(185 6 #reduceActionFortypeAlias7: 12798983 false) 
	#(185 6 #reduceActionFortypeAlias13: 12798989 false) 
	#(185 6 #reduceActionFortypeAlias10: 12798986 false) 
	#(185 6 #reduceActionFortypeAlias4: 12798980 false) 
	#(205 6 #reduceActionForunion3: 14368771 false) 
	#(205 6 #reduceActionForunion2: 14368770 false) 
	#(219 6 #reduceActionForexternBlock6: 15860742 false) 
	#(219 6 #reduceActionForexternBlock7: 15860743 false) 
	#(161 6 #reduceActionFormodule5: 10915845 false) 
	#(167 2 #reduceActionFor__extern___externToken__abi__abi___2: 11496449 false) 
	#(166 5 #reduceActionForuseTree3: 11390979 false) 
	#(170 6 #reduceActionForfunction2: 11658242 false) 
	#(170 6 #reduceActionForfunction1: 11658241 false) 
	#(175 2 #reduceActionForfunctionParameters2: 12148738 false) 
	#(182 2 #reduceActionForfunctionParam2: 12545026 false) 
	#(180 1 #reduceActionForshorthandSelf1: 12362753 false) 
	#(178 2 #reduceActionForselfParam1: 12290049 false) 
	#(178 2 #reduceActionForselfParam2: 12290050 false) 
	#(182 2 #reduceActionForfunctionParam1: 12545025 false) 
	#(182 2 #reduceActionForfunctionParam3: 12545027 false) 
	#(175 2 #reduceActionForfunctionParameters3: 12148739 false) 
	#(213 7 #reduceActionFortraitAlias5: 15110149 false) 
	#(206 7 #reduceActionForconstantItem4: 14516228 false) 
	#(206 7 #reduceActionForconstantItem4: 14516226 false) 
	#(234 3 #reduceActionFortypeBoundWhereClauseItem3: 17197059 false) 
	#(234 3 #reduceActionFortypeBoundWhereClauseItem2: 17197058 false) 
	#(233 3 #reduceActionForlifetimeWhereClauseItem1: 17108993 false) 
	#(201 4 #reduceActionForenumItem6: 13969414 false) 
	#(201 4 #reduceActionForenumItem7: 13969415 false) 
	#(201 4 #reduceActionForenumItem8: 13969416 false) 
	#(202 2 #reduceActionForgenericParams1: 14146561 false) 
	#(204 2 #reduceActionFor__extern___externToken__abi__abi___2: 14291969 false) 
	#(203 2 #reduceActionForgenericParams1: 14218241 false) 
	#(199 2 #reduceActionFor__extern___externToken__abi__abi___2: 13919233 false) 
	#(197 7 #reduceActionForenumeration8: 13745160 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock14: 19207182 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock14: 19207184 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock70: 19207238 false) 
	#(261 1 #reduceActionFor_______separator__simplePathSegment__1: 26361857 false) 
	#(259 1 #reduceActionFor__extern___externToken__abi__abi____2: 26342401 false) 
	#(364 3 #reduceActionForpathInExpression4: 37261316 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock68: 19207236 false) 
	#(258 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 26205185 false) 
	#(254 3 #reduceActionForasyncBlockExpression2: 25955330 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock64: 19207232 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock60: 19207228 false) 
	#(307 2 #reduceActionForreferencePattern3: 32638979 false) 
	#(319 2 #reduceActionFortuplePattern1: 33583105 false) 
	#(320 1 #reduceActionFortuplePatternItems2: 33665026 false) 
	#(300 2 #reduceActionForgenericArgsConst2: 31220748 false) 
	#(306 2 #reduceActionForgenericArgsConst2: 32292870 false) 
	#(300 2 #reduceActionForgenericArgsConst2: 31220746 false) 
	#(306 2 #reduceActionForgenericArgsConst2: 32292868 false) 
	#(322 2 #reduceActionForslicePattern1: 33868801 false) 
	#(323 1 #reduceActionForslicePatternItems1: 33954817 false) 
	#(299 2 #reduceActionForpatternWithoutRange14: 30853134 false) 
	#(301 2 #reduceActionForidentifierPattern3: 31811587 false) 
	#(301 2 #reduceActionForidentifierPattern5: 31811589 false) 
	#(307 2 #reduceActionForreferencePattern3: 32638977 false) 
	#(295 2 #reduceActionFortypeParamBounds1: 30695425 false) 
	#(304 2 #reduceActionForrangePattern2: 32019458 false) 
	#(285 3 #reduceActionForifExpression1: 29261825 false) 
	#(274 3 #reduceActionForclosureExpression7: 27992071 false) 
	#(281 3 #reduceActionForuseDeclaration1: 28777473 false) 
	#(274 3 #reduceActionForclosureExpression3: 27992067 false) 
	#(278 2 #reduceActionForclosureParam1: 28322817 false) 
	#(275 2 #reduceActionFortypeParamBounds1: 28214273 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock33: 19207201 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock33: 19207191 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock51: 19207219 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock33: 19207206 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock51: 19207220 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock33: 19207189 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock51: 19207217 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock33: 19207192 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock51: 19207215 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock33: 19207193 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock51: 19207216 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock8: 19207176 false) 
	#(262 1 #liftFirstValue: 26426369 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock7: 19207175 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock6: 19207174 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock41: 19207209 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock41: 19207213 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock33: 19207190 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock51: 19207218 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock33: 19207194 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock51: 19207223 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock33: 19207205 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock51: 19207214 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock33: 19207200 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock33: 19207204 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock33: 19207195 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock51: 19207224 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock33: 19207196 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock33: 19207198 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock51: 19207222 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock20: 19207188 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock51: 19207221 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock33: 19207207 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock33: 19207199 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock9: 19207177 false) 
	#(272 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 27201537 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock33: 19207203 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock33: 19207202 false) 
	#(245 3 #reduceActionForexpressionWithoutBlock33: 19207197 false) 
	#(270 3 #reduceActionForstructExprTuple1: 27120641 false) 
	#(365 2 #reduceActionFor_______separator__pathExprSegment_1: 37318657 false) 
	#(366 2 #reduceActionFor_______separator__pathExprSegment__2: 37318658 false) 
	#(367 3 #reduceActionForuseDeclaration1: 37381122 false) 
	#(228 4 #reduceActionForconstParam1: 16818177 false) 
	#(358 2 #reduceActionFor_______separator__simplePathSegment__2: 36876290 false) 
	#(356 2 #reduceActionForlifetimeBounds2: 36855810 false) 
	#(227 4 #reduceActionFortypeParam4: 16679940 false) 
	#(217 7 #reduceActionForinherentImpl6: 15397894 false) 
	#(217 7 #reduceActionForinherentImpl7: 15397895 false) 
	#(337 6 #reduceActionForbareFunctionType6: 35263494 false) 
	#(337 6 #reduceActionForbareFunctionType7: 35263495 false) 
	#(236 3 #reduceActionForexternalItem10: 17357838 false) 
	#(236 3 #reduceActionForassociatedItem6: 17357830 false) 
	#(236 3 #reduceActionForassociatedItem10: 17357834 false) 
	#(217 7 #reduceActionForinherentImpl4: 15397892 false) 
	#(339 2 #reduceActionFor__extern___externToken__abi__abi___2: 35555329 false) 
	#(337 6 #reduceActionForbareFunctionType4: 35263492 false) 
	#(341 3 #reduceActionFormaybeNamedFunctionParameters2: 35743746 false) 
	#(343 2 #reduceActionFor______comma__maybeNamedParam__2: 35794946 false) 
	#(384 2 #reduceActionFor__extern___externToken__abi__abi___2: 39301121 false) 
	#(382 5 #reduceActionFortypePathFn4: 39168004 false) 
	#(243 2 #reduceActionFor__extern___externToken__abi__abi___2: 18951169 false) 
	#(251 4 #reduceActionForblockExpression2: 25730050 false) 
	#(253 2 #reduceActionForinnerAttribute__attr__2: 25847810 false) 
	#(252 2 #reduceActionForinnerAttribute__attr__2: 25831426 false) 
	#(369 5 #reduceActionForgenericArgs3: 37570563 false) 
	#(370 2 #reduceActionFor__extern___externToken__abi__abi___2: 37946369 false) 
	#(148 3 #reduceActionFormacroMatcher1: 8383489 false) 
	#(150 1 #reduceActionFormacroMatch2: 8549378 false) 
	#(149 2 #reduceActionForinnerAttribute__attr__2: 8413186 false) 
	#(150 1 #reduceActionFormacroMatch1: 8549377 false) 
	#(152 1 #reduceActionFortokenTreeToken5: 8837124 false) 
	#(152 1 #reduceActionFortokenTreeToken5: 8837121 false) 
	#(152 1 #liftFirstValue: 8837122 false) 
	#(152 1 #reduceActionFortokenTreeToken5: 8837123 false) 
	#(148 3 #reduceActionFormacroMatcher1: 8383490 false) 
	#(148 3 #reduceActionFormacroMatcher1: 8383491 false) 
	#(143 4 #reduceActionFormacroRulesDef1: 8048641 false) 
	#(144 3 #reduceActionFortypeParamBounds2: 8220674 false) 
	#(146 2 #reduceActionFor_______separator__simplePathSegment__2: 8254466 false) 
	#(156 1 #reduceActionFor__extern___externToken__abi__abi____2: 9323521 false) 
	#(147 3 #reduceActionFormacroRule1: 8313857 false) 
	#(143 4 #reduceActionFormacroRulesDef1: 8048642 false) 
	#(207 7 #reduceActionForstaticItem2: 14685186 false) 
	#(188 7 #reduceActionFortupleStruct4: 13192196 false) 
	#(194 2 #reduceActionFor__extern___externToken__abi__abi___2: 13596673 false) 
	#(192 4 #reduceActionForstructField1: 13440001 false) 
	#(190 2 #reduceActionFor__extern___externToken__abi__abi___2: 13385729 false) 
	#(188 7 #reduceActionFortupleStruct6: 13192198 false) 
	#(188 7 #reduceActionFortupleStruct7: 13192199 false) 
	#(187 7 #reduceActionForstructStruct11: 13031435 false) 
	#(213 7 #reduceActionFortraitAlias2: 15110146 false) 
	#(208 7 #reduceActionFortrait1: 14857217 false) 
	#(213 7 #reduceActionFortraitAlias3: 15110147 false) 
	#(185 7 #reduceActionFortypeAlias6: 12798982 false) 
	#(185 7 #reduceActionFortypeAlias15: 12798991 false) 
	#(185 7 #reduceActionFortypeAlias12: 12798988 false) 
	#(205 7 #reduceActionForunion4: 14368772 false) 
	#(219 7 #reduceActionForexternBlock8: 15860744 false) 
	#(161 7 #reduceActionFormodule6: 10915846 false) 
	#(213 7 #reduceActionFortraitAlias9: 15110153 false) 
	#(166 6 #reduceActionForuseTree6: 11390982 false) 
	#(184 2 #reduceActionFor__extern___externToken__abi__abi___2: 12736513 false) 
	#(170 7 #reduceActionForfunction6: 11658246 false) 
	#(170 7 #reduceActionForfunction5: 11658245 false) 
	#(170 7 #reduceActionForfunction4: 11658244 false) 
	#(170 7 #reduceActionForfunction3: 11658243 false) 
	#(170 7 #reduceActionForfunction10: 11658250 false) 
	#(170 7 #reduceActionForfunction9: 11658249 false) 
	#(180 2 #reduceActionForshorthandSelf2: 12362754 false) 
	#(180 2 #reduceActionForshorthandSelf3: 12362755 false) 
	#(175 3 #reduceActionForfunctionParameters4: 12148740 false) 
	#(177 2 #reduceActionFor______comma__functionParam__2: 12241922 false) 
	#(170 7 #reduceActionForfunction18: 11658258 false) 
	#(170 7 #reduceActionForfunction17: 11658257 false) 
	#(213 8 #reduceActionFortraitAlias6: 15110150 false) 
	#(208 8 #reduceActionFortrait5: 14857221 false) 
	#(213 8 #reduceActionFortraitAlias7: 15110151 false) 
	#(234 4 #reduceActionFortypeBoundWhereClauseItem4: 17197060 false) 
	#(202 3 #reduceActionForenumItemTuple2: 14146562 false) 
	#(203 3 #reduceActionForenumItemTuple2: 14218242 false) 
	#(245 4 #reduceActionForexpressionWithoutBlock67: 19207235 false) 
	#(260 2 #reduceActionFor__extern___externToken__abi__abi___2: 26361857 false) 
	#(245 4 #reduceActionForexpressionWithoutBlock71: 19207239 false) 
	#(259 2 #reduceActionForlifetimeBounds2: 26342402 false) 
	#(261 2 #reduceActionFor_______separator__simplePathSegment__2: 26361858 false) 
	#(256 2 #reduceActionFortypeParamBounds1: 26164225 false) 
	#(245 4 #reduceActionForexpressionWithoutBlock69: 19207237 false) 
	#(307 3 #reduceActionForreferencePattern4: 32638980 false) 
	#(321 3 #reduceActionForgroupedPattern1: 33796097 false) 
	#(320 2 #reduceActionFortuplePatternItems1: 33665025 false) 
	#(318 1 #reduceActionFor______comma__pattern__1: 33540097 false) 
	#(320 2 #reduceActionFortuplePatternItems3: 33665027 false) 
	#(319 3 #reduceActionFortuplePattern2: 33583106 false) 
	#(323 2 #reduceActionForslicePatternItems2: 33954818 false) 
	#(323 2 #reduceActionForslicePatternItems3: 33954819 false) 
	#(322 3 #reduceActionForslicePattern2: 33868802 false) 
	#(301 3 #reduceActionForidentifierPattern7: 31811591 false) 
	#(295 3 #reduceActionForpattern2: 30695426 false) 
	#(307 3 #reduceActionForreferencePattern4: 32638978 false) 
	#(297 2 #reduceActionFor_______separator__simplePathSegment__2: 30746626 false) 
	#(305 3 #reduceActionForobsoleteRangePattern1: 32177153 false) 
	#(304 3 #reduceActionForobsoleteRangePattern1: 32019457 false) 
	#(315 3 #reduceActionFortupleStructPattern1: 33397761 false) 
	#(316 1 #reduceActionForslicePatternItems1: 33509377 false) 
	#(308 3 #reduceActionForstructPattern1: 32748545 false) 
	#(309 1 #reduceActionFor__extern___externToken__abi__abi____2: 32860161 false) 
	#(312 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 33049601 false) 
	#(309 1 #reduceActionForstructPatternElements4: 32860164 false) 
	#(301 3 #reduceActionForidentifierPattern2: 31811586 false) 
	#(290 0 #reduceActionFor_matchArm__arm________arrow__matchArmExpression__1: 30066689 false) 
	#(274 4 #reduceActionForclosureExpression9: 27992073 false) 
	#(274 4 #reduceActionForclosureExpression5: 27992069 false) 
	#(275 3 #reduceActionFortypeParamBounds2: 28214274 false) 
	#(277 2 #reduceActionFor_______separator__simplePathSegment__2: 28263426 false) 
	#(274 4 #reduceActionForclosureExpression2: 27992066 false) 
	#(273 2 #reduceActionFortypeParamBounds1: 27896833 false) 
	#(245 4 #reduceActionForexpressionWithoutBlock10: 19207178 false) 
	#(245 4 #reduceActionForexpressionWithoutBlock11: 19207179 false) 
	#(264 4 #reduceActionForstructExprStruct1: 26596353 false) 
	#(267 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 26791937 false) 
	#(357 2 #reduceActionFor__extern___externToken__abi__abi___2: 36876289 false) 
	#(227 5 #reduceActionFortypeParam6: 16679942 false) 
	#(217 8 #reduceActionForinherentImpl8: 15397896 false) 
	#(337 7 #reduceActionForbareFunctionType8: 35263496 false) 
	#(344 4 #reduceActionFormaybeNamedParam3: 35845123 false) 
	#(344 4 #reduceActionFormaybeNamedParam3: 35845122 false) 
	#(342 2 #reduceActionFor______comma__maybeNamedParam_1: 35794945 false) 
	#(145 2 #reduceActionFor__extern___externToken__abi__abi___2: 8254465 false) 
	#(207 8 #reduceActionForstaticItem4: 14685188 false) 
	#(192 5 #reduceActionForstructField2: 13440002 false) 
	#(188 8 #reduceActionFortupleStruct8: 13192200 false) 
	#(213 8 #reduceActionFortraitAlias4: 15110148 false) 
	#(208 8 #reduceActionFortrait3: 14857219 false) 
	#(185 8 #reduceActionFortypeAlias8: 12798984 false) 
	#(185 8 #reduceActionFortypeAlias14: 12798990 false) 
	#(213 8 #reduceActionFortraitAlias13: 15110157 false) 
	#(213 8 #reduceActionFortraitAlias10: 15110154 false) 
	#(208 8 #reduceActionFortrait9: 14857225 false) 
	#(213 8 #reduceActionFortraitAlias11: 15110155 false) 
	#(166 7 #reduceActionForuseTree9: 11390985 false) 
	#(170 8 #reduceActionForfunction8: 11658248 false) 
	#(170 8 #reduceActionForfunction7: 11658247 false) 
	#(170 8 #reduceActionForfunction14: 11658254 false) 
	#(170 8 #reduceActionForfunction13: 11658253 false) 
	#(170 8 #reduceActionForfunction12: 11658252 false) 
	#(170 8 #reduceActionForfunction11: 11658251 false) 
	#(175 4 #reduceActionForfunctionParameters5: 12148741 false) 
	#(181 3 #reduceActionFortypedSelf1: 12462081 false) 
	#(180 3 #reduceActionForshorthandSelf4: 12362756 false) 
	#(180 3 #reduceActionForshorthandSelf5: 12362757 false) 
	#(183 3 #reduceActionForfunctionParamPattern2: 12650498 false) 
	#(183 3 #reduceActionForfunctionParamPattern1: 12650497 false) 
	#(176 2 #reduceActionFor______comma__functionParam_1: 12241921 false) 
	#(170 8 #reduceActionForfunction22: 11658262 false) 
	#(170 8 #reduceActionForfunction21: 11658261 false) 
	#(170 8 #reduceActionForfunction20: 11658260 false) 
	#(170 8 #reduceActionForfunction19: 11658259 false) 
	#(170 8 #reduceActionForfunction26: 11658266 false) 
	#(170 8 #reduceActionForfunction25: 11658265 false) 
	#(213 9 #reduceActionFortraitAlias8: 15110152 false) 
	#(208 9 #reduceActionFortrait7: 14857223 false) 
	#(256 3 #reduceActionForarrayElements3: 26164227 false) 
	#(256 3 #reduceActionFortypeParamBounds2: 26164226 false) 
	#(258 2 #reduceActionFor_______separator__simplePathSegment__2: 26205186 false) 
	#(317 2 #reduceActionFor______colon__typeParamBounds__2: 33540097 false) 
	#(320 3 #reduceActionFortuplePatternItems4: 33665028 false) 
	#(318 2 #reduceActionFor______comma__pattern__2: 33540098 false) 
	#(323 3 #reduceActionForslicePatternItems4: 33954820 false) 
	#(301 4 #reduceActionForidentifierPattern4: 31811588 false) 
	#(301 4 #reduceActionForidentifierPattern6: 31811590 false) 
	#(283 5 #reduceActionForiteratorLoopExpression1: 29071361 false) 
	#(296 2 #reduceActionFor__extern___externToken__abi__abi___2: 30746625 false) 
	#(316 2 #reduceActionForslicePatternItems2: 33509378 false) 
	#(316 2 #reduceActionForslicePatternItems3: 33509379 false) 
	#(315 4 #reduceActionFortupleStructPattern2: 33397762 false) 
	#(314 2 #reduceActionForstructPatternEtCetera1: 33321985 false) 
	#(313 2 #reduceActionForstructPatternField3: 33097731 false) 
	#(308 4 #reduceActionForstructPattern2: 32748546 false) 
	#(309 2 #reduceActionForstructPatternElements2: 32860162 false) 
	#(310 2 #reduceActionFortypeParamBounds1: 32996353 false) 
	#(285 5 #reduceActionForifExpression2: 29261826 false) 
	#(285 5 #reduceActionForifExpression2: 29261827 false) 
	#(285 5 #reduceActionForifExpression2: 29261828 false) 
	#(287 5 #reduceActionFormatchExpression1: 29910017 false) 
	#(274 5 #reduceActionForclosureExpression11: 27992075 false) 
	#(274 5 #reduceActionForclosureExpression8: 27992072 false) 
	#(274 5 #reduceActionForclosureExpression4: 27992068 false) 
	#(278 4 #reduceActionForclosureParam2: 28322818 false) 
	#(276 2 #reduceActionFor__extern___externToken__abi__abi___2: 28263425 false) 
	#(245 5 #reduceActionForexpressionWithoutBlock4: 19207172 false) 
	#(273 3 #reduceActionFortypeParamBounds2: 27896834 false) 
	#(272 2 #reduceActionFor_______separator__simplePathSegment__2: 27201538 false) 
	#(270 5 #reduceActionForstructExprTuple2: 27120642 false) 
	#(269 2 #reduceActionFor__extern___externToken__abi__abi___2: 27066369 false) 
	#(268 2 #reduceActionForstructExprField1: 26914817 false) 
	#(264 5 #reduceActionForstructExprStruct2: 26596354 false) 
	#(265 2 #reduceActionForstructExprFields2: 26744834 false) 
	#(264 5 #reduceActionForstructExprStruct3: 26596355 false) 
	#(345 5 #reduceActionFormaybeNamedFunctionParametersVariadic1: 35956737 false) 
	#(242 4 #reduceActionForletStatement1: 18787329 false) 
	#(218 9 #reduceActionFortraitImpl1: 15571969 false) 
	#(151 1 #reduceActionForouterAttribute__attr__1: 8752129 false) 
	#(208 9 #reduceActionFortrait2: 14857218 false) 
	#(185 9 #reduceActionFortypeAlias16: 12798992 false) 
	#(213 9 #reduceActionFortraitAlias14: 15110158 false) 
	#(208 9 #reduceActionFortrait13: 14857229 false) 
	#(213 9 #reduceActionFortraitAlias15: 15110159 false) 
	#(213 9 #reduceActionFortraitAlias12: 15110156 false) 
	#(208 9 #reduceActionFortrait11: 14857227 false) 
	#(170 9 #reduceActionForfunction16: 11658256 false) 
	#(170 9 #reduceActionForfunction15: 11658255 false) 
	#(175 5 #reduceActionForfunctionParameters6: 12148742 false) 
	#(181 4 #reduceActionFortypedSelf2: 12462082 false) 
	#(180 4 #reduceActionForshorthandSelf6: 12362758 false) 
	#(170 9 #reduceActionForfunction24: 11658264 false) 
	#(170 9 #reduceActionForfunction23: 11658263 false) 
	#(170 9 #reduceActionForfunction30: 11658270 false) 
	#(170 9 #reduceActionForfunction29: 11658269 false) 
	#(170 9 #reduceActionForfunction28: 11658268 false) 
	#(170 9 #reduceActionForfunction27: 11658267 false) 
	#(208 10 #reduceActionFortrait6: 14857222 false) 
	#(218 10 #reduceActionFortraitImpl2: 15571970 false) 
	#(257 2 #reduceActionFor__extern___externToken__abi__abi___2: 26205185 false) 
	#(301 5 #reduceActionForidentifierPattern8: 31811592 false) 
	#(316 3 #reduceActionForslicePatternItems4: 33509380 false) 
	#(313 3 #reduceActionForstructPatternField4: 33097732 false) 
	#(313 3 #reduceActionForstructPatternField5: 33097733 false) 
	#(309 3 #reduceActionForstructPatternElements3: 32860163 false) 
	#(312 2 #reduceActionFor_______separator__simplePathSegment__2: 33049602 false) 
	#(286 6 #reduceActionForifLetExpression1: 29486081 false) 
	#(286 6 #reduceActionForifLetExpression5: 29486085 false) 
	#(287 6 #reduceActionFormatchExpression2: 29910018 false) 
	#(290 2 #reduceActionFor_matchArm__arm________arrow__matchArmExpression__2: 30066690 false) 
	#(274 6 #reduceActionForclosureExpression10: 27992074 false) 
	#(282 6 #reduceActionForpredicatePatternLoopExpression1: 28910593 false) 
	#(274 6 #reduceActionForclosureExpression6: 27992070 false) 
	#(245 6 #reduceActionForexpressionWithoutBlock5: 19207173 false) 
	#(271 2 #reduceActionFor__extern___externToken__abi__abi___2: 27201537 false) 
	#(270 6 #reduceActionForstructExprTuple3: 27120643 false) 
	#(265 3 #reduceActionForstructExprFields3: 26744835 false) 
	#(267 2 #reduceActionFor_______separator__simplePathSegment__2: 26791938 false) 
	#(218 10 #reduceActionFortraitImpl3: 15571971 false) 
	#(218 10 #reduceActionFortraitImpl5: 15571973 false) 
	#(151 2 #reduceActionForinnerAttribute__attr__2: 8752130 false) 
	#(150 4 #reduceActionFormacroMatch4: 8549380 false) 
	#(153 1 #liftFirstValue: 9027585 false) 
	#(150 4 #reduceActionFormacroMatch4: 8549379 false) 
	#(208 10 #reduceActionFortrait4: 14857220 false) 
	#(213 10 #reduceActionFortraitAlias16: 15110160 false) 
	#(208 10 #reduceActionFortrait15: 14857231 false) 
	#(218 10 #reduceActionFortraitImpl9: 15571977 false) 
	#(208 10 #reduceActionFortrait10: 14857226 false) 
	#(170 10 #reduceActionForfunction32: 11658272 false) 
	#(170 10 #reduceActionForfunction31: 11658271 false) 
	#(208 11 #reduceActionFortrait8: 14857224 false) 
	#(313 4 #reduceActionForstructPatternField6: 33097734 false) 
	#(313 4 #reduceActionForstructPatternField1: 33097729 false) 
	#(313 4 #reduceActionForstructPatternField1: 33097730 false) 
	#(311 2 #reduceActionFor__extern___externToken__abi__abi___2: 33049601 false) 
	#(292 2 #reduceActionFormatchArm1: 30363649 false) 
	#(274 7 #reduceActionForclosureExpression12: 27992076 false) 
	#(268 4 #reduceActionForstructExprField3: 26914819 false) 
	#(268 4 #reduceActionForstructExprField3: 26914818 false) 
	#(266 2 #reduceActionFor__extern___externToken__abi__abi___2: 26791937 false) 
	#(265 4 #reduceActionForstructExprFields1: 26744833 false) 
	#(218 11 #reduceActionFortraitImpl4: 15571972 false) 
	#(218 11 #reduceActionFortraitImpl6: 15571974 false) 
	#(218 11 #reduceActionFortraitImpl7: 15571975 false) 
	#(242 6 #reduceActionForletStatement3: 18787331 false) 
	#(242 6 #reduceActionForletStatement2: 18787330 false) 
	#(154 1 #reduceActionFortokenTreeToken5: 9100292 false) 
	#(150 5 #reduceActionFormacroMatch5: 8549381 false) 
	#(154 1 #reduceActionFortokenTreeToken5: 9100289 false) 
	#(154 1 #liftFirstValue: 9100290 false) 
	#(154 1 #reduceActionFortokenTreeToken5: 9100291 false) 
	#(208 11 #reduceActionFortrait14: 14857230 false) 
	#(218 11 #reduceActionFortraitImpl10: 15571978 false) 
	#(218 11 #reduceActionFortraitImpl11: 15571979 false) 
	#(218 11 #reduceActionFortraitImpl13: 15571981 false) 
	#(208 11 #reduceActionFortrait12: 14857228 false) 
	#(286 8 #reduceActionForifLetExpression2: 29486082 false) 
	#(286 8 #reduceActionForifLetExpression2: 29486083 false) 
	#(286 8 #reduceActionForifLetExpression2: 29486084 false) 
	#(292 3 #reduceActionFormatchArm2: 30363650 false) 
	#(288 4 #reduceActionFormatchArms1: 30051329 false) 
	#(291 1 #reduceActionFor__extern___externToken__abi__abi___1: 30236674 false) 
	#(288 4 #reduceActionFormatchArms1: 30051331 false) 
	#(289 3 #reduceActionFor_matchArm__arm________arrow__matchArmExpression_1: 30066689 false) 
	#(218 12 #reduceActionFortraitImpl8: 15571976 false) 
	#(150 6 #reduceActionFormacroMatch6: 8549382 false) 
	#(208 12 #reduceActionFortrait16: 14857232 false) 
	#(218 12 #reduceActionFortraitImpl12: 15571980 false) 
	#(218 12 #reduceActionFortraitImpl14: 15571982 false) 
	#(218 12 #reduceActionFortraitImpl15: 15571983 false) 
	#(294 2 #reduceActionFormatchArmGuard1: 30518273 false) 
	#(291 2 #reduceActionFor__extern___externToken__abi__abi___2: 30236673 false) 
	#(288 5 #reduceActionFormatchArms2: 30051330 false) 
	#(291 2 #reduceActionFor__extern___externToken__abi__abi___2: 30236675 false) 
	#(288 5 #reduceActionFormatchArms2: 30051332 false) 
	#(242 8 #reduceActionForletStatement4: 18787332 false) 
	#(218 13 #reduceActionFortraitImpl16: 15571984 false) 
	#(294 5 #reduceActionFormatchArmGuard2: 30518274 false)
	).
]

{ #category : #generated }
RustParser class >> scannerClass [
	^RustScanner
]

{ #category : #generated }
RustParser class >> startingStateForcrate [
	^ 1
]

{ #category : #generated }
RustParser class >> symbolNames [
	^ #('"!"' '"!="' '"#"' '"$"' '"$crate"' '"%"' '"%="' '"&"' '"&&"' '"&="' '"''_"' '"''static"' '"("' '")"' '"*"' '"*="' '"+"' '"+="' '","' '"-"' '"-="' '"->"' '"."' '".."' '"..."' '"..="' '"/"' '"/="' '":"' '"::"' '";"' '"<<"' '"<<="' '"<="' '"="' '"=="' '"=>"' '">="' '">>"' '">>="' '">>>"' '"?"' '"@"' '"Self"' '"["' '"]"' '"^"' '"^="' '"_"' '"abstract"' '"as"' '"async"' '"auto"' '"await"' '"become"' '"box"' '"break"' '"const"' '"continue"' '"crate"' '"default"' '"do"' '"dyn"' '"else"' '"enum"' '"extern"' '"false"' '"final"' '"fn"' '"for"' '"if"' '"impl"' '"in"' '"let"' '"loop"' '"macro"' '"macro_rules"' '"match"' '"mod"' '"move"' '"mut"' '"override"' '"priv"' '"pub"' '"ref"' '"return"' '"self"' '"static"' '"struct"' '"super"' '"trait"' '"true"' '"try"' '"type"' '"typeof"' '"union"' '"unsafe"' '"unsized"' '"use"' '"virtual"' '"where"' '"while"' '"yield"' '"{"' '"|"' '"|="' '"||"' '"}"' '<bar>' '<lparen>' '<lbracket>' '<NON_KEYWORD_IDENTIFIER>' '<RAW_IDENTIFIER>' '<comment>' '<SHEBANG>' '<whitespace>' '<CHAR_LITERAL>' '<STRING_LITERAL>' '<rawStringStart>' '<simpleRawString>' '<BYTE_LITERAL>' '<BYTE_STRING_LITERAL>' '<INTEGER_LITERAL>' '<potentialFloat>' '<FLOAT_LITERAL>' '<LIFETIME_OR_LABEL>' '<lt>' '<gt>' '<amp>' 'B e g i n' 'crate' 'innerAttribute ''attr''*' 'item+' 'macroInvocation' 'macroInvocationWithBlock' 'tokenTree*' 'macroInvocationWithoutBlock' 'delimTokenTree' 'tokenTree' 'tokenTreeToken' 'macroInvocationSemi' 'macroRulesDefinition' 'macroRulesDef' 'macroRules' '(";" ''semicolon'' macroRule ''rule'')' '(";" ''semicolon'' macroRule ''rule'')*' 'macroRule' 'macroMatcher' 'macroMatch ''match''*' 'macroMatch' 'macroMatch ''match''+' 'macroMatchToken' 'macroFragSpec' 'macroRepSep' 'macroRepOp' 'macroTranscriber' 'item' 'outerAttribute ''attr''+' 'visItem' 'macroItem' 'module' 'externCrate' 'crateRef' 'asClause' 'useDeclaration' 'useTree' '("," ''comma'' useTree ''use'')' '("," ''comma'' useTree ''use'')*' '"," ''comma''?' 'function' 'functionQualifiers' '("extern" ''externToken'' abi ''abi''?)' '("extern" ''externToken'' abi ''abi''?)?' 'abi' 'functionParameters' '("," ''comma'' functionParam)' '("," ''comma'' functionParam)*' 'selfParam' 'outerAttribute ''attr''*' 'shorthandSelf' 'typedSelf' 'functionParam' 'functionParamPattern' 'functionReturnType' 'typeAlias' 'struct' 'structStruct' 'tupleStruct' 'structFields' '("," ''comma'' structField ''field'')' '("," ''comma'' structField ''field'')*' 'structField' 'tupleFields' '("," ''comma'' tupleField ''field'')' '("," ''comma'' tupleField ''field'')*' 'tupleField' 'enumeration' 'enumItems' '("," ''comma'' enumItem ''item'')' '("," ''comma'' enumItem ''item'')*' 'enumItem' 'enumItemTuple' 'enumItemStruct' 'enumItemDiscriminant' 'union' 'constantItem' 'staticItem' 'trait' 'typeParamBounds?' 'whereClause ''where''?' 'associatedItem ''item''+' 'associatedItem ''item''+?' 'traitAlias' '(":" ''colon'' typeParamBounds?)' '(":" ''colon'' typeParamBounds?)?' 'implementation' 'inherentImpl' 'traitImpl' 'externBlock' 'externalItem ''item''+' 'externalItem' 'genericParams' '(genericParam ''param'' "," ''comma'')' '(genericParam ''param'' "," ''comma'')+' 'genericParam' 'lifetimeParam' 'typeParam' 'constParam' 'whereClause' '(whereClauseItem ''clause'' "," ''comma'')' '(whereClauseItem ''clause'' "," ''comma'')*' 'whereClauseItem' 'lifetimeWhereClauseItem' 'typeBoundWhereClauseItem' 'forLifetimes' 'associatedItem' 'innerAttribute' 'outerAttribute' 'attr' 'attrInput' 'statement' 'letStatement' 'expressionStatement' 'expression' 'expressionWithoutBlock' 'expressionWithBlock' 'literalExpression' 'LiteralFloat' 'LiteralInteger' 'pathExpression' 'blockExpression' 'statements' 'statement ''statement''+' 'asyncBlockExpression' 'unsafeBlockExpression' 'arrayElements' '("," ''separator'' expression ''element'')' '("," ''separator'' expression ''element'')*' 'tupleElements' '(expression ''element'' "," ''comma'')' '(expression ''element'' "," ''comma'')+' 'tupleIndex' 'structExpression' 'structExprStruct' 'structExprFields' '("," ''comma'' structExprField ''field'')' '("," ''comma'' structExprField ''field'')*' 'structExprField' 'structBase' 'structExprTuple' '("," ''comma'' expression ''arg'')' '("," ''comma'' expression ''arg'')*' 'callParams' 'closureExpression' 'closureParameters' '("," ''comma'' closureParam ''parameter'')' '("," ''comma'' closureParam ''parameter'')*' 'closureParam' 'loopExpression' 'infiniteLoopExpression' 'predicateLoopExpression' 'predicatePatternLoopExpression' 'iteratorLoopExpression' 'loopLabel' 'ifExpression' 'ifLetExpression' 'matchExpression' 'matchArms' '(matchArm ''arm'' "=>" ''arrow'' matchArmExpression)' '(matchArm ''arm'' "=>" ''arrow'' matchArmExpression)*' 'matchArmExpression' 'matchArm' 'matchArmPatterns' 'matchArmGuard' 'pattern' '("|" ''bar'' patternNoTopAlt ''pattern'')' '("|" ''bar'' patternNoTopAlt ''pattern'')*' 'patternNoTopAlt' 'patternWithoutRange' 'literalPattern' 'identifierPattern' 'wildcardPattern' 'restPattern' 'rangePattern' 'obsoleteRangePattern' 'rangePatternBound' 'referencePattern' 'structPattern' 'structPatternElements' 'structPatternFields' '("," ''comma'' structPatternField ''field'')' '("," ''comma'' structPatternField ''field'')*' 'structPatternField' 'structPatternEtCetera' 'tupleStructPattern' 'tupleStructItems' '("," ''comma'' pattern)' '("," ''comma'' pattern)+' 'tuplePattern' 'tuplePatternItems' 'groupedPattern' 'slicePattern' 'slicePatternItems' 'pathPattern' 'type' 'typeNoBounds' 'typeNoBoundsWithoutImpl' 'parenthesizedType' 'neverType' 'tupleType' '(type ''type'' "," ''comma'')' '(type ''type'' "," ''comma'')+' 'arrayType' 'sliceType' 'referenceType' 'rawPointerType' 'bareFunctionType' 'functionTypeQualifiers' 'bareFunctionReturnType' 'functionParametersMaybeNamedVariadic' 'maybeNamedFunctionParameters' '("," ''comma'' maybeNamedParam)' '("," ''comma'' maybeNamedParam)*' 'maybeNamedParam' 'maybeNamedFunctionParametersVariadic' 'traitObjectType' 'traitObjectTypeOneBound' 'implTraitType' 'implTraitTypeOneBound' 'inferredType' 'typeParamBounds' '("+" ''plus'' typeParamBound ''typeBound'')' '("+" ''plus'' typeParamBound ''typeBound'')*' 'typeParamBound' 'traitBound' 'lifetimeBounds' '(lifetime ''lifetimeBound'' "+" ''plus'' )' '(lifetime ''lifetimeBound'' "+" ''plus'' )*' 'lifetime' 'simplePath' '("::" ''separator'' simplePathSegment)' '("::" ''separator'' simplePathSegment)+' 'simplePathSegment' 'pathInExpression' '("::" ''separator'' pathExprSegment)' '("::" ''separator'' pathExprSegment)+' 'pathExprSegment' 'pathIdentSegment' 'genericArgs' '("," ''comma'' genericArg ''genericArg'')' '("," ''comma'' genericArg ''genericArg'')*' 'genericArg' 'genericArgsConst' 'genericArgsBinding' 'qualifiedPathInExpression' 'qualifiedPathType' 'qualifiedPathInType' '("::" ''separator'' typePathSegment)' '("::" ''separator'' typePathSegment)+' 'typePath' 'typePathSegment' 'typePathFn' 'typePathInputs' '("," ''comma'' type ''type'')' '("," ''comma'' type ''type'')*' 'visibility' 'identifier' 'keyword' 'macroIdentifierLikeToken' 'macroLiteralToken' 'macroPunctuationToken' '<rawString>' 'E O F' 'error')
]

{ #category : #generated }
RustParser class >> symbolTypes [
	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #RustCrateNode #RustCrateNode #OrderedCollection #OrderedCollection #RustMacroInvocationNode #RustMacroInvocationNode #OrderedCollection #RustMacroInvocationNode #OrderedCollection #Object #RustProgramNode #RustMacroInvocationStatementNode #RustMacroRulesDefinitionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #RustMacroRuleNode #OrderedCollection #OrderedCollection #RustMacroMatchNode #OrderedCollection #RustProgramNode #SmaCCToken #RustProgramNode #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #RustProgramNode #RustProgramNode #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #RustUseTreeNode #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #RustStructFieldNode #OrderedCollection #OrderedCollection #OrderedCollection #RustTupleFieldNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #RustEnumItemNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #RustWhereClauseNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #RustProgramNode #OrderedCollection #OrderedCollection #OrderedCollection #RustGenericParamNode #RustLifetimeParamNode #RustTypeParamNode #RustConstParamNode #RustWhereClauseNode #OrderedCollection #OrderedCollection #RustProgramNode #RustLifetimeWhereClauseItemNode #RustTypeBoundWhereClauseItemNode #OrderedCollection #RustProgramNode #RustAttributeNode #RustAttributeNode #OrderedCollection #OrderedCollection #RustStatementNode #RustLetStatementNode #OrderedCollection #RustExpressionNode #RustExpressionNode #RustExpressionNode #RustLiteralExpressionNode #RustLiteralExpressionNode #RustLiteralExpressionNode #RustPathExpressionNode #RustBlockExpressionNode #OrderedCollection #OrderedCollection #RustAsyncBlockExpressionNode #RustUnsafeBlockExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #RustExpressionNode #RustStructExprStructNode #OrderedCollection #OrderedCollection #OrderedCollection #RustStructExprFieldNode #OrderedCollection #RustStructExprTupleNode #OrderedCollection #OrderedCollection #OrderedCollection #RustClosureExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #RustClosureParamNode #RustExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #RustIfExpressionNode #RustIfLetExpressionNode #RustMatchExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #RustMatchArmNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #RustProgramNode #RustProgramNode #RustExpressionNode #RustIdentifierPatternNode #RustWildcardPatternNode #RustRestPatternNode #RustRangePatternNode #RustRangePatternNode #RustExpressionNode #RustReferencePatternNode #RustStructPatternNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #RustStructPatternFieldNode #RustStructPatternEtCeteraNode #RustTupleStructPatternNode #OrderedCollection #OrderedCollection #OrderedCollection #RustTuplePatternNode #OrderedCollection #RustGroupedPatternNode #RustSlicePatternNode #OrderedCollection #RustPathExpressionNode #RustProgramNode #RustProgramNode #RustProgramNode #RustParenthesizedTypeNode #RustNeverTypeNode #RustTupleTypeNode #OrderedCollection #OrderedCollection #RustArrayTypeNode #RustSliceTypeNode #RustReferenceTypeNode #RustRawPointerTypeNode #RustFunctionTypeNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #RustTraitObjectTypeNode #RustTraitObjectTypeNode #RustImplTraitTypeNode #RustImplTraitTypeNode #RustInferredTypeNode #OrderedCollection #OrderedCollection #OrderedCollection #RustProgramNode #RustTraitBoundNode #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #RustPathNode #OrderedCollection #OrderedCollection #SmaCCToken #RustPathExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #RustGenericArgsNode #OrderedCollection #OrderedCollection #RustProgramNode #RustExpressionNode #RustGenericArgBindingNode #RustPathExpressionNode #OrderedCollection #RustQualifiedPathInTypeNode #OrderedCollection #OrderedCollection #RustTypePathNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #RustVisibilityNode #SmaCCToken #SmaCCToken #SmaCCToken #RustLiteralExpressionNode #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCErrorNode)
]

{ #category : #generated }
RustParser class >> transitionTable [
^#(
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 65 0 6 0 66 0 6 0 69 0 6 0 72 0 6 0 77 0 6 0 79 0 6 0 84 0 6 0 87 0 6 0 88 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 96 0 6 0 97 0 6 0 99 0 6 0 112 0 6 0 113 0 9 0 115 0 13 0 131 0 17 0 132 0 6 1 137] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 65 0 6 0 66 0 6 0 69 0 6 0 72 0 6 0 77 0 6 0 79 0 6 0 84 0 6 0 87 0 6 0 88 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 96 0 6 0 97 0 6 0 99 0 6 0 112 0 6 0 113 0 21 0 132 0 6 1 137] 
#[0 0 0 1 137] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 0 41 0 53 0 45 0 58 0 49 0 60 0 53 0 61 0 57 0 65 0 61 0 66 0 10 0 69 0 65 0 72 0 69 0 77 0 73 0 79 0 77 0 84 1 1 0 87 0 85 0 88 0 89 0 89 1 1 0 90 0 97 0 91 0 101 0 94 0 105 0 96 0 109 0 97 0 113 0 99 1 1 0 112 1 1 0 113 0 125 0 133 0 129 0 135 0 133 0 137 0 157 0 141 0 157 0 142 0 145 0 157 0 149 0 158 0 153 0 159 0 157 0 160 0 161 0 161 0 165 0 162 0 169 0 165 0 173 0 170 0 177 0 171 0 181 0 172 0 185 0 173 0 189 0 185 0 193 0 186 0 197 0 187 0 201 0 188 0 205 0 197 0 209 0 205 0 213 0 206 0 217 0 207 0 221 0 208 0 225 0 213 0 229 0 216 0 233 0 217 0 237 0 218 0 241 0 219 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 1 5 1 130 1 1 1 131 0 14 1 137] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 0 41 0 53 0 45 0 58 0 49 0 60 0 53 0 61 0 57 0 65 0 61 0 66 0 10 0 69 0 65 0 72 0 69 0 77 0 73 0 79 0 77 0 84 1 1 0 87 0 85 0 88 0 89 0 89 1 1 0 90 0 97 0 91 0 101 0 94 0 105 0 96 0 109 0 97 0 113 0 99 1 1 0 112 1 1 0 113 1 13 0 133 0 129 0 135 0 133 0 137 0 157 0 141 0 157 0 142 0 145 0 157 0 149 0 158 0 153 0 159 0 157 0 160 0 161 0 161 0 165 0 162 0 169 0 165 0 173 0 170 0 177 0 171 0 181 0 172 0 185 0 173 0 189 0 185 0 193 0 186 0 197 0 187 0 201 0 188 0 205 0 197 0 209 0 205 0 213 0 206 0 217 0 207 0 221 0 208 0 225 0 213 0 229 0 216 0 233 0 217 0 237 0 218 0 241 0 219 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 1 5 1 130 1 1 1 131 0 18 1 137] 
#[1 1 17 0 1 1 21 0 45] 
#[0 0 22 0 1 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 45 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 1 37 0 5 0 53 0 60 0 77 0 87 0 90 0 112 0 113 1 107 1 131] 
#[1 1 41 0 66 0 10 0 69 1 45 0 97 0 181 0 172 1 49 0 173] 
#[1 0 26 0 1 0 26 0 2 0 26 0 6 0 26 0 7 0 26 0 9 0 26 0 10 0 26 0 13 0 26 0 15 0 26 0 16 0 26 0 17 0 26 0 18 0 26 0 20 0 26 0 21 0 26 0 23 0 26 0 24 0 26 0 26 0 26 0 27 0 26 0 28 0 26 0 30 0 26 0 31 0 26 0 32 0 26 0 33 0 26 0 34 0 26 0 35 0 26 0 36 0 26 0 38 0 26 0 39 0 26 0 40 0 26 0 41 0 26 0 42 0 26 0 47 0 26 0 48 0 26 0 51 1 53 0 91 0 26 0 104 0 26 0 106 0 26 0 107 0 26 0 108 0 26 0 109 0 26 0 110 0 26 0 111 0 26 0 127 0 26 0 128 0 26 0 129] 
#[1 1 57 0 49 1 61 0 52 1 73 0 53 1 41 0 66 0 10 0 69 1 73 0 77 1 65 0 97 1 73 0 112 1 73 0 113 0 181 0 172 1 69 0 173 1 73 1 131] 
#[1 0 7 0 1 0 30 0 2 0 34 0 5 0 30 0 6 0 30 0 7 0 30 0 9 0 30 0 10 0 34 0 11 0 34 0 12 0 7 0 13 0 30 0 14 0 7 0 15 0 30 0 16 0 30 0 17 0 30 0 18 0 30 0 19 0 30 0 20 0 30 0 21 0 30 0 23 0 30 0 24 0 30 0 26 0 30 0 27 0 30 0 28 0 7 0 30 0 30 0 31 0 30 0 32 0 30 0 33 0 30 0 34 0 30 0 35 0 30 0 36 0 30 0 38 0 30 0 39 0 30 0 40 0 30 0 41 0 7 0 42 0 34 0 44 0 34 0 45 0 30 0 47 0 30 0 48 0 34 0 49 0 30 0 51 0 34 0 52 0 34 0 53 0 34 0 58 0 34 0 60 0 34 0 61 0 34 0 63 0 34 0 65 0 34 0 66 0 34 0 69 0 34 0 70 0 34 0 72 0 34 0 77 0 34 0 79 0 34 0 87 0 34 0 88 0 34 0 89 0 34 0 90 0 34 0 91 0 34 0 94 0 34 0 96 0 34 0 97 0 34 0 99 0 30 0 104 0 30 0 106 0 30 0 107 0 30 0 108 0 30 0 109 0 30 0 110 0 30 0 111 0 34 0 112 0 34 0 113 0 34 0 126 0 7 0 127 0 30 0 128 0 7 0 129] 
#[1 1 77 0 52 1 81 0 58 1 41 0 66 0 10 0 69 1 85 0 97 0 181 0 172 1 89 0 173] 
#[0 1 93 0 53 0 77 0 112 0 113 1 131] 
#[1 1 97 0 60 0 38 0 69 1 101 0 104 1 113 0 118 1 113 0 120 1 113 0 174 1 113 1 136] 
#[1 1 121 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 1 161 0 58 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 1 189 0 127 1 193 0 129 1 217 0 134 1 217 0 135 1 217 0 137 1 209 0 222 1 213 0 235 1 217 1 69 1 217 1 71 1 217 1 72 1 217 1 73 1 217 1 74 1 217 1 77 1 217 1 78 1 217 1 79 1 217 1 80 1 217 1 81 2 1 1 82 1 217 1 90 1 217 1 91 1 217 1 92 1 217 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 1 217 1 121 2 53 1 124 2 57 1 125 2 37 1 131] 
#[1 0 11 0 1 0 46 0 2 0 46 0 6 0 46 0 7 0 46 0 9 0 46 0 10 0 46 0 13 0 46 0 15 0 46 0 16 0 46 0 17 0 46 0 18 0 46 0 20 0 46 0 21 0 46 0 23 0 46 0 24 0 46 0 26 0 46 0 27 0 46 0 28 0 46 0 30 0 46 0 31 0 46 0 32 0 46 0 33 0 46 0 34 0 46 0 35 0 46 0 36 0 46 0 38 0 46 0 39 0 46 0 40 0 46 0 41 0 46 0 42 0 46 0 47 0 46 0 48 0 46 0 51 0 46 0 104 0 46 0 106 0 46 0 107 0 46 0 108 0 46 0 109 0 46 0 110 0 46 0 111 0 46 0 127 0 46 0 128 0 46 0 129] 
#[0 2 65 0 53 0 77 0 112 0 113 1 131] 
#[1 0 50 0 1 0 50 0 5 0 50 0 11 0 50 0 12 0 15 0 13 0 50 0 15 0 50 0 30 0 50 0 42 0 50 0 44 0 50 0 45 0 50 0 49 0 50 0 52 0 50 0 53 0 50 0 58 0 50 0 60 0 50 0 61 0 50 0 63 0 50 0 65 0 50 0 66 0 50 0 69 0 50 0 70 0 50 0 72 0 50 0 77 0 50 0 79 0 50 0 87 0 50 0 88 0 50 0 89 0 50 0 90 0 50 0 91 0 50 0 94 0 50 0 96 0 50 0 97 0 50 0 99 0 50 0 112 0 50 0 113 0 50 0 126 0 50 0 127 0 50 0 129] 
#[0 0 54 0 1 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 45 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 2 77 0 53 2 77 0 77 2 73 0 81 2 77 0 112 2 77 0 113 2 77 1 131] 
#[0 2 81 0 53 0 77 0 112 0 113 1 131] 
#[0 0 58 0 1 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 45 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 2 85 0 53 0 77 0 112 0 113 1 131] 
#[0 2 89 0 53 0 77 0 112 0 113 1 131] 
#[0 2 93 0 53 0 77 0 112 0 113 1 131] 
#[1 2 97 0 53 2 101 0 66 0 10 0 69 2 105 0 72 2 109 0 79 2 113 0 91 0 181 0 172 2 117 0 173] 
#[1 1 1 0 5 2 121 0 15 2 125 0 30 1 1 0 53 1 1 0 60 1 1 0 77 1 1 0 87 1 1 0 90 2 129 0 104 1 1 0 112 1 1 0 113 2 133 0 166 2 137 1 104 1 1 1 107 1 1 1 131] 
#[0 0 62 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 0 66 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[1 2 141 0 3 1 1 0 5 0 33 0 30 0 37 0 52 0 41 0 53 0 45 0 58 0 49 0 60 0 53 0 61 0 57 0 65 0 61 0 66 0 10 0 69 0 65 0 72 0 69 0 77 0 73 0 79 0 77 0 84 1 1 0 87 0 85 0 88 0 89 0 89 1 1 0 90 0 97 0 91 0 101 0 94 0 105 0 96 0 109 0 97 0 113 0 99 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 0 157 0 141 0 157 0 142 2 145 0 157 0 149 0 158 0 153 0 159 0 157 0 160 0 161 0 161 0 165 0 162 0 169 0 165 0 173 0 170 0 177 0 171 0 181 0 172 0 185 0 173 0 189 0 185 0 193 0 186 0 197 0 187 0 201 0 188 0 205 0 197 0 209 0 205 0 213 0 206 0 217 0 207 0 221 0 208 0 225 0 213 0 229 0 216 0 233 0 217 0 237 0 218 0 241 0 219 0 249 0 238 0 253 1 104 1 1 1 107 1 5 1 130 1 1 1 131 0 70 1 137] 
#[0 0 74 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 2 149 0 31] 
#[0 0 78 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 0 82 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 0 86 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 65 0 66 0 69 0 72 0 77 0 79 0 84 0 87 0 88 0 89 0 90 0 91 0 94 0 96 0 97 0 99 0 108 0 112 0 113 1 137] 
#[1 2 141 0 3 1 1 0 5 0 33 0 30 0 37 0 52 0 41 0 53 0 45 0 58 0 49 0 60 0 53 0 61 0 57 0 65 0 61 0 66 0 10 0 69 0 65 0 72 0 69 0 77 0 73 0 79 0 77 0 84 1 1 0 87 0 85 0 88 0 89 0 89 1 1 0 90 0 97 0 91 0 101 0 94 0 105 0 96 0 109 0 97 0 113 0 99 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 2 157 0 141 2 157 0 142 2 153 0 159 2 157 0 160 0 161 0 161 0 165 0 162 0 169 0 165 0 173 0 170 0 177 0 171 0 181 0 172 0 185 0 173 0 189 0 185 0 193 0 186 0 197 0 187 0 201 0 188 0 205 0 197 0 209 0 205 0 213 0 206 0 217 0 207 0 221 0 208 0 225 0 213 0 229 0 216 0 233 0 217 0 237 0 218 0 241 0 219 2 161 0 238 0 253 1 104 1 1 1 107 1 5 1 130 1 1 1 131] 
#[0 0 90 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 0 94 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 0 98 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 0 102 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 0 106 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 0 110 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 2 165 0 69] 
#[0 0 114 0 69] 
#[0 0 118 0 69] 
#[0 0 122 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 0 126 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 0 130 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 0 134 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 0 138 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 0 142 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 0 146 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 0 150 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 0 154 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 0 158 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 0 162 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 0 166 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 0 170 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 0 174 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 0 178 0 1 0 3 0 5 0 8 0 9 0 13 0 14 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 46 0 49 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 129 1 136 1 137] 
#[0 0 182 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 65 0 66 0 69 0 72 0 77 0 79 0 84 0 87 0 88 0 89 0 90 0 91 0 94 0 96 0 97 0 99 0 112 0 113] 
#[0 2 169 0 1] 
#[1 0 186 0 1 0 186 0 13 0 186 0 14 0 186 0 19 0 19 0 30 0 186 0 31 0 186 0 35 0 186 0 45 0 186 0 46 0 186 0 51 0 186 0 104 0 186 0 108 2 177 1 105 2 181 1 106] 
#[1 0 37 0 52 2 185 0 53 0 45 0 58 0 53 0 61 0 57 0 65 0 61 0 66 0 10 0 69 0 65 0 72 0 73 0 79 0 85 0 88 0 89 0 89 0 97 0 91 0 101 0 94 0 105 0 96 0 109 0 97 0 113 0 99 2 189 0 161 2 193 0 162 2 197 0 165 2 201 0 170 0 177 0 171 0 181 0 172 0 185 0 173 2 205 0 185 2 209 0 186 0 197 0 187 0 201 0 188 2 213 0 197 2 217 0 205 2 221 0 206 2 225 0 207 2 229 0 208 2 233 0 213 2 237 0 216 0 233 0 217 0 237 0 218 2 241 0 219] 
#[0 0 190 0 1 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 45 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 2 141 0 3 1 1 0 5 0 33 0 30 0 37 0 52 0 41 0 53 0 45 0 58 0 49 0 60 0 53 0 61 0 57 0 65 0 61 0 66 0 10 0 69 0 65 0 72 0 69 0 77 0 73 0 79 0 77 0 84 1 1 0 87 0 85 0 88 0 89 0 89 1 1 0 90 0 97 0 91 0 101 0 94 0 105 0 96 0 109 0 97 0 113 0 99 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 0 157 0 141 0 157 0 142 2 145 0 157 0 149 0 158 0 153 0 159 0 157 0 160 0 161 0 161 0 165 0 162 0 169 0 165 0 173 0 170 0 177 0 171 0 181 0 172 0 185 0 173 0 189 0 185 0 193 0 186 0 197 0 187 0 201 0 188 0 205 0 197 0 209 0 205 0 213 0 206 0 217 0 207 0 221 0 208 0 225 0 213 0 229 0 216 0 233 0 217 0 237 0 218 0 241 0 219 0 249 0 238 0 253 1 104 1 1 1 107 1 5 1 130 1 1 1 131 0 194 1 137] 
#[0 2 245 0 45] 
#[1 1 1 0 5 0 33 0 30 1 1 0 53 1 1 0 60 1 1 0 77 1 1 0 87 1 1 0 90 1 1 0 112 1 1 0 113 2 249 0 239 2 253 1 104 1 1 1 107 1 1 1 131] 
#[0 0 26 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 0 30 0 1 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 45 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 0 46 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[1 0 198 0 1 0 198 0 13 0 198 0 14 0 198 0 19 0 23 0 30 0 198 0 31 0 198 0 35 0 198 0 45 0 198 0 46 0 198 0 51 0 198 0 104 0 198 0 108 2 177 1 105 3 1 1 106] 
#[1 0 38 0 69 3 5 0 118 3 5 0 120 3 5 0 174 3 5 1 136] 
#[1 1 41 0 66 0 10 0 69 0 181 0 172 3 9 0 173] 
#[0 0 202 0 69] 
#[0 3 13 0 53 0 77 0 112 0 113 1 131] 
#[0 3 17 0 29] 
#[1 1 41 0 66 0 10 0 69 3 21 0 97 0 181 0 172 3 25 0 173] 
#[1 1 41 0 66 0 10 0 69 0 181 0 172 3 29 0 173] 
#[0 0 206 0 69] 
#[0 3 33 0 29] 
#[1 1 41 0 66 0 10 0 69 3 37 0 97 0 181 0 172 3 41 0 173] 
#[1 3 45 0 52 1 41 0 66 0 10 0 69 3 49 0 97 0 181 0 172 3 53 0 173] 
#[1 1 41 0 66 0 10 0 69 0 181 0 172 3 57 0 173] 
#[0 0 210 0 69] 
#[1 3 61 0 101 3 65 0 104 3 69 0 127 3 73 0 222 3 77 0 229] 
#[0 3 85 0 53 0 77 0 87 0 112 0 113 0 163 1 131] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 88 0 6 0 90 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 3 93 0 132] 
#[0 0 214 0 69 0 104] 
#[0 0 218 0 69 0 104] 
#[1 0 222 0 69 3 97 0 104] 
#[0 0 226 0 69 0 104] 
#[1 2 41 0 5 3 101 0 30 2 41 0 44 2 41 0 53 2 41 0 60 2 41 0 77 2 41 0 87 2 41 0 90 0 230 0 101 0 230 0 104 2 41 0 112 2 41 0 113 2 41 1 107 2 41 1 112 3 109 1 124 2 57 1 125 2 41 1 131] 
#[0 0 234 0 1 0 2 0 5 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 53 0 60 0 63 0 64 0 66 0 69 0 70 0 72 0 77 0 81 0 87 0 90 0 97 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 127 0 128 0 129] 
#[0 0 238 0 1 0 2 0 5 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 53 0 60 0 63 0 64 0 66 0 69 0 70 0 72 0 77 0 81 0 87 0 90 0 97 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 127 0 128 0 129] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 3 117 0 14 1 137 0 15 1 141 0 30 3 121 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 3 133 0 134 3 133 0 135 3 133 0 137 3 129 0 235 3 133 1 69 3 133 1 71 3 133 1 72 3 133 1 73 3 133 1 74 3 137 1 75 3 141 1 76 3 133 1 77 3 133 1 78 3 133 1 79 3 133 1 80 3 133 1 81 2 1 1 82 3 133 1 90 3 133 1 91 3 133 1 92 3 133 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 3 133 1 121 3 145 1 124 2 57 1 125 2 37 1 131] 
#[1 3 149 0 58 3 153 0 81] 
#[1 3 157 0 5 2 41 0 44 3 157 0 53 3 157 0 60 3 157 0 77 3 157 0 87 3 157 0 90 3 157 0 112 3 157 0 113 3 157 1 107 2 41 1 112 3 161 1 125 3 157 1 131] 
#[1 2 41 0 5 3 101 0 30 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 3 165 0 235 2 41 1 107 2 41 1 112 3 169 1 124 2 57 1 125 2 41 1 131] 
#[0 0 242 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 3 173 0 134 3 173 0 135 3 173 0 137 1 213 0 235 3 173 1 69 3 173 1 71 3 173 1 72 3 173 1 73 3 173 1 74 3 173 1 77 3 173 1 78 3 173 1 79 3 173 1 80 3 173 1 81 2 1 1 82 3 173 1 90 3 173 1 91 3 173 1 92 3 173 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 3 173 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 0 246 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 3 181 0 1 2 41 0 5 3 101 0 30 2 41 0 44 2 41 0 53 2 41 0 60 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 2 41 1 107 2 41 1 112 3 185 1 124 2 57 1 125 2 41 1 131] 
#[1 2 41 0 5 2 33 0 11 2 33 0 12 3 189 0 13 3 101 0 30 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 2 33 0 126 3 193 0 235 3 197 1 95 2 25 1 98 3 201 1 99 2 33 1 103 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[1 0 250 0 69 3 209 0 118 3 209 0 120 3 209 0 174 3 209 1 136] 
#[1 3 69 0 127 3 213 0 222] 
#[1 2 41 0 5 2 33 0 11 2 33 0 12 3 189 0 13 3 101 0 30 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 2 33 0 126 3 193 0 235 3 217 1 95 2 25 1 98 2 25 1 99 2 33 1 103 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[1 3 225 0 66 0 254 0 69] 
#[0 1 2 0 1 0 2 0 5 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 53 0 60 0 63 0 64 0 66 0 69 0 70 0 72 0 77 0 81 0 87 0 90 0 97 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 127 0 128 0 129] 
#[1 3 113 0 1 1 6 0 3 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 0 27 0 53 1 6 0 58 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 0 31 0 77 2 37 0 87 2 37 0 90 1 181 0 97 0 35 0 112 0 39 0 113 0 43 0 126 3 125 0 127 3 229 0 128 1 193 0 129 3 249 0 134 3 249 0 135 3 249 0 137 3 233 0 179 3 237 0 223 3 241 0 224 3 245 0 225 1 213 0 235 3 249 1 69 3 249 1 71 3 249 1 72 3 249 1 73 3 249 1 74 3 249 1 77 3 249 1 78 3 249 1 79 3 249 1 80 3 249 1 81 2 1 1 82 3 249 1 90 3 249 1 91 3 249 1 92 3 249 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 3 249 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 3 113 0 1 2 37 0 5 4 25 0 11 4 25 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 3 253 0 63 1 169 0 66 0 42 0 69 1 173 0 70 4 1 0 72 2 37 0 77 4 5 0 81 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 4 25 0 126 3 125 0 127 1 193 0 129 4 9 0 134 4 9 0 135 4 9 0 137 1 213 0 235 4 9 1 70 4 9 1 71 4 9 1 72 4 9 1 73 4 9 1 74 4 9 1 77 4 9 1 78 4 9 1 79 4 9 1 80 4 9 1 81 2 1 1 82 4 9 1 91 4 9 1 93 4 9 1 94 4 21 1 99 4 25 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 4 9 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 1 10 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 1 14 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 1 18 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 4 29 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 4 33 0 58 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 4 37 0 134 4 37 0 135 4 37 0 137 1 213 0 235 4 37 1 69 4 37 1 71 4 37 1 72 4 37 1 73 4 37 1 74 4 37 1 77 4 37 1 78 4 37 1 79 4 37 1 80 4 37 1 81 2 1 1 82 4 37 1 90 4 37 1 91 4 37 1 92 4 37 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 4 37 1 121 4 41 1 124 2 57 1 125 2 37 1 131] 
#[1 2 41 0 5 3 101 0 30 2 41 0 44 2 41 0 53 2 41 0 60 1 169 0 66 0 42 0 69 2 41 0 77 2 41 0 87 2 41 0 90 1 181 0 97 2 41 0 112 2 41 0 113 4 45 1 82 2 41 1 107 2 41 1 112 4 49 1 124 2 57 1 125 2 41 1 131] 
#[1 3 61 0 101 4 53 0 104 4 57 0 229] 
#[0 1 22 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 1 26 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 1 30 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 1 34 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 1 38 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 1 42 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 1 46 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 1 50 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 1 54 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 4 61 0 69] 
#[0 1 58 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 1 62 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 1 66 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 1 70 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 1 74 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 1 78 0 2 1 78 0 6 1 78 0 7 1 78 0 9 1 78 0 10 1 78 0 14 1 78 0 15 1 78 0 16 1 78 0 17 1 78 0 18 1 78 0 19 1 78 0 20 1 78 0 21 1 78 0 23 1 78 0 24 1 78 0 26 1 78 0 27 1 78 0 28 1 78 0 29 1 78 0 30 1 78 0 31 1 78 0 32 1 78 0 33 1 78 0 34 1 78 0 35 1 78 0 36 1 78 0 37 1 78 0 38 1 78 0 39 1 78 0 40 1 78 0 41 1 78 0 42 1 78 0 46 1 78 0 47 1 78 0 48 1 78 0 51 1 78 0 64 1 78 0 70 1 78 0 101 1 78 0 104 1 78 0 105 1 78 0 106 1 78 0 107 1 78 0 108 1 78 0 109 1 78 0 110 1 78 0 111 1 78 0 127 1 78 0 128 1 78 0 129 4 65 1 97] 
#[0 0 47 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 1 90 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 0 186 0 1 1 94 0 2 1 94 0 6 1 94 0 7 1 94 0 9 1 94 0 10 1 94 0 13 1 94 0 14 1 94 0 15 1 94 0 16 1 94 0 17 1 94 0 18 1 94 0 19 1 94 0 20 1 94 0 21 1 94 0 23 1 94 0 24 1 94 0 25 1 94 0 26 1 94 0 27 1 94 0 28 1 94 0 29 0 51 0 30 1 94 0 31 1 94 0 32 1 94 0 33 1 94 0 34 1 94 0 35 1 94 0 36 1 94 0 37 1 94 0 38 1 94 0 39 1 94 0 40 1 94 0 41 1 94 0 42 1 94 0 46 1 94 0 47 1 94 0 48 1 94 0 51 1 94 0 64 1 94 0 70 1 94 0 71 1 94 0 73 1 94 0 101 1 94 0 104 1 94 0 105 1 94 0 106 1 94 0 107 1 94 0 108 1 94 0 109 1 94 0 110 1 94 0 111 1 94 0 127 1 94 0 128 1 94 0 129 2 177 1 105 2 181 1 106] 
#[1 1 98 0 2 1 98 0 6 1 98 0 7 1 98 0 9 1 98 0 10 4 69 0 13 1 98 0 14 1 98 0 15 1 98 0 16 1 98 0 17 1 98 0 18 1 98 0 19 1 98 0 20 1 98 0 21 1 98 0 23 1 98 0 24 1 98 0 26 1 98 0 27 1 98 0 28 1 98 0 29 0 55 0 30 1 98 0 31 1 98 0 32 1 98 0 33 1 98 0 34 1 98 0 35 1 98 0 36 1 98 0 37 1 98 0 38 1 98 0 39 1 98 0 40 1 98 0 41 1 98 0 42 1 98 0 46 1 98 0 47 1 98 0 48 1 98 0 51 1 98 0 64 1 98 0 70 1 98 0 101 1 98 0 104 1 98 0 105 1 98 0 106 1 98 0 107 1 98 0 108 1 98 0 109 1 98 0 110 1 98 0 111 4 77 0 127 1 98 0 128 1 98 0 129 4 81 1 113 4 85 1 126] 
#[1 4 89 0 30 4 93 1 122 4 97 1 123] 
#[0 1 102 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 1 106 0 17 4 101 0 70 0 59 0 101 0 59 0 104] 
#[1 1 114 0 2 1 114 0 6 1 114 0 7 1 114 0 9 1 114 0 10 1 114 0 14 1 114 0 15 1 114 0 16 1 114 0 17 1 114 0 18 1 114 0 19 1 114 0 20 1 114 0 21 1 114 0 23 1 114 0 24 1 114 0 26 1 114 0 27 1 114 0 28 1 114 0 29 0 63 0 30 1 114 0 31 1 114 0 32 1 114 0 33 1 114 0 34 1 114 0 35 1 114 0 36 1 114 0 37 1 114 0 38 1 114 0 39 1 114 0 40 1 114 0 41 1 114 0 42 1 114 0 46 1 114 0 47 1 114 0 48 1 114 0 51 1 114 0 64 1 114 0 70 1 114 0 101 1 114 0 104 1 114 0 105 1 114 0 106 1 114 0 107 1 114 0 108 1 114 0 109 1 114 0 110 1 114 0 111 1 114 0 127 1 114 0 128 1 114 0 129 4 93 1 122 4 105 1 123] 
#[0 4 109 0 53 0 77 0 112 0 113 1 131] 
#[1 4 113 0 31 4 117 0 104] 
#[1 4 121 0 60 4 125 0 73 4 129 0 87 4 133 0 90] 
#[0 4 137 0 53 0 77 0 112 0 113 1 131] 
#[0 4 141 0 29] 
#[1 4 145 0 13 4 149 0 31 3 61 0 101 4 153 0 104 3 69 0 127 4 157 0 222 4 161 0 229] 
#[1 4 165 0 29 4 169 0 35 3 61 0 101 1 118 0 104 3 69 0 127 4 173 0 210 4 177 0 222 4 173 0 229] 
#[1 4 185 0 29 4 189 0 31 4 193 0 35 3 61 0 101 3 69 0 127 4 197 0 222 4 201 0 229] 
#[1 3 61 0 101 4 205 0 104 3 69 0 127 4 209 0 222 4 213 0 229] 
#[0 4 217 0 91] 
#[1 0 38 0 69 4 221 0 104 4 225 0 118 4 225 0 120 4 225 0 174 4 225 1 136] 
#[1 4 229 0 1 2 41 0 5 3 101 0 30 2 41 0 44 2 41 0 53 4 233 0 58 2 41 0 60 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 3 69 0 127 4 237 0 222 2 41 1 107 2 41 1 112 4 241 1 124 2 57 1 125 2 41 1 131] 
#[0 4 245 0 53 0 77 0 112 0 113 1 131] 
#[0 4 249 0 53 0 77 0 112 0 113 1 131] 
#[0 1 122 0 69] 
#[0 1 126 0 19 0 31 0 108] 
#[1 1 37 0 5 4 253 0 15 1 37 0 53 1 37 0 60 1 37 0 77 1 37 0 87 1 37 0 90 5 1 0 104 1 37 0 112 1 37 0 113 1 37 1 107 1 37 1 131] 
#[1 1 1 0 5 2 121 0 15 2 125 0 30 1 1 0 53 1 1 0 60 1 1 0 77 1 1 0 87 1 1 0 90 2 129 0 104 5 5 0 108 1 1 0 112 1 1 0 113 5 9 0 166 2 137 1 104 1 1 1 107 1 1 1 131] 
#[0 5 13 0 31] 
#[1 1 130 0 19 5 17 0 30 1 130 0 31 5 21 0 51 1 130 0 108] 
#[0 1 21 0 45] 
#[0 1 134 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 65 0 66 0 69 0 72 0 77 0 79 0 84 0 87 0 88 0 89 0 90 0 91 0 94 0 96 0 97 0 99 0 108 0 112 0 113 1 137] 
#[0 1 138 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 1 142 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 1 146 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 1 150 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 65 0 66 0 69 0 72 0 77 0 79 0 84 0 87 0 88 0 89 0 90 0 91 0 94 0 96 0 97 0 99 0 112 0 113] 
#[0 5 25 0 53 0 77 0 112 0 113 1 131] 
#[1 5 29 0 13 5 33 0 45 5 37 0 104] 
#[0 5 41 0 5 0 53 0 60 0 77 0 87 0 90 0 112 0 113 1 107 1 131] 
#[0 1 154 0 1 0 13 0 14 0 19 0 30 0 31 0 35 0 45 0 46 0 51 0 104 0 108] 
#[1 1 158 0 1 1 158 0 13 1 158 0 14 1 158 0 19 0 67 0 30 1 158 0 31 1 158 0 35 1 158 0 45 1 158 0 46 1 158 0 51 1 158 0 104 1 158 0 108 5 45 1 105] 
#[0 1 53 0 91] 
#[0 1 162 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 1 166 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 1 170 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 1 174 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 1 178 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 1 182 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 1 186 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 1 190 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 1 194 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 1 198 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 1 202 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 1 206 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 1 210 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 1 214 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 1 1 0 5 0 33 0 30 1 1 0 53 1 1 0 60 1 1 0 77 1 1 0 87 1 1 0 90 1 1 0 112 1 1 0 113 5 49 0 239 2 253 1 104 1 1 1 107 1 1 1 131] 
#[0 5 53 0 46] 
#[1 5 57 0 13 5 61 0 35 5 65 0 45 1 218 0 46 5 69 0 104 5 73 0 138 5 77 0 240] 
#[1 1 222 0 1 1 222 0 13 1 222 0 14 1 222 0 19 0 71 0 30 1 222 0 31 1 222 0 35 1 222 0 45 1 222 0 46 1 222 0 51 1 222 0 104 1 222 0 108 5 45 1 105] 
#[0 0 222 0 69] 
#[0 1 226 0 69] 
#[1 5 81 0 29 5 85 0 35 3 61 0 101 1 118 0 104 3 69 0 127 5 89 0 210 5 93 0 222 5 89 0 229] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 5 97 0 134 5 97 0 135 5 97 0 137 1 213 0 235 5 97 1 69 5 97 1 71 5 97 1 72 5 97 1 73 5 97 1 74 5 97 1 77 5 97 1 78 5 97 1 79 5 97 1 80 5 97 1 81 2 1 1 82 5 97 1 90 5 97 1 91 5 97 1 92 5 97 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 5 97 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 1 41 0 66 0 10 0 69 0 181 0 172 5 101 0 173] 
#[0 1 230 0 69] 
#[0 1 234 0 69] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 5 105 0 134 5 105 0 135 5 105 0 137 1 213 0 235 5 105 1 69 5 105 1 71 5 105 1 72 5 105 1 73 5 105 1 74 5 105 1 77 5 105 1 78 5 105 1 79 5 105 1 80 5 105 1 81 2 1 1 82 5 105 1 90 5 105 1 91 5 105 1 92 5 105 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 5 105 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 1 41 0 66 0 10 0 69 0 181 0 172 5 109 0 173] 
#[0 1 238 0 69] 
#[1 1 41 0 66 0 10 0 69 5 113 0 97 0 181 0 172 5 117 0 173] 
#[1 1 41 0 66 0 10 0 69 0 181 0 172 5 121 0 173] 
#[0 1 242 0 69] 
#[0 1 246 0 69] 
#[1 1 250 0 1 1 250 0 5 1 250 0 11 1 250 0 12 1 250 0 13 1 250 0 15 1 250 0 30 1 250 0 31 1 250 0 35 1 250 0 42 1 250 0 44 1 250 0 45 1 250 0 49 1 250 0 53 1 250 0 60 1 250 0 63 1 250 0 66 1 250 0 69 1 250 0 70 1 250 0 72 1 250 0 77 1 250 0 87 1 250 0 90 1 250 0 97 1 250 0 104 1 250 0 112 1 250 0 113 1 250 0 126 1 250 0 127 1 250 0 129 5 125 0 231] 
#[1 1 6 0 3 1 6 0 53 1 6 0 60 1 6 0 77 1 6 0 84 5 129 0 108 1 6 0 112 1 6 0 113 5 133 0 179 5 137 0 198 5 141 0 201] 
#[1 1 6 0 3 1 6 0 53 1 6 0 58 1 6 0 77 1 6 0 112 1 6 0 113 1 6 0 126 3 229 0 128 3 233 0 179 3 237 0 223 3 241 0 224 3 245 0 225] 
#[1 3 61 0 101 5 145 0 104 5 149 0 229] 
#[0 5 153 0 104] 
#[0 1 254 0 31 0 51] 
#[1 5 157 0 31 5 161 0 51 5 165 0 164] 
#[0 2 2 0 31 0 51] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 5 169 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 0 85 0 88 1 1 0 90 5 173 0 97 5 177 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 5 181 0 141 5 185 0 158 5 189 0 170 0 177 0 171 0 181 0 172 0 185 0 173 5 193 0 207 5 197 0 220 5 201 0 221 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 5 205 1 130 1 1 1 131] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 88 0 6 0 90 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 5 209 0 132] 
#[1 2 41 0 5 2 41 0 44 2 41 0 53 2 41 0 60 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 2 41 1 107 2 41 1 112 3 161 1 125 2 41 1 131] 
#[0 1 94 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 5 213 0 70] 
#[0 0 230 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 2 6 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 2 41 0 5 3 101 0 30 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 5 217 0 235 2 41 1 107 2 41 1 112 5 221 1 124 2 57 1 125 2 41 1 131] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 3 249 0 134 3 249 0 135 3 249 0 137 1 213 0 235 3 249 1 69 3 249 1 71 3 249 1 72 3 249 1 73 3 249 1 74 3 249 1 77 3 249 1 78 3 249 1 79 3 249 1 80 3 249 1 81 2 1 1 82 3 249 1 90 3 249 1 91 3 249 1 92 3 249 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 3 249 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 2 41 0 5 3 101 0 30 2 41 0 44 2 41 0 53 2 41 0 60 1 169 0 66 0 42 0 69 2 41 0 77 2 41 0 87 2 41 0 90 1 181 0 97 2 41 0 112 2 41 0 113 4 45 1 82 2 41 1 107 2 41 1 112 5 225 1 124 2 57 1 125 2 41 1 131] 
#[1 5 229 0 14 5 233 0 19] 
#[0 2 10 0 1 0 5 0 11 0 12 0 13 0 14 0 15 0 30 0 42 0 44 0 45 0 49 0 53 0 60 0 63 0 66 0 69 0 70 0 72 0 77 0 87 0 90 0 97 0 112 0 113 0 126 0 127 0 129] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 5 237 0 14 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 5 241 0 134 5 241 0 135 5 241 0 137 1 213 0 235 5 241 1 69 5 241 1 71 5 241 1 72 5 241 1 73 5 241 1 74 5 245 1 75 5 241 1 77 5 241 1 78 5 241 1 79 5 241 1 80 5 241 1 81 2 1 1 82 5 241 1 90 5 241 1 91 5 241 1 92 5 241 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 5 241 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 0 75 0 14 1 106 0 17 0 59 0 19] 
#[1 3 113 0 1 2 37 0 5 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 3 253 0 63 1 169 0 66 0 42 0 69 1 173 0 70 4 1 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 3 125 0 127 1 193 0 129 5 253 0 134 5 253 0 135 5 253 0 137 1 213 0 235 5 253 1 70 5 253 1 71 5 253 1 72 5 253 1 73 5 253 1 74 5 253 1 77 5 253 1 78 5 253 1 79 5 253 1 80 5 253 1 81 2 1 1 82 5 253 1 91 5 253 1 93 5 253 1 94 4 21 1 99 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 5 253 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 3 113 0 1 2 37 0 5 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 3 253 0 63 1 169 0 66 0 42 0 69 1 173 0 70 4 1 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 3 125 0 127 1 193 0 129 6 1 0 134 6 1 0 135 6 1 0 137 1 213 0 235 6 1 1 70 6 1 1 71 6 1 1 72 6 1 1 73 6 1 1 74 6 1 1 77 6 1 1 78 6 1 1 79 6 1 1 80 6 1 1 81 2 1 1 82 6 1 1 91 6 1 1 93 6 1 1 94 4 21 1 99 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 6 1 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 0 198 0 1 1 94 0 2 1 94 0 6 1 94 0 7 1 94 0 9 1 94 0 10 1 94 0 13 1 94 0 14 1 94 0 15 1 94 0 16 1 94 0 17 1 94 0 18 1 94 0 19 1 94 0 20 1 94 0 21 1 94 0 23 1 94 0 24 1 94 0 25 1 94 0 26 1 94 0 27 1 94 0 28 1 94 0 29 0 51 0 30 1 94 0 31 1 94 0 32 1 94 0 33 1 94 0 34 1 94 0 35 1 94 0 36 1 94 0 37 1 94 0 38 1 94 0 39 1 94 0 40 1 94 0 41 1 94 0 42 1 94 0 46 1 94 0 47 1 94 0 48 1 94 0 51 1 94 0 64 1 94 0 70 1 94 0 71 1 94 0 73 1 94 0 101 1 94 0 104 1 94 0 105 1 94 0 106 1 94 0 107 1 94 0 108 1 94 0 109 1 94 0 110 1 94 0 111 1 94 0 127 1 94 0 128 1 94 0 129 2 177 1 105 3 1 1 106] 
#[1 2 14 0 2 2 14 0 6 2 14 0 7 2 14 0 9 2 14 0 10 2 14 0 14 2 14 0 15 2 14 0 16 2 14 0 17 2 14 0 18 2 14 0 19 2 14 0 20 2 14 0 21 2 14 0 23 2 14 0 24 2 14 0 26 2 14 0 27 2 14 0 28 2 14 0 29 0 79 0 30 2 14 0 31 2 14 0 32 2 14 0 33 2 14 0 34 2 14 0 35 2 14 0 36 2 14 0 37 2 14 0 38 2 14 0 39 2 14 0 40 2 14 0 41 2 14 0 42 2 14 0 46 2 14 0 47 2 14 0 48 2 14 0 51 2 14 0 64 2 14 0 70 2 14 0 101 2 14 0 104 2 14 0 105 2 14 0 106 2 14 0 107 2 14 0 108 2 14 0 109 2 14 0 110 2 14 0 111 2 14 0 127 2 14 0 128 2 14 0 129 4 93 1 122 6 5 1 123] 
#[1 2 41 0 5 3 101 0 30 2 41 0 44 2 41 0 53 2 41 0 60 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 2 41 1 107 2 41 1 112 6 9 1 124 2 57 1 125 2 41 1 131] 
#[0 2 18 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 6 13 0 31 6 17 0 46] 
#[0 0 59 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 2 41 0 5 3 101 0 30 2 41 0 44 2 41 0 53 2 41 0 60 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 2 41 1 107 2 41 1 112 6 21 1 124 2 57 1 125 2 41 1 131] 
#[0 6 25 0 70] 
#[1 2 41 0 5 3 101 0 30 6 29 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 6 33 0 235 2 41 1 107 2 41 1 112 6 37 1 124 2 57 1 125 2 41 1 131] 
#[1 2 41 0 5 3 101 0 30 2 41 0 44 2 41 0 53 2 41 0 60 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 2 41 1 107 2 41 1 112 4 49 1 124 2 57 1 125 2 41 1 131] 
#[0 2 22 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 0 83 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 1 106 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 2 30 0 69] 
#[0 2 34 0 1 0 5 0 11 0 12 0 13 0 15 0 30 0 42 0 44 0 45 0 49 0 53 0 60 0 63 0 66 0 69 0 70 0 72 0 77 0 87 0 90 0 97 0 112 0 113 0 126 0 127 0 129] 
#[0 2 38 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 1 86 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 2 42 0 69 6 41 0 118 6 41 0 120 6 41 0 174 6 41 1 136] 
#[0 2 46 0 1 0 5 0 11 0 12 0 13 0 15 0 29 0 30 0 31 0 35 0 42 0 44 0 45 0 49 0 53 0 58 0 60 0 63 0 66 0 69 0 70 0 72 0 77 0 87 0 90 0 97 0 101 0 104 0 112 0 113 0 126 0 127 0 129] 
#[1 2 141 0 3 6 69 0 53 6 45 0 58 6 69 0 77 6 69 0 112 6 69 0 113 6 49 0 126 6 53 0 226 6 57 0 227 6 61 0 228 6 65 0 238 6 69 1 131] 
#[0 2 50 0 3 0 53 0 58 0 77 0 112 0 113 0 126] 
#[1 1 6 0 3 1 6 0 53 1 6 0 58 1 6 0 77 1 6 0 112 1 6 0 113 1 6 0 126 3 233 0 179 6 73 0 223 6 77 0 225] 
#[1 6 81 0 19 6 85 0 128] 
#[1 6 89 0 51 6 93 0 128] 
#[1 2 41 0 5 3 189 0 13 3 101 0 30 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 3 193 0 235 6 97 1 99 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[1 2 41 0 5 3 189 0 13 3 101 0 30 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 3 193 0 235 6 101 1 99 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[1 3 113 0 1 2 37 0 5 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 3 253 0 63 1 169 0 66 0 42 0 69 1 173 0 70 4 1 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 3 125 0 127 1 193 0 129 6 105 0 134 6 105 0 135 6 105 0 137 1 213 0 235 6 105 1 70 6 105 1 71 6 105 1 72 6 105 1 73 6 105 1 74 6 105 1 77 6 105 1 78 6 105 1 79 6 105 1 80 6 105 1 81 2 1 1 82 6 105 1 91 6 105 1 93 6 105 1 94 4 21 1 99 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 6 105 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 2 54 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 2 58 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 2 62 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 1 82 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 3 113 0 1 2 37 0 5 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 3 253 0 63 1 169 0 66 0 42 0 69 1 173 0 70 4 1 0 72 2 37 0 77 6 109 0 81 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 3 125 0 127 1 193 0 129 6 113 0 134 6 113 0 135 6 113 0 137 1 213 0 235 6 113 1 70 6 113 1 71 6 113 1 72 6 113 1 73 6 113 1 74 6 113 1 77 6 113 1 78 6 113 1 79 6 113 1 80 6 113 1 81 2 1 1 82 6 113 1 91 6 113 1 93 6 113 1 94 4 21 1 99 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 6 113 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 2 41 0 5 3 101 0 30 2 41 0 44 2 41 0 53 2 41 0 60 2 41 0 77 2 41 0 87 2 41 0 90 0 230 0 101 0 230 0 104 2 41 0 112 2 41 0 113 2 41 1 107 2 41 1 112 6 117 1 124 2 57 1 125 2 41 1 131] 
#[1 6 121 0 1 2 41 0 5 3 101 0 30 2 41 0 44 2 41 0 53 2 41 0 60 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 2 41 1 107 2 41 1 112 6 125 1 124 2 57 1 125 2 41 1 131] 
#[1 3 61 0 101 6 129 0 104 6 133 0 229] 
#[1 1 106 0 17 6 137 0 70 0 59 0 101 0 59 0 104] 
#[0 6 141 0 69] 
#[0 2 66 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 6 145 0 132] 
#[0 6 149 0 104] 
#[0 6 153 0 13] 
#[1 2 70 0 2 2 70 0 6 2 70 0 7 2 70 0 9 2 70 0 10 2 70 0 14 2 70 0 15 2 70 0 16 6 157 0 17 2 70 0 18 2 70 0 19 2 70 0 20 2 70 0 21 2 70 0 23 2 70 0 24 2 70 0 26 2 70 0 27 2 70 0 28 2 70 0 29 2 70 0 30 2 70 0 31 2 70 0 32 2 70 0 33 2 70 0 34 2 70 0 35 2 70 0 36 2 70 0 37 2 70 0 38 2 70 0 39 2 70 0 40 2 70 0 41 2 70 0 42 2 70 0 46 2 70 0 47 2 70 0 48 2 70 0 51 2 70 0 64 2 70 0 70 2 70 0 101 2 70 0 104 2 70 0 105 2 70 0 106 2 70 0 107 2 70 0 108 2 70 0 109 2 70 0 110 2 70 0 111 2 70 0 127 2 70 0 128 2 70 0 129 6 161 1 96] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 6 165 0 14 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 6 169 0 134 6 169 0 135 6 169 0 137 1 213 0 235 6 169 1 69 6 169 1 71 6 169 1 72 6 169 1 73 6 169 1 74 6 169 1 77 6 169 1 78 6 169 1 79 6 169 1 80 6 169 1 81 2 1 1 82 6 169 1 90 6 169 1 91 6 169 1 92 6 169 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 6 169 1 121 3 177 1 124 2 57 1 125 6 173 1 127 2 37 1 131] 
#[1 2 74 0 2 2 74 0 6 2 74 0 7 2 74 0 9 2 74 0 10 4 69 0 13 2 74 0 14 2 74 0 15 2 74 0 16 2 74 0 17 2 74 0 18 2 74 0 19 2 74 0 20 2 74 0 21 2 74 0 23 2 74 0 24 2 74 0 26 2 74 0 27 2 74 0 28 2 74 0 29 2 74 0 30 2 74 0 31 2 74 0 32 2 74 0 33 2 74 0 34 2 74 0 35 2 74 0 36 2 74 0 37 2 74 0 38 2 74 0 39 2 74 0 40 2 74 0 41 2 74 0 42 2 74 0 46 2 74 0 47 2 74 0 48 2 74 0 51 2 74 0 64 2 74 0 70 2 74 0 101 2 74 0 104 2 74 0 105 2 74 0 106 2 74 0 107 2 74 0 108 2 74 0 109 2 74 0 110 2 74 0 111 4 77 0 127 2 74 0 128 2 74 0 129 6 177 1 113 6 181 1 126] 
#[1 3 113 0 1 7 1 0 5 6 253 0 11 6 253 0 12 1 133 0 13 1 137 0 15 6 185 0 20 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 7 17 0 53 7 1 0 60 1 165 0 63 1 169 0 66 6 189 0 67 0 42 0 69 1 173 0 70 1 177 0 72 7 17 0 77 7 1 0 87 7 1 0 90 6 193 0 92 1 181 0 97 6 197 0 104 7 17 0 112 7 17 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 6 253 0 126 3 125 0 127 6 229 0 128 1 193 0 129 7 5 0 134 7 5 0 135 7 5 0 137 1 213 0 235 7 5 0 247 7 5 0 248 7 5 0 249 7 5 0 251 7 5 1 69 7 5 1 71 7 5 1 72 7 5 1 73 7 5 1 74 7 5 1 77 7 5 1 78 7 5 1 79 7 5 1 80 7 5 1 81 2 1 1 82 7 5 1 90 7 5 1 91 7 5 1 92 7 5 1 94 2 21 1 95 2 25 1 98 2 29 1 99 6 253 1 103 0 253 1 104 7 1 1 107 2 41 1 112 7 5 1 116 7 5 1 117 7 5 1 118 2 45 1 120 7 5 1 121 3 177 1 124 2 57 1 125 7 17 1 131 7 21 1 136] 
#[0 2 78 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 2 82 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 2 41 0 5 2 41 0 44 2 41 0 53 2 41 0 60 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 2 41 1 107 2 41 1 112 7 25 1 125 2 41 1 131] 
#[0 2 86 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 2 90 0 2 2 90 0 6 2 90 0 7 2 90 0 9 2 90 0 10 2 90 0 14 2 90 0 15 2 90 0 16 2 90 0 17 2 90 0 18 2 90 0 19 2 90 0 20 2 90 0 21 2 90 0 23 2 90 0 24 2 90 0 26 2 90 0 27 2 90 0 28 2 90 0 29 0 87 0 30 2 90 0 31 2 90 0 32 2 90 0 33 2 90 0 34 2 90 0 35 2 90 0 36 2 90 0 37 2 90 0 38 2 90 0 39 2 90 0 40 2 90 0 41 2 90 0 42 2 90 0 46 2 90 0 47 2 90 0 48 2 90 0 51 2 90 0 64 2 90 0 70 2 90 0 101 2 90 0 104 2 90 0 105 2 90 0 106 2 90 0 107 2 90 0 108 2 90 0 109 2 90 0 110 2 90 0 111 2 90 0 127 2 90 0 128 2 90 0 129 7 29 1 122] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 7 33 0 134 7 33 0 135 7 33 0 137 1 213 0 235 7 33 1 69 7 33 1 71 7 33 1 72 7 33 1 73 7 33 1 74 7 33 1 77 7 33 1 78 7 33 1 79 7 33 1 80 7 33 1 81 2 1 1 82 7 33 1 90 7 33 1 91 7 33 1 92 7 33 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 7 33 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 2 94 0 2 2 94 0 6 2 94 0 7 2 94 0 9 2 94 0 10 2 94 0 14 2 94 0 15 2 94 0 16 2 94 0 17 2 94 0 18 2 94 0 19 2 94 0 20 2 94 0 21 2 94 0 23 2 94 0 24 2 94 0 26 2 94 0 27 2 94 0 28 2 94 0 29 0 91 0 30 2 94 0 31 2 94 0 32 2 94 0 33 2 94 0 34 2 94 0 35 2 94 0 36 2 94 0 37 2 94 0 38 2 94 0 39 2 94 0 40 2 94 0 41 2 94 0 42 2 94 0 46 2 94 0 47 2 94 0 48 2 94 0 51 2 94 0 64 2 94 0 70 2 94 0 101 2 94 0 104 2 94 0 105 2 94 0 106 2 94 0 107 2 94 0 108 2 94 0 109 2 94 0 110 2 94 0 111 2 94 0 127 2 94 0 128 2 94 0 129 7 29 1 122] 
#[1 7 37 0 13 7 41 0 45 7 45 0 104 7 49 0 143] 
#[0 2 98 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 65 0 6 0 66 0 6 0 69 0 6 0 72 0 6 0 77 0 6 0 79 0 6 0 84 0 6 0 87 0 6 0 88 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 96 0 6 0 97 0 6 0 99 0 6 0 108 0 6 0 112 0 6 0 113 7 53 0 132] 
#[0 7 57 0 14] 
#[1 1 1 0 5 0 33 0 30 1 1 0 53 1 1 0 60 1 1 0 77 1 1 0 87 1 1 0 90 1 1 0 112 1 1 0 113 7 61 1 104 1 1 1 107 1 1 1 131] 
#[0 7 65 0 14] 
#[0 7 69 0 14] 
#[0 7 73 0 29] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 7 77 0 134 7 77 0 135 7 77 0 137 1 213 0 235 7 77 1 69 7 77 1 71 7 77 1 72 7 77 1 73 7 77 1 74 7 77 1 77 7 77 1 78 7 77 1 79 7 77 1 80 7 77 1 81 2 1 1 82 7 77 1 90 7 77 1 91 7 77 1 92 7 77 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 7 77 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 1 6 0 1 1 6 0 3 1 6 0 5 1 6 0 11 1 6 0 12 1 6 0 13 7 81 0 14 1 6 0 15 1 6 0 30 1 6 0 42 1 6 0 44 1 6 0 45 1 6 0 49 1 6 0 53 1 6 0 60 1 6 0 63 1 6 0 66 1 6 0 69 1 6 0 70 1 6 0 72 1 6 0 77 1 6 0 84 1 6 0 87 1 6 0 90 1 6 0 97 1 6 0 112 1 6 0 113 1 6 0 126 1 6 0 127 1 6 0 129 7 85 0 179 7 89 0 193 7 93 0 196] 
#[0 2 102 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 1 6 0 3 1 6 0 53 1 6 0 60 1 6 0 77 1 6 0 84 7 97 0 108 1 6 0 112 1 6 0 113 7 101 0 179 7 105 0 189 7 109 0 192] 
#[1 7 113 0 13 7 117 0 31 3 61 0 101 7 121 0 104 7 125 0 229] 
#[1 7 129 0 31 7 133 0 104] 
#[1 2 41 0 5 2 33 0 11 2 33 0 12 3 189 0 13 3 101 0 30 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 106 0 101 2 106 0 104 2 41 0 112 2 41 0 113 2 33 0 126 7 137 0 209 3 193 0 235 7 141 1 95 2 25 1 98 2 25 1 99 2 33 1 103 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[1 2 41 0 5 2 33 0 11 2 33 0 12 3 189 0 13 7 145 0 29 3 101 0 30 2 110 0 31 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 110 0 101 2 41 0 112 2 41 0 113 2 33 0 126 7 149 0 214 7 153 0 215 3 193 0 235 7 157 1 95 2 25 1 98 2 25 1 99 2 33 1 103 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[0 7 161 0 104] 
#[1 7 165 0 29 7 169 0 35 3 61 0 101 1 118 0 104 7 173 0 210 7 173 0 229] 
#[0 2 114 0 31 0 104] 
#[1 2 41 0 5 2 33 0 11 2 33 0 12 3 189 0 13 3 101 0 30 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 2 33 0 126 3 193 0 235 7 177 1 95 2 25 1 98 2 25 1 99 2 33 1 103 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[0 2 118 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 7 181 0 134 7 181 0 135 7 181 0 137 1 213 0 235 7 181 1 69 7 181 1 71 7 181 1 72 7 181 1 73 7 181 1 74 7 181 1 77 7 181 1 78 7 181 1 79 7 181 1 80 7 181 1 81 2 1 1 82 7 181 1 90 7 181 1 91 7 181 1 92 7 181 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 7 181 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 7 185 0 29 7 189 0 31 7 193 0 35 3 61 0 101 7 197 0 229] 
#[1 7 201 0 31 7 205 0 35] 
#[1 1 6 0 3 1 6 0 53 1 6 0 60 1 6 0 77 1 6 0 84 1 6 0 112 1 6 0 113 7 101 0 179 7 209 0 189 7 109 0 192] 
#[1 3 61 0 101 7 213 0 104 7 217 0 229] 
#[0 7 221 0 104] 
#[0 7 225 0 53 0 77 0 112 0 113 1 131] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 88 0 6 0 90 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 7 229 0 132] 
#[1 0 222 0 69 7 233 0 104] 
#[1 2 41 0 5 3 101 0 30 2 41 0 44 2 41 0 53 2 41 0 60 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 2 41 1 107 2 41 1 112 7 237 1 124 2 57 1 125 2 41 1 131] 
#[1 7 241 0 1 2 41 0 5 3 101 0 30 2 41 0 44 2 41 0 53 2 41 0 60 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 2 41 1 107 2 41 1 112 7 245 1 124 2 57 1 125 2 41 1 131] 
#[1 7 249 0 1 2 41 0 5 3 101 0 30 2 41 0 44 2 41 0 53 7 253 0 58 2 41 0 60 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 2 41 1 107 2 41 1 112 8 1 1 124 2 57 1 125 2 41 1 131] 
#[0 8 5 0 70] 
#[1 8 9 0 31 8 13 0 104] 
#[1 8 17 0 29 8 21 0 35 3 61 0 101 1 118 0 104 3 69 0 127 8 25 0 210 8 29 0 222 8 25 0 229] 
#[0 2 122 0 19 0 31 0 108] 
#[1 1 1 0 5 2 121 0 15 2 125 0 30 1 1 0 53 1 1 0 60 1 1 0 77 1 1 0 87 1 1 0 90 2 129 0 104 8 33 0 108 1 1 0 112 1 1 0 113 8 37 0 166 2 137 1 104 1 1 1 107 1 1 1 131] 
#[0 2 126 0 19 0 31 0 108] 
#[1 2 130 0 19 2 130 0 108 8 41 0 168] 
#[0 2 134 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 8 45 0 15 8 49 0 104] 
#[1 8 53 0 49 8 57 0 53 8 57 0 77 8 57 0 112 8 57 0 113 8 57 1 131] 
#[1 8 61 0 13 3 69 0 127 8 65 0 222] 
#[1 2 138 0 1 2 138 0 2 2 138 0 3 2 138 0 4 2 138 0 5 2 138 0 6 2 138 0 7 2 138 0 9 2 138 0 10 2 138 0 11 2 138 0 12 2 138 0 13 2 138 0 14 2 138 0 15 2 138 0 16 2 138 0 17 2 138 0 18 2 138 0 19 2 138 0 20 2 138 0 21 2 138 0 22 2 138 0 23 2 138 0 24 2 138 0 25 2 138 0 26 2 138 0 27 2 138 0 28 2 138 0 29 2 138 0 30 2 138 0 31 2 138 0 32 2 138 0 33 2 138 0 34 2 138 0 35 2 138 0 36 2 138 0 37 2 138 0 38 2 138 0 39 2 138 0 40 2 138 0 41 2 138 0 42 2 138 0 43 2 138 0 44 2 138 0 45 2 138 0 47 2 138 0 48 2 138 0 49 2 138 0 50 2 138 0 51 2 138 0 52 2 138 0 53 2 138 0 54 2 138 0 55 2 138 0 56 2 138 0 57 2 138 0 58 2 138 0 59 2 138 0 60 2 138 0 62 2 138 0 63 2 138 0 64 2 138 0 65 2 138 0 66 2 138 0 67 2 138 0 68 2 138 0 69 2 138 0 70 2 138 0 71 2 138 0 72 2 138 0 73 2 138 0 74 2 138 0 75 2 138 0 76 2 138 0 77 2 138 0 78 2 138 0 79 2 138 0 80 2 138 0 81 2 138 0 82 2 138 0 83 2 138 0 84 2 138 0 85 2 138 0 86 2 138 0 87 2 138 0 88 2 138 0 89 2 138 0 90 2 138 0 91 2 138 0 92 2 138 0 93 2 138 0 94 2 138 0 95 2 138 0 96 2 138 0 97 2 138 0 98 2 138 0 99 2 138 0 100 2 138 0 101 2 138 0 102 2 138 0 103 2 138 0 104 2 138 0 105 2 138 0 106 2 138 0 107 2 138 0 112 2 138 0 113 2 138 0 117 2 138 0 118 2 138 0 120 2 138 0 121 2 138 0 122 2 138 0 123 2 138 0 125 2 138 0 126 2 138 0 127 2 138 0 128 2 138 0 129 8 69 0 136 2 138 1 136] 
#[1 2 138 0 1 2 138 0 2 2 138 0 3 2 138 0 4 2 138 0 5 2 138 0 6 2 138 0 7 2 138 0 9 2 138 0 10 2 138 0 11 2 138 0 12 2 138 0 13 2 138 0 15 2 138 0 16 2 138 0 17 2 138 0 18 2 138 0 19 2 138 0 20 2 138 0 21 2 138 0 22 2 138 0 23 2 138 0 24 2 138 0 25 2 138 0 26 2 138 0 27 2 138 0 28 2 138 0 29 2 138 0 30 2 138 0 31 2 138 0 32 2 138 0 33 2 138 0 34 2 138 0 35 2 138 0 36 2 138 0 37 2 138 0 38 2 138 0 39 2 138 0 40 2 138 0 41 2 138 0 42 2 138 0 43 2 138 0 44 2 138 0 45 2 138 0 46 2 138 0 47 2 138 0 48 2 138 0 49 2 138 0 50 2 138 0 51 2 138 0 52 2 138 0 53 2 138 0 54 2 138 0 55 2 138 0 56 2 138 0 57 2 138 0 58 2 138 0 59 2 138 0 60 2 138 0 62 2 138 0 63 2 138 0 64 2 138 0 65 2 138 0 66 2 138 0 67 2 138 0 68 2 138 0 69 2 138 0 70 2 138 0 71 2 138 0 72 2 138 0 73 2 138 0 74 2 138 0 75 2 138 0 76 2 138 0 77 2 138 0 78 2 138 0 79 2 138 0 80 2 138 0 81 2 138 0 82 2 138 0 83 2 138 0 84 2 138 0 85 2 138 0 86 2 138 0 87 2 138 0 88 2 138 0 89 2 138 0 90 2 138 0 91 2 138 0 92 2 138 0 93 2 138 0 94 2 138 0 95 2 138 0 96 2 138 0 97 2 138 0 98 2 138 0 99 2 138 0 100 2 138 0 101 2 138 0 102 2 138 0 103 2 138 0 104 2 138 0 105 2 138 0 106 2 138 0 107 2 138 0 112 2 138 0 113 2 138 0 117 2 138 0 118 2 138 0 120 2 138 0 121 2 138 0 122 2 138 0 123 2 138 0 125 2 138 0 126 2 138 0 127 2 138 0 128 2 138 0 129 8 73 0 136 2 138 1 136] 
#[1 2 138 0 1 2 138 0 2 2 138 0 3 2 138 0 4 2 138 0 5 2 138 0 6 2 138 0 7 2 138 0 9 2 138 0 10 2 138 0 11 2 138 0 12 2 138 0 13 2 138 0 15 2 138 0 16 2 138 0 17 2 138 0 18 2 138 0 19 2 138 0 20 2 138 0 21 2 138 0 22 2 138 0 23 2 138 0 24 2 138 0 25 2 138 0 26 2 138 0 27 2 138 0 28 2 138 0 29 2 138 0 30 2 138 0 31 2 138 0 32 2 138 0 33 2 138 0 34 2 138 0 35 2 138 0 36 2 138 0 37 2 138 0 38 2 138 0 39 2 138 0 40 2 138 0 41 2 138 0 42 2 138 0 43 2 138 0 44 2 138 0 45 2 138 0 47 2 138 0 48 2 138 0 49 2 138 0 50 2 138 0 51 2 138 0 52 2 138 0 53 2 138 0 54 2 138 0 55 2 138 0 56 2 138 0 57 2 138 0 58 2 138 0 59 2 138 0 60 2 138 0 62 2 138 0 63 2 138 0 64 2 138 0 65 2 138 0 66 2 138 0 67 2 138 0 68 2 138 0 69 2 138 0 70 2 138 0 71 2 138 0 72 2 138 0 73 2 138 0 74 2 138 0 75 2 138 0 76 2 138 0 77 2 138 0 78 2 138 0 79 2 138 0 80 2 138 0 81 2 138 0 82 2 138 0 83 2 138 0 84 2 138 0 85 2 138 0 86 2 138 0 87 2 138 0 88 2 138 0 89 2 138 0 90 2 138 0 91 2 138 0 92 2 138 0 93 2 138 0 94 2 138 0 95 2 138 0 96 2 138 0 97 2 138 0 98 2 138 0 99 2 138 0 100 2 138 0 101 2 138 0 102 2 138 0 103 2 138 0 104 2 138 0 105 2 138 0 106 2 138 0 107 2 138 0 108 2 138 0 112 2 138 0 113 2 138 0 117 2 138 0 118 2 138 0 120 2 138 0 121 2 138 0 122 2 138 0 123 2 138 0 125 2 138 0 126 2 138 0 127 2 138 0 128 2 138 0 129 8 77 0 136 2 138 1 136] 
#[0 2 142 0 1 0 13 0 14 0 19 0 30 0 31 0 35 0 45 0 46 0 51 0 104 0 108] 
#[0 2 146 0 1 0 13 0 14 0 19 0 30 0 31 0 35 0 45 0 46 0 51 0 104 0 108] 
#[0 8 81 0 46] 
#[0 2 150 0 1 0 3 0 5 0 8 0 9 0 11 0 12 0 13 0 15 0 20 0 24 0 25 0 26 0 30 0 42 0 44 0 45 0 49 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 63 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 129 1 136] 
#[1 2 138 0 1 2 138 0 2 2 138 0 3 2 138 0 4 2 138 0 5 2 138 0 6 2 138 0 7 2 138 0 9 2 138 0 10 2 138 0 11 2 138 0 12 2 138 0 13 2 138 0 14 2 138 0 15 2 138 0 16 2 138 0 17 2 138 0 18 2 138 0 19 2 138 0 20 2 138 0 21 2 138 0 22 2 138 0 23 2 138 0 24 2 138 0 25 2 138 0 26 2 138 0 27 2 138 0 28 2 138 0 29 2 138 0 30 2 138 0 31 2 138 0 32 2 138 0 33 2 138 0 34 2 138 0 35 2 138 0 36 2 138 0 37 2 138 0 38 2 138 0 39 2 138 0 40 2 138 0 41 2 138 0 42 2 138 0 43 2 138 0 44 2 138 0 45 2 138 0 47 2 138 0 48 2 138 0 49 2 138 0 50 2 138 0 51 2 138 0 52 2 138 0 53 2 138 0 54 2 138 0 55 2 138 0 56 2 138 0 57 2 138 0 58 2 138 0 59 2 138 0 60 2 138 0 62 2 138 0 63 2 138 0 64 2 138 0 65 2 138 0 66 2 138 0 67 2 138 0 68 2 138 0 69 2 138 0 70 2 138 0 71 2 138 0 72 2 138 0 73 2 138 0 74 2 138 0 75 2 138 0 76 2 138 0 77 2 138 0 78 2 138 0 79 2 138 0 80 2 138 0 81 2 138 0 82 2 138 0 83 2 138 0 84 2 138 0 85 2 138 0 86 2 138 0 87 2 138 0 88 2 138 0 89 2 138 0 90 2 138 0 91 2 138 0 92 2 138 0 93 2 138 0 94 2 138 0 95 2 138 0 96 2 138 0 97 2 138 0 98 2 138 0 99 2 138 0 100 2 138 0 101 2 138 0 102 2 138 0 103 2 138 0 104 2 138 0 105 2 138 0 106 2 138 0 107 2 138 0 112 2 138 0 113 2 138 0 117 2 138 0 118 2 138 0 120 2 138 0 121 2 138 0 122 2 138 0 123 2 138 0 125 2 138 0 126 2 138 0 127 2 138 0 128 2 138 0 129 8 85 0 136 2 138 1 136] 
#[1 6 189 0 67 6 193 0 92 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 8 89 0 247 8 89 0 248 8 89 0 249 7 21 1 136] 
#[1 2 138 0 1 2 138 0 2 2 138 0 3 2 138 0 4 2 138 0 5 2 138 0 6 2 138 0 7 2 138 0 9 2 138 0 10 2 138 0 11 2 138 0 12 2 138 0 13 2 138 0 15 2 138 0 16 2 138 0 17 2 138 0 18 2 138 0 19 2 138 0 20 2 138 0 21 2 138 0 22 2 138 0 23 2 138 0 24 2 138 0 25 2 138 0 26 2 138 0 27 2 138 0 28 2 138 0 29 2 138 0 30 2 138 0 31 2 138 0 32 2 138 0 33 2 138 0 34 2 138 0 35 2 138 0 36 2 138 0 37 2 138 0 38 2 138 0 39 2 138 0 40 2 138 0 41 2 138 0 42 2 138 0 43 2 138 0 44 2 138 0 45 2 138 0 46 2 138 0 47 2 138 0 48 2 138 0 49 2 138 0 50 2 138 0 51 2 138 0 52 2 138 0 53 2 138 0 54 2 138 0 55 2 138 0 56 2 138 0 57 2 138 0 58 2 138 0 59 2 138 0 60 2 138 0 62 2 138 0 63 2 138 0 64 2 138 0 65 2 138 0 66 2 138 0 67 2 138 0 68 2 138 0 69 2 138 0 70 2 138 0 71 2 138 0 72 2 138 0 73 2 138 0 74 2 138 0 75 2 138 0 76 2 138 0 77 2 138 0 78 2 138 0 79 2 138 0 80 2 138 0 81 2 138 0 82 2 138 0 83 2 138 0 84 2 138 0 85 2 138 0 86 2 138 0 87 2 138 0 88 2 138 0 89 2 138 0 90 2 138 0 91 2 138 0 92 2 138 0 93 2 138 0 94 2 138 0 95 2 138 0 96 2 138 0 97 2 138 0 98 2 138 0 99 2 138 0 100 2 138 0 101 2 138 0 102 2 138 0 103 2 138 0 104 2 138 0 105 2 138 0 106 2 138 0 107 2 138 0 112 2 138 0 113 2 138 0 117 2 138 0 118 2 138 0 120 2 138 0 121 2 138 0 122 2 138 0 123 2 138 0 125 2 138 0 126 2 138 0 127 2 138 0 128 2 138 0 129 8 93 0 136 2 138 1 136] 
#[1 2 138 0 1 2 138 0 2 2 138 0 3 2 138 0 4 2 138 0 5 2 138 0 6 2 138 0 7 2 138 0 9 2 138 0 10 2 138 0 11 2 138 0 12 2 138 0 13 2 138 0 15 2 138 0 16 2 138 0 17 2 138 0 18 2 138 0 19 2 138 0 20 2 138 0 21 2 138 0 22 2 138 0 23 2 138 0 24 2 138 0 25 2 138 0 26 2 138 0 27 2 138 0 28 2 138 0 29 2 138 0 30 2 138 0 31 2 138 0 32 2 138 0 33 2 138 0 34 2 138 0 35 2 138 0 36 2 138 0 37 2 138 0 38 2 138 0 39 2 138 0 40 2 138 0 41 2 138 0 42 2 138 0 43 2 138 0 44 2 138 0 45 2 138 0 47 2 138 0 48 2 138 0 49 2 138 0 50 2 138 0 51 2 138 0 52 2 138 0 53 2 138 0 54 2 138 0 55 2 138 0 56 2 138 0 57 2 138 0 58 2 138 0 59 2 138 0 60 2 138 0 62 2 138 0 63 2 138 0 64 2 138 0 65 2 138 0 66 2 138 0 67 2 138 0 68 2 138 0 69 2 138 0 70 2 138 0 71 2 138 0 72 2 138 0 73 2 138 0 74 2 138 0 75 2 138 0 76 2 138 0 77 2 138 0 78 2 138 0 79 2 138 0 80 2 138 0 81 2 138 0 82 2 138 0 83 2 138 0 84 2 138 0 85 2 138 0 86 2 138 0 87 2 138 0 88 2 138 0 89 2 138 0 90 2 138 0 91 2 138 0 92 2 138 0 93 2 138 0 94 2 138 0 95 2 138 0 96 2 138 0 97 2 138 0 98 2 138 0 99 2 138 0 100 2 138 0 101 2 138 0 102 2 138 0 103 2 138 0 104 2 138 0 105 2 138 0 106 2 138 0 107 2 138 0 108 2 138 0 112 2 138 0 113 2 138 0 117 2 138 0 118 2 138 0 120 2 138 0 121 2 138 0 122 2 138 0 123 2 138 0 125 2 138 0 126 2 138 0 127 2 138 0 128 2 138 0 129 8 97 0 136 2 138 1 136] 
#[0 2 154 0 46] 
#[0 2 158 0 46] 
#[1 2 41 0 5 2 33 0 11 2 33 0 12 3 189 0 13 3 101 0 30 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 106 0 101 2 106 0 104 2 41 0 112 2 41 0 113 2 33 0 126 8 101 0 209 3 193 0 235 7 141 1 95 2 25 1 98 2 25 1 99 2 33 1 103 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[1 2 41 0 5 2 33 0 11 2 33 0 12 3 189 0 13 7 145 0 29 3 101 0 30 2 110 0 31 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 110 0 101 2 41 0 112 2 41 0 113 2 33 0 126 7 149 0 214 8 105 0 215 3 193 0 235 8 109 1 95 2 25 1 98 2 25 1 99 2 33 1 103 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[0 8 113 0 104] 
#[1 8 117 0 29 8 121 0 35 3 61 0 101 1 118 0 104 8 125 0 210 8 125 0 229] 
#[1 8 129 0 31 8 133 0 35] 
#[0 2 162 0 69] 
#[1 8 137 0 31 8 141 0 35] 
#[0 2 166 0 69] 
#[1 1 41 0 66 0 10 0 69 0 181 0 172 8 145 0 173] 
#[0 2 170 0 69] 
#[0 2 174 0 69] 
#[1 3 113 0 1 2 37 0 5 8 173 0 11 8 173 0 12 1 133 0 13 1 137 0 15 1 141 0 30 2 178 0 31 2 178 0 35 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 178 0 104 2 37 0 112 2 37 0 113 8 173 0 126 3 125 0 127 1 193 0 129 8 169 0 134 8 169 0 135 8 169 0 137 8 149 0 230 8 153 0 232 8 153 0 233 8 153 0 234 8 165 0 235 8 169 1 69 8 169 1 71 8 169 1 72 8 169 1 73 8 169 1 74 8 169 1 77 8 169 1 78 8 169 1 79 8 169 1 80 8 169 1 81 2 1 1 82 8 169 1 90 8 169 1 91 8 169 1 92 8 169 1 94 2 21 1 95 2 25 1 98 2 29 1 99 8 173 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 8 169 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 2 182 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 2 141 0 3 8 185 0 53 8 177 0 60 8 185 0 77 0 77 0 84 8 185 0 112 8 185 0 113 6 65 0 238 8 181 1 130 8 185 1 131] 
#[0 8 189 0 108] 
#[1 2 186 0 19 2 186 0 108 8 193 0 200] 
#[1 1 6 0 3 1 6 0 53 1 6 0 60 1 6 0 77 1 6 0 84 8 197 0 108 1 6 0 112 1 6 0 113 5 133 0 179 8 201 0 198 5 141 0 201] 
#[0 8 205 0 104] 
#[1 1 6 0 3 1 6 0 53 1 6 0 60 1 6 0 77 1 6 0 84 8 209 0 108 1 6 0 112 1 6 0 113 5 133 0 179 8 213 0 198 5 141 0 201] 
#[0 2 190 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 8 217 0 49 8 221 0 53 8 221 0 77 8 221 0 112 8 221 0 113 8 221 1 131] 
#[0 8 225 0 31] 
#[1 1 61 0 52 1 41 0 66 0 10 0 69 1 65 0 97 0 181 0 172 1 69 0 173] 
#[1 1 41 0 66 0 10 0 69 0 181 0 172 2 117 0 173] 
#[0 2 194 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 2 198 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 88 0 90 0 97 0 108 0 112 0 113] 
#[1 2 141 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 5 169 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 0 85 0 88 1 1 0 90 5 173 0 97 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 8 229 0 141 8 233 0 170 0 177 0 171 0 181 0 172 0 185 0 173 8 237 0 207 2 161 0 238 0 253 1 104 1 1 1 107 8 241 1 130 1 1 1 131] 
#[0 2 202 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 88 0 90 0 97 0 108 0 112 0 113] 
#[0 2 206 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 88 0 90 0 97 0 108 0 112 0 113] 
#[1 2 141 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 5 169 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 0 85 0 88 1 1 0 90 5 173 0 97 8 245 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 5 181 0 141 5 185 0 158 5 189 0 170 0 177 0 171 0 181 0 172 0 185 0 173 5 193 0 207 8 249 0 221 0 249 0 238 0 253 1 104 1 1 1 107 5 205 1 130 1 1 1 131] 
#[0 2 210 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 88 0 90 0 97 0 108 0 112 0 113] 
#[1 0 37 0 52 5 169 0 58 0 53 0 61 1 41 0 66 0 10 0 69 0 85 0 88 5 173 0 97 8 253 0 170 0 177 0 171 0 181 0 172 0 185 0 173 9 1 0 207] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 5 169 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 0 85 0 88 1 1 0 90 5 173 0 97 9 5 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 5 181 0 141 5 185 0 158 5 189 0 170 0 177 0 171 0 181 0 172 0 185 0 173 5 193 0 207 9 9 0 220 5 201 0 221 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 5 205 1 130 1 1 1 131] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 9 13 0 134 9 13 0 135 9 13 0 137 1 213 0 235 9 13 1 69 9 13 1 71 9 13 1 72 9 13 1 73 9 13 1 74 9 13 1 77 9 13 1 78 9 13 1 79 9 13 1 80 9 13 1 81 2 1 1 82 9 13 1 90 9 13 1 91 9 13 1 92 9 13 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 9 13 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 2 41 0 5 3 101 0 30 2 41 0 44 2 41 0 53 2 41 0 60 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 2 41 1 107 2 41 1 112 9 17 1 124 2 57 1 125 2 41 1 131] 
#[1 0 95 0 14 2 18 0 17 2 18 0 19] 
#[1 0 99 0 14 2 66 0 17 2 66 0 19] 
#[0 2 214 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 2 218 0 1 0 5 0 11 0 12 0 13 0 14 0 15 0 30 0 42 0 44 0 45 0 49 0 53 0 60 0 63 0 66 0 69 0 70 0 72 0 77 0 87 0 90 0 97 0 112 0 113 0 126 0 127 0 129] 
#[0 2 222 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 9 29 0 14 5 233 0 19] 
#[0 2 226 0 1 0 5 0 11 0 12 0 13 0 14 0 15 0 30 0 42 0 44 0 45 0 49 0 53 0 60 0 63 0 66 0 69 0 70 0 72 0 77 0 87 0 90 0 97 0 112 0 113 0 126 0 127 0 129] 
#[0 2 230 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 2 234 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 2 238 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 2 242 0 2 2 242 0 6 2 242 0 7 2 242 0 9 2 242 0 10 2 242 0 14 2 242 0 15 2 242 0 16 2 242 0 17 2 242 0 18 2 242 0 19 2 242 0 20 2 242 0 21 2 242 0 23 2 242 0 24 2 242 0 26 2 242 0 27 2 242 0 28 2 242 0 29 0 103 0 30 2 242 0 31 2 242 0 32 2 242 0 33 2 242 0 34 2 242 0 35 2 242 0 36 2 242 0 37 2 242 0 38 2 242 0 39 2 242 0 40 2 242 0 41 2 242 0 42 2 242 0 46 2 242 0 47 2 242 0 48 2 242 0 51 2 242 0 64 2 242 0 70 2 242 0 101 2 242 0 104 2 242 0 105 2 242 0 106 2 242 0 107 2 242 0 108 2 242 0 109 2 242 0 110 2 242 0 111 2 242 0 127 2 242 0 128 2 242 0 129 7 29 1 122] 
#[0 2 246 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 9 145 0 134 9 145 0 135 9 145 0 137 9 141 0 238 9 145 0 244 9 145 0 245 9 145 0 246 9 145 0 247 9 145 0 248 9 145 0 249 9 145 0 250 9 145 0 251 9 145 0 254 9 145 0 255 9 145 1 7 9 145 1 8 9 145 1 14 9 145 1 18 9 145 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 9 145 1 29 9 145 1 30 9 145 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 9 145 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[0 2 250 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 9 249 0 70] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 9 253 0 134 9 253 0 135 9 253 0 137 1 213 0 235 9 253 1 69 9 253 1 71 9 253 1 72 9 253 1 73 9 253 1 74 9 253 1 77 9 253 1 78 9 253 1 79 9 253 1 80 9 253 1 81 2 1 1 82 9 253 1 90 9 253 1 91 9 253 1 92 9 253 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 9 253 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 2 41 0 5 3 101 0 30 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 10 1 0 235 2 41 1 107 2 41 1 112 10 5 1 124 2 57 1 125 2 41 1 131] 
#[1 2 41 0 5 3 101 0 30 2 41 0 44 2 41 0 53 2 41 0 60 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 2 41 1 107 2 41 1 112 10 9 1 124 2 57 1 125 2 41 1 131] 
#[0 5 249 0 14] 
#[0 2 254 0 69] 
#[0 10 13 0 53 0 77 0 112 0 113 1 131] 
#[1 3 2 0 19 10 17 0 29 3 2 0 128] 
#[0 3 6 0 19 0 128] 
#[0 3 10 0 19 0 128] 
#[0 3 14 0 19 0 128] 
#[0 3 18 0 1 0 3 0 5 0 9 0 11 0 12 0 13 0 15 0 20 0 24 0 25 0 30 0 42 0 44 0 45 0 49 0 53 0 56 0 58 0 60 0 63 0 66 0 67 0 69 0 70 0 72 0 74 0 77 0 81 0 84 0 85 0 87 0 90 0 92 0 97 0 105 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 129 1 136] 
#[1 3 22 0 19 10 21 0 29 10 25 0 35 3 22 0 128] 
#[0 3 26 0 3 0 53 0 58 0 77 0 112 0 113 0 126] 
#[1 10 29 0 19 10 33 0 128] 
#[1 3 30 0 3 3 30 0 53 3 30 0 58 3 30 0 77 3 30 0 112 3 30 0 113 3 30 0 126 10 37 0 128] 
#[0 3 34 0 1 0 5 0 11 0 12 0 13 0 15 0 29 0 30 0 31 0 35 0 42 0 44 0 45 0 49 0 53 0 58 0 60 0 63 0 66 0 69 0 70 0 72 0 77 0 87 0 90 0 97 0 101 0 104 0 112 0 113 0 126 0 127 0 129] 
#[1 2 41 0 5 3 101 0 30 2 41 0 44 2 41 0 53 2 41 0 60 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 2 41 1 107 2 41 1 112 10 41 1 124 2 57 1 125 2 41 1 131] 
#[0 3 38 0 30] 
#[0 2 26 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 3 42 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 3 46 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 3 113 0 1 2 37 0 5 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 3 253 0 63 1 169 0 66 0 42 0 69 1 173 0 70 4 1 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 3 125 0 127 1 193 0 129 10 45 0 134 10 45 0 135 10 45 0 137 1 213 0 235 10 45 1 70 10 45 1 71 10 45 1 72 10 45 1 73 10 45 1 74 10 45 1 77 10 45 1 78 10 45 1 79 10 45 1 80 10 45 1 81 2 1 1 82 10 45 1 91 10 45 1 93 10 45 1 94 4 21 1 99 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 10 45 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 3 50 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 10 49 0 70] 
#[1 2 41 0 5 3 101 0 30 2 41 0 44 2 41 0 53 2 41 0 60 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 2 41 1 107 2 41 1 112 10 53 1 124 2 57 1 125 2 41 1 131] 
#[0 10 57 0 70] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 10 61 0 132] 
#[0 10 65 0 104] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 10 69 0 134 10 69 0 135 10 69 0 137 1 213 0 235 10 69 1 69 10 69 1 71 10 69 1 72 10 69 1 73 10 69 1 74 10 69 1 77 10 69 1 78 10 69 1 79 10 69 1 80 10 69 1 81 2 1 1 82 10 69 1 90 10 69 1 91 10 69 1 92 10 69 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 10 69 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 10 73 0 13] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 10 77 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 10 101 0 211 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 10 113 0 132] 
#[1 1 6 0 1 1 6 0 3 1 6 0 5 1 6 0 11 1 6 0 12 1 6 0 13 10 117 0 14 1 6 0 15 1 6 0 30 1 6 0 42 1 6 0 44 1 6 0 45 1 6 0 49 1 6 0 53 1 6 0 60 1 6 0 63 1 6 0 66 1 6 0 69 1 6 0 70 1 6 0 72 1 6 0 77 1 6 0 87 1 6 0 90 1 6 0 97 1 6 0 112 1 6 0 113 1 6 0 126 1 6 0 127 1 6 0 129 10 121 0 179 10 125 1 84 10 129 1 85 10 133 1 88 10 137 1 89] 
#[1 3 54 0 2 2 41 0 5 3 54 0 6 3 54 0 7 3 54 0 9 3 54 0 10 2 33 0 11 2 33 0 12 3 189 0 13 3 54 0 14 3 54 0 15 3 54 0 16 3 54 0 17 3 54 0 18 3 54 0 19 3 54 0 20 3 54 0 21 3 54 0 23 3 54 0 24 3 54 0 26 3 54 0 27 3 54 0 28 3 54 0 29 0 107 0 30 3 54 0 31 3 54 0 32 3 54 0 33 3 54 0 34 3 54 0 35 3 54 0 36 3 54 0 37 3 54 0 38 3 54 0 39 3 54 0 40 3 54 0 41 1 145 0 42 2 41 0 44 3 54 0 46 3 54 0 47 3 54 0 48 3 54 0 51 2 41 0 53 2 41 0 60 3 54 0 64 0 111 0 70 2 41 0 77 2 41 0 87 2 41 0 90 3 54 0 101 3 54 0 104 3 54 0 105 3 54 0 106 3 54 0 107 3 54 0 108 3 54 0 109 3 54 0 110 3 54 0 111 2 41 0 112 2 41 0 113 2 33 0 126 3 54 0 127 3 54 0 128 3 54 0 129 3 193 0 235 10 141 1 98 10 141 1 99 2 33 1 103 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[0 3 58 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 3 62 0 2 3 62 0 6 3 62 0 7 3 62 0 9 3 62 0 10 3 62 0 14 3 62 0 15 3 62 0 16 3 62 0 17 3 62 0 18 3 62 0 19 3 62 0 20 3 62 0 21 10 145 0 22 3 62 0 23 3 62 0 24 3 62 0 26 3 62 0 27 3 62 0 28 3 62 0 29 3 62 0 30 3 62 0 31 3 62 0 32 3 62 0 33 3 62 0 34 3 62 0 35 3 62 0 36 3 62 0 37 3 62 0 38 3 62 0 39 3 62 0 40 3 62 0 41 3 62 0 42 3 62 0 46 3 62 0 47 3 62 0 48 3 62 0 51 3 62 0 64 3 62 0 70 3 62 0 101 3 62 0 104 3 62 0 105 3 62 0 106 3 62 0 107 3 62 0 108 3 62 0 109 3 62 0 110 3 62 0 111 3 62 0 127 3 62 0 128 3 62 0 129] 
#[1 3 66 0 14 3 66 0 19 10 149 1 129] 
#[0 10 153 0 14] 
#[0 3 70 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 3 74 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 6 189 0 67 6 193 0 92 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 10 157 0 247 10 157 0 248 10 157 0 249 7 21 1 136] 
#[0 3 78 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 3 82 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[1 0 6 0 1 0 6 0 3 0 6 0 5 0 6 0 8 0 6 0 9 0 6 0 13 0 6 0 15 0 6 0 20 0 6 0 24 0 6 0 26 0 6 0 30 0 6 0 31 0 6 0 44 0 6 0 45 0 6 0 52 0 6 0 53 0 6 0 56 0 6 0 57 0 6 0 58 0 6 0 59 0 6 0 60 0 6 0 61 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 69 0 6 0 70 0 6 0 71 0 6 0 72 0 6 0 74 0 6 0 75 0 6 0 77 0 6 0 78 0 6 0 79 0 6 0 80 0 6 0 84 0 6 0 86 0 6 0 87 0 6 0 88 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 97 0 6 0 99 0 6 0 102 0 6 0 104 0 6 0 105 0 6 0 107 0 6 0 108 0 6 0 112 0 6 0 113 0 6 0 117 0 6 0 118 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 0 6 0 126 0 6 0 127 10 161 0 132 0 6 1 136] 
#[0 3 86 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 3 90 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 3 94 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 3 98 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 3 102 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 3 106 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 3 110 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 3 114 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 3 118 0 19 0 128] 
#[0 3 122 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 3 126 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 3 130 0 19 0 128] 
#[0 3 134 0 19 0 128] 
#[1 1 90 0 17 0 115 0 19 0 115 0 128] 
#[1 0 186 0 1 1 94 0 13 1 94 0 17 0 119 0 19 0 51 0 30 1 94 0 127 0 119 0 128 2 177 1 105 2 181 1 106] 
#[1 3 146 0 19 3 146 0 128 10 165 1 115] 
#[0 3 150 0 19 0 128] 
#[0 3 154 0 19 0 128] 
#[1 0 190 0 1 0 190 0 13 0 190 0 17 0 190 0 19 0 190 0 30 10 169 0 35 0 190 0 127 0 190 0 128] 
#[0 3 158 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 3 162 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 3 166 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 3 61 0 101 1 118 0 104 10 173 0 210 10 173 0 229] 
#[1 10 177 0 13 10 181 0 45 10 185 0 104 10 189 0 144 10 193 0 147 10 197 0 148] 
#[1 10 177 0 13 10 181 0 45 10 185 0 104 10 201 0 144 10 193 0 147 10 197 0 148] 
#[1 10 177 0 13 10 181 0 45 10 185 0 104 10 205 0 144 10 193 0 147 10 197 0 148] 
#[0 3 170 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 0 41 0 53 0 45 0 58 0 49 0 60 0 53 0 61 0 57 0 65 0 61 0 66 0 10 0 69 0 65 0 72 0 69 0 77 0 73 0 79 0 77 0 84 1 1 0 87 0 85 0 88 0 89 0 89 1 1 0 90 0 97 0 91 0 101 0 94 0 105 0 96 0 109 0 97 0 113 0 99 10 209 0 108 1 1 0 112 1 1 0 113 10 213 0 133 0 129 0 135 0 133 0 137 0 157 0 141 0 157 0 142 0 145 0 157 0 149 0 158 0 153 0 159 0 157 0 160 0 161 0 161 0 165 0 162 0 169 0 165 0 173 0 170 0 177 0 171 0 181 0 172 0 185 0 173 0 189 0 185 0 193 0 186 0 197 0 187 0 201 0 188 0 205 0 197 0 209 0 205 0 213 0 206 0 217 0 207 0 221 0 208 0 225 0 213 0 229 0 216 0 233 0 217 0 237 0 218 0 241 0 219 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 1 5 1 130 1 1 1 131] 
#[0 3 174 0 1 0 5 0 11 0 12 0 13 0 15 0 30 0 42 0 44 0 45 0 49 0 52 0 53 0 58 0 60 0 61 0 63 0 65 0 66 0 69 0 70 0 72 0 77 0 79 0 87 0 88 0 89 0 90 0 91 0 94 0 96 0 97 0 99 0 112 0 113 0 126 0 127 0 129] 
#[0 10 217 0 14] 
#[0 3 178 0 1 0 5 0 11 0 12 0 13 0 15 0 30 0 42 0 44 0 45 0 49 0 52 0 53 0 58 0 60 0 61 0 63 0 65 0 66 0 69 0 70 0 72 0 77 0 79 0 87 0 88 0 89 0 90 0 91 0 94 0 96 0 97 0 99 0 112 0 113 0 126 0 127 0 129] 
#[0 3 182 0 1 0 5 0 11 0 12 0 13 0 15 0 30 0 42 0 44 0 45 0 49 0 52 0 53 0 58 0 60 0 61 0 63 0 65 0 66 0 69 0 70 0 72 0 77 0 79 0 87 0 88 0 89 0 90 0 91 0 94 0 96 0 97 0 99 0 112 0 113 0 126 0 127 0 129] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 10 221 0 134 10 221 0 135 10 221 0 137 1 213 0 235 10 221 1 69 10 221 1 71 10 221 1 72 10 221 1 73 10 221 1 74 10 221 1 77 10 221 1 78 10 221 1 79 10 221 1 80 10 221 1 81 2 1 1 82 10 221 1 90 10 221 1 91 10 221 1 92 10 221 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 10 221 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 10 225 0 31 10 229 0 35] 
#[1 10 233 0 31 3 61 0 101 10 237 0 229] 
#[1 3 113 0 1 2 141 0 3 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 0 49 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 0 77 0 84 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 10 241 0 134 10 241 0 135 10 241 0 137 1 213 0 235 6 65 0 238 10 241 1 69 10 241 1 71 10 241 1 72 10 241 1 73 10 241 1 74 10 241 1 77 10 241 1 78 10 241 1 79 10 241 1 80 10 241 1 81 2 1 1 82 10 241 1 90 10 241 1 91 10 241 1 92 10 241 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 10 241 1 121 3 177 1 124 2 57 1 125 10 245 1 130 2 37 1 131] 
#[0 10 249 0 14] 
#[1 3 186 0 14 3 186 0 19 10 253 0 195] 
#[0 3 190 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 2 141 0 3 11 5 0 53 8 177 0 60 11 5 0 77 0 77 0 84 11 5 0 112 11 5 0 113 6 65 0 238 11 1 1 130 11 5 1 131] 
#[0 11 9 0 108] 
#[1 3 194 0 19 3 194 0 108 11 13 0 191] 
#[1 1 6 0 1 1 6 0 3 1 6 0 5 1 6 0 11 1 6 0 12 1 6 0 13 11 17 0 14 1 6 0 15 1 6 0 30 1 6 0 42 1 6 0 44 1 6 0 45 1 6 0 49 1 6 0 53 1 6 0 60 1 6 0 63 1 6 0 66 1 6 0 69 1 6 0 70 1 6 0 72 1 6 0 77 1 6 0 84 1 6 0 87 1 6 0 90 1 6 0 97 1 6 0 112 1 6 0 113 1 6 0 126 1 6 0 127 1 6 0 129 7 85 0 179 11 21 0 193 7 93 0 196] 
#[0 3 198 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 1 6 0 3 1 6 0 53 1 6 0 60 1 6 0 77 1 6 0 84 11 25 0 108 1 6 0 112 1 6 0 113 7 101 0 179 11 29 0 189 7 109 0 192] 
#[1 11 33 0 31 11 37 0 104] 
#[0 3 202 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 1 6 0 3 1 6 0 53 1 6 0 60 1 6 0 77 1 6 0 84 11 41 0 108 1 6 0 112 1 6 0 113 7 101 0 179 11 45 0 189 7 109 0 192] 
#[1 3 61 0 101 1 118 0 104 11 49 0 210 11 49 0 229] 
#[0 3 206 0 101 0 104] 
#[1 2 41 0 5 2 33 0 11 2 33 0 12 3 189 0 13 3 101 0 30 3 210 0 31 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 3 210 0 101 2 41 0 112 2 41 0 113 2 33 0 126 3 193 0 235 11 53 1 95 2 25 1 98 2 25 1 99 2 33 1 103 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[0 3 214 0 31 0 101] 
#[1 1 118 0 31 3 61 0 101 11 57 0 210 11 57 0 229] 
#[1 7 145 0 29 2 110 0 31 2 110 0 101 7 149 0 214 11 61 0 215] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 11 65 0 132] 
#[1 2 41 0 5 2 33 0 11 2 33 0 12 3 189 0 13 3 101 0 30 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 106 0 101 2 106 0 104 2 41 0 112 2 41 0 113 2 33 0 126 11 69 0 209 3 193 0 235 7 141 1 95 2 25 1 98 2 25 1 99 2 33 1 103 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[1 2 41 0 5 2 33 0 11 2 33 0 12 3 189 0 13 7 145 0 29 3 101 0 30 2 110 0 31 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 110 0 101 2 41 0 112 2 41 0 113 2 33 0 126 7 149 0 214 11 73 0 215 3 193 0 235 11 77 1 95 2 25 1 98 2 25 1 99 2 33 1 103 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[0 11 81 0 104] 
#[1 11 85 0 31 11 89 0 35 3 61 0 101 11 93 0 229] 
#[0 11 97 0 31] 
#[1 2 41 0 5 2 33 0 11 2 33 0 12 3 189 0 13 3 101 0 30 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 2 33 0 126 3 193 0 235 11 101 1 95 2 25 1 98 2 25 1 99 2 33 1 103 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[0 3 218 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 11 105 0 134 11 105 0 135 11 105 0 137 1 213 0 235 11 105 1 69 11 105 1 71 11 105 1 72 11 105 1 73 11 105 1 74 11 105 1 77 11 105 1 78 11 105 1 79 11 105 1 80 11 105 1 81 2 1 1 82 11 105 1 90 11 105 1 91 11 105 1 92 11 105 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 11 105 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 11 109 0 31 11 113 0 35] 
#[0 3 222 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 11 117 0 134 11 117 0 135 11 117 0 137 1 213 0 235 11 117 1 69 11 117 1 71 11 117 1 72 11 117 1 73 11 117 1 74 11 117 1 77 11 117 1 78 11 117 1 79 11 117 1 80 11 117 1 81 2 1 1 82 11 117 1 90 11 117 1 91 11 117 1 92 11 117 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 11 117 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 11 121 0 108] 
#[1 1 6 0 3 1 6 0 53 1 6 0 60 1 6 0 77 1 6 0 84 1 6 0 112 1 6 0 113 7 101 0 179 11 125 0 189 7 109 0 192] 
#[0 11 129 0 104] 
#[1 1 6 0 3 1 6 0 53 1 6 0 60 1 6 0 77 1 6 0 84 1 6 0 112 1 6 0 113 7 101 0 179 11 133 0 189 7 109 0 192] 
#[1 11 137 0 29 11 141 0 35 3 61 0 101 1 118 0 104 3 69 0 127 11 145 0 210 11 149 0 222 11 145 0 229] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 5 169 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 0 85 0 88 1 1 0 90 5 173 0 97 11 153 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 5 181 0 141 5 185 0 158 5 189 0 170 0 177 0 171 0 181 0 172 0 185 0 173 5 193 0 207 11 157 0 220 5 201 0 221 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 5 205 1 130 1 1 1 131] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 88 0 6 0 90 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 11 161 0 132] 
#[0 11 165 0 70] 
#[1 2 41 0 5 3 101 0 30 2 41 0 44 2 41 0 53 2 41 0 60 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 2 41 1 107 2 41 1 112 11 169 1 124 2 57 1 125 2 41 1 131] 
#[0 11 173 0 70] 
#[1 2 41 0 5 3 101 0 30 2 41 0 44 2 41 0 53 2 41 0 60 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 2 41 1 107 2 41 1 112 11 177 1 124 2 57 1 125 2 41 1 131] 
#[1 11 181 0 1 2 41 0 5 3 101 0 30 2 41 0 44 2 41 0 53 2 41 0 60 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 2 41 1 107 2 41 1 112 11 185 1 124 2 57 1 125 2 41 1 131] 
#[0 11 189 0 70] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 11 193 0 134 11 193 0 135 11 193 0 137 1 213 0 235 11 193 1 69 11 193 1 71 11 193 1 72 11 193 1 73 11 193 1 74 11 193 1 77 11 193 1 78 11 193 1 79 11 193 1 80 11 193 1 81 2 1 1 82 11 193 1 90 11 193 1 91 11 193 1 92 11 193 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 11 193 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 3 226 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 65 0 6 0 66 0 6 0 69 0 6 0 72 0 6 0 77 0 6 0 79 0 6 0 84 0 6 0 87 0 6 0 88 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 96 0 6 0 97 0 6 0 99 0 6 0 108 0 6 0 112 0 6 0 113 11 197 0 132] 
#[1 2 41 0 5 2 33 0 11 2 33 0 12 3 189 0 13 3 101 0 30 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 106 0 101 2 106 0 104 2 41 0 112 2 41 0 113 2 33 0 126 11 201 0 209 3 193 0 235 7 141 1 95 2 25 1 98 2 25 1 99 2 33 1 103 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[1 2 41 0 5 2 33 0 11 2 33 0 12 3 189 0 13 7 145 0 29 3 101 0 30 2 110 0 31 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 110 0 101 2 41 0 112 2 41 0 113 2 33 0 126 7 149 0 214 11 205 0 215 3 193 0 235 11 209 1 95 2 25 1 98 2 25 1 99 2 33 1 103 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[0 11 213 0 104] 
#[1 11 217 0 29 11 221 0 35 3 61 0 101 1 118 0 104 11 225 0 210 11 225 0 229] 
#[0 3 230 0 19 0 31 0 108] 
#[1 2 130 0 19 2 130 0 108 11 229 0 168] 
#[1 11 233 0 19 3 234 0 108 11 237 0 167 11 241 0 169] 
#[0 3 238 0 19 0 31 0 108] 
#[1 1 1 0 5 2 121 0 15 2 125 0 30 1 1 0 53 1 1 0 60 1 1 0 77 1 1 0 87 1 1 0 90 2 129 0 104 11 245 0 108 1 1 0 112 1 1 0 113 11 249 0 166 2 137 1 104 1 1 1 107 1 1 1 131] 
#[0 3 242 0 19 0 31 0 108] 
#[0 3 246 0 19 0 31 0 108] 
#[1 1 6 0 1 1 6 0 3 1 6 0 5 1 6 0 9 1 6 0 11 1 6 0 12 1 6 0 13 11 253 0 14 1 6 0 15 1 6 0 20 1 6 0 24 1 6 0 25 1 6 0 30 1 6 0 42 1 6 0 44 1 6 0 45 1 6 0 49 1 6 0 53 1 6 0 56 1 6 0 60 1 6 0 63 1 6 0 66 1 6 0 67 1 6 0 69 1 6 0 70 1 6 0 72 1 6 0 77 1 6 0 81 1 6 0 85 1 6 0 87 1 6 0 90 1 6 0 92 1 6 0 97 1 6 0 105 1 6 0 112 1 6 0 113 1 6 0 117 1 6 0 118 1 6 0 120 1 6 0 121 1 6 0 122 1 6 0 123 1 6 0 125 1 6 0 126 1 6 0 127 1 6 0 129 12 1 0 175 12 5 0 178 12 9 0 179 12 13 0 182 1 6 1 136] 
#[0 12 17 0 13] 
#[1 13 205 0 1 13 205 0 2 13 205 0 3 12 33 0 4 13 197 0 5 13 205 0 6 13 205 0 7 13 205 0 9 13 205 0 10 13 197 0 11 13 197 0 12 5 57 0 13 12 65 0 14 13 181 0 15 13 205 0 16 13 181 0 17 13 205 0 18 13 205 0 19 13 205 0 20 13 205 0 21 13 205 0 22 13 205 0 23 13 205 0 24 13 205 0 25 13 205 0 26 13 205 0 27 13 205 0 28 13 205 0 29 13 205 0 30 13 205 0 31 13 205 0 32 13 205 0 33 13 205 0 34 13 205 0 35 13 205 0 36 13 205 0 37 13 205 0 38 13 205 0 39 13 205 0 40 13 205 0 41 13 181 0 42 13 205 0 43 13 197 0 44 5 65 0 45 13 205 0 47 13 205 0 48 13 205 0 49 13 197 0 50 13 197 0 51 13 197 0 52 13 197 0 53 13 197 0 54 13 197 0 55 13 197 0 56 13 197 0 57 13 197 0 58 13 197 0 59 13 197 0 60 13 197 0 62 13 197 0 63 13 197 0 64 13 197 0 65 13 197 0 66 6 189 0 67 13 197 0 68 13 197 0 69 13 197 0 70 13 197 0 71 13 197 0 72 13 197 0 73 13 197 0 74 13 197 0 75 13 197 0 76 13 197 0 77 13 197 0 78 13 197 0 79 13 197 0 80 13 197 0 81 13 197 0 82 13 197 0 83 13 197 0 84 13 197 0 85 13 197 0 86 13 197 0 87 13 197 0 88 13 197 0 89 13 197 0 90 13 197 0 91 6 193 0 92 13 197 0 93 13 197 0 94 13 197 0 95 13 197 0 96 13 197 0 97 13 197 0 98 13 197 0 99 13 197 0 100 13 197 0 101 13 197 0 102 13 197 0 103 5 69 0 104 13 205 0 105 13 205 0 106 13 205 0 107 13 197 0 112 13 197 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 13 197 0 126 13 205 0 127 13 205 0 128 13 205 0 129 13 169 0 138 13 173 0 139 13 177 0 140 13 181 0 155 13 177 0 247 13 177 0 248 13 177 0 249 13 197 1 131 13 197 1 132 13 197 1 133 13 177 1 134 13 205 1 135 7 21 1 136] 
#[1 13 205 0 1 13 205 0 2 13 205 0 3 12 33 0 4 13 197 0 5 13 205 0 6 13 205 0 7 13 205 0 9 13 205 0 10 13 197 0 11 13 197 0 12 5 57 0 13 13 181 0 15 13 205 0 16 13 181 0 17 13 205 0 18 13 205 0 19 13 205 0 20 13 205 0 21 13 205 0 22 13 205 0 23 13 205 0 24 13 205 0 25 13 205 0 26 13 205 0 27 13 205 0 28 13 205 0 29 13 205 0 30 13 205 0 31 13 205 0 32 13 205 0 33 13 205 0 34 13 205 0 35 13 205 0 36 13 205 0 37 13 205 0 38 13 205 0 39 13 205 0 40 13 205 0 41 13 181 0 42 13 205 0 43 13 197 0 44 5 65 0 45 13 209 0 46 13 205 0 47 13 205 0 48 13 205 0 49 13 197 0 50 13 197 0 51 13 197 0 52 13 197 0 53 13 197 0 54 13 197 0 55 13 197 0 56 13 197 0 57 13 197 0 58 13 197 0 59 13 197 0 60 13 197 0 62 13 197 0 63 13 197 0 64 13 197 0 65 13 197 0 66 6 189 0 67 13 197 0 68 13 197 0 69 13 197 0 70 13 197 0 71 13 197 0 72 13 197 0 73 13 197 0 74 13 197 0 75 13 197 0 76 13 197 0 77 13 197 0 78 13 197 0 79 13 197 0 80 13 197 0 81 13 197 0 82 13 197 0 83 13 197 0 84 13 197 0 85 13 197 0 86 13 197 0 87 13 197 0 88 13 197 0 89 13 197 0 90 13 197 0 91 6 193 0 92 13 197 0 93 13 197 0 94 13 197 0 95 13 197 0 96 13 197 0 97 13 197 0 98 13 197 0 99 13 197 0 100 13 197 0 101 13 197 0 102 13 197 0 103 5 69 0 104 13 205 0 105 13 205 0 106 13 205 0 107 13 197 0 112 13 197 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 13 197 0 126 13 205 0 127 13 205 0 128 13 205 0 129 13 169 0 138 13 173 0 139 13 177 0 140 13 181 0 155 13 177 0 247 13 177 0 248 13 177 0 249 13 197 1 131 13 197 1 132 13 197 1 133 13 177 1 134 13 205 1 135 7 21 1 136] 
#[1 13 205 0 1 13 205 0 2 13 205 0 3 12 33 0 4 13 197 0 5 13 205 0 6 13 205 0 7 13 205 0 9 13 205 0 10 13 197 0 11 13 197 0 12 5 57 0 13 13 181 0 15 13 205 0 16 13 181 0 17 13 205 0 18 13 205 0 19 13 205 0 20 13 205 0 21 13 205 0 22 13 205 0 23 13 205 0 24 13 205 0 25 13 205 0 26 13 205 0 27 13 205 0 28 13 205 0 29 13 205 0 30 13 205 0 31 13 205 0 32 13 205 0 33 13 205 0 34 13 205 0 35 13 205 0 36 13 205 0 37 13 205 0 38 13 205 0 39 13 205 0 40 13 205 0 41 13 181 0 42 13 205 0 43 13 197 0 44 5 65 0 45 13 205 0 47 13 205 0 48 13 205 0 49 13 197 0 50 13 197 0 51 13 197 0 52 13 197 0 53 13 197 0 54 13 197 0 55 13 197 0 56 13 197 0 57 13 197 0 58 13 197 0 59 13 197 0 60 13 197 0 62 13 197 0 63 13 197 0 64 13 197 0 65 13 197 0 66 6 189 0 67 13 197 0 68 13 197 0 69 13 197 0 70 13 197 0 71 13 197 0 72 13 197 0 73 13 197 0 74 13 197 0 75 13 197 0 76 13 197 0 77 13 197 0 78 13 197 0 79 13 197 0 80 13 197 0 81 13 197 0 82 13 197 0 83 13 197 0 84 13 197 0 85 13 197 0 86 13 197 0 87 13 197 0 88 13 197 0 89 13 197 0 90 13 197 0 91 6 193 0 92 13 197 0 93 13 197 0 94 13 197 0 95 13 197 0 96 13 197 0 97 13 197 0 98 13 197 0 99 13 197 0 100 13 197 0 101 13 197 0 102 13 197 0 103 5 69 0 104 13 205 0 105 13 205 0 106 13 205 0 107 13 213 0 108 13 197 0 112 13 197 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 13 197 0 126 13 205 0 127 13 205 0 128 13 205 0 129 13 169 0 138 13 173 0 139 13 177 0 140 13 181 0 155 13 177 0 247 13 177 0 248 13 177 0 249 13 197 1 131 13 197 1 132 13 197 1 133 13 177 1 134 13 205 1 135 7 21 1 136] 
#[0 3 250 0 1 0 3 0 5 0 8 0 9 0 13 0 14 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 46 0 49 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 129 1 136 1 137] 
#[1 13 205 0 1 13 205 0 2 13 205 0 3 12 33 0 4 13 197 0 5 13 205 0 6 13 205 0 7 13 205 0 9 13 205 0 10 13 197 0 11 13 197 0 12 5 57 0 13 13 217 0 14 13 181 0 15 13 205 0 16 13 181 0 17 13 205 0 18 13 205 0 19 13 205 0 20 13 205 0 21 13 205 0 22 13 205 0 23 13 205 0 24 13 205 0 25 13 205 0 26 13 205 0 27 13 205 0 28 13 205 0 29 13 205 0 30 13 205 0 31 13 205 0 32 13 205 0 33 13 205 0 34 13 205 0 35 13 205 0 36 13 205 0 37 13 205 0 38 13 205 0 39 13 205 0 40 13 205 0 41 13 181 0 42 13 205 0 43 13 197 0 44 5 65 0 45 13 205 0 47 13 205 0 48 13 205 0 49 13 197 0 50 13 197 0 51 13 197 0 52 13 197 0 53 13 197 0 54 13 197 0 55 13 197 0 56 13 197 0 57 13 197 0 58 13 197 0 59 13 197 0 60 13 197 0 62 13 197 0 63 13 197 0 64 13 197 0 65 13 197 0 66 6 189 0 67 13 197 0 68 13 197 0 69 13 197 0 70 13 197 0 71 13 197 0 72 13 197 0 73 13 197 0 74 13 197 0 75 13 197 0 76 13 197 0 77 13 197 0 78 13 197 0 79 13 197 0 80 13 197 0 81 13 197 0 82 13 197 0 83 13 197 0 84 13 197 0 85 13 197 0 86 13 197 0 87 13 197 0 88 13 197 0 89 13 197 0 90 13 197 0 91 6 193 0 92 13 197 0 93 13 197 0 94 13 197 0 95 13 197 0 96 13 197 0 97 13 197 0 98 13 197 0 99 13 197 0 100 13 197 0 101 13 197 0 102 13 197 0 103 5 69 0 104 13 205 0 105 13 205 0 106 13 205 0 107 13 197 0 112 13 197 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 13 197 0 126 13 205 0 127 13 205 0 128 13 205 0 129 13 169 0 138 13 173 0 139 13 177 0 140 13 181 0 155 13 177 0 247 13 177 0 248 13 177 0 249 13 197 1 131 13 197 1 132 13 197 1 133 13 177 1 134 13 205 1 135 7 21 1 136] 
#[0 3 254 0 46] 
#[1 13 205 0 1 13 205 0 2 13 205 0 3 12 33 0 4 13 197 0 5 13 205 0 6 13 205 0 7 13 205 0 9 13 205 0 10 13 197 0 11 13 197 0 12 5 57 0 13 13 181 0 15 13 205 0 16 13 181 0 17 13 205 0 18 13 205 0 19 13 205 0 20 13 205 0 21 13 205 0 22 13 205 0 23 13 205 0 24 13 205 0 25 13 205 0 26 13 205 0 27 13 205 0 28 13 205 0 29 13 205 0 30 13 205 0 31 13 205 0 32 13 205 0 33 13 205 0 34 13 205 0 35 13 205 0 36 13 205 0 37 13 205 0 38 13 205 0 39 13 205 0 40 13 205 0 41 13 181 0 42 13 205 0 43 13 197 0 44 5 65 0 45 13 221 0 46 13 205 0 47 13 205 0 48 13 205 0 49 13 197 0 50 13 197 0 51 13 197 0 52 13 197 0 53 13 197 0 54 13 197 0 55 13 197 0 56 13 197 0 57 13 197 0 58 13 197 0 59 13 197 0 60 13 197 0 62 13 197 0 63 13 197 0 64 13 197 0 65 13 197 0 66 6 189 0 67 13 197 0 68 13 197 0 69 13 197 0 70 13 197 0 71 13 197 0 72 13 197 0 73 13 197 0 74 13 197 0 75 13 197 0 76 13 197 0 77 13 197 0 78 13 197 0 79 13 197 0 80 13 197 0 81 13 197 0 82 13 197 0 83 13 197 0 84 13 197 0 85 13 197 0 86 13 197 0 87 13 197 0 88 13 197 0 89 13 197 0 90 13 197 0 91 6 193 0 92 13 197 0 93 13 197 0 94 13 197 0 95 13 197 0 96 13 197 0 97 13 197 0 98 13 197 0 99 13 197 0 100 13 197 0 101 13 197 0 102 13 197 0 103 5 69 0 104 13 205 0 105 13 205 0 106 13 205 0 107 13 197 0 112 13 197 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 13 197 0 126 13 205 0 127 13 205 0 128 13 205 0 129 13 169 0 138 13 173 0 139 13 177 0 140 13 181 0 155 13 177 0 247 13 177 0 248 13 177 0 249 13 197 1 131 13 197 1 132 13 197 1 133 13 177 1 134 13 205 1 135 7 21 1 136] 
#[1 13 205 0 1 13 205 0 2 13 205 0 3 12 33 0 4 13 197 0 5 13 205 0 6 13 205 0 7 13 205 0 9 13 205 0 10 13 197 0 11 13 197 0 12 5 57 0 13 13 181 0 15 13 205 0 16 13 181 0 17 13 205 0 18 13 205 0 19 13 205 0 20 13 205 0 21 13 205 0 22 13 205 0 23 13 205 0 24 13 205 0 25 13 205 0 26 13 205 0 27 13 205 0 28 13 205 0 29 13 205 0 30 13 205 0 31 13 205 0 32 13 205 0 33 13 205 0 34 13 205 0 35 13 205 0 36 13 205 0 37 13 205 0 38 13 205 0 39 13 205 0 40 13 205 0 41 13 181 0 42 13 205 0 43 13 197 0 44 5 65 0 45 13 205 0 47 13 205 0 48 13 205 0 49 13 197 0 50 13 197 0 51 13 197 0 52 13 197 0 53 13 197 0 54 13 197 0 55 13 197 0 56 13 197 0 57 13 197 0 58 13 197 0 59 13 197 0 60 13 197 0 62 13 197 0 63 13 197 0 64 13 197 0 65 13 197 0 66 6 189 0 67 13 197 0 68 13 197 0 69 13 197 0 70 13 197 0 71 13 197 0 72 13 197 0 73 13 197 0 74 13 197 0 75 13 197 0 76 13 197 0 77 13 197 0 78 13 197 0 79 13 197 0 80 13 197 0 81 13 197 0 82 13 197 0 83 13 197 0 84 13 197 0 85 13 197 0 86 13 197 0 87 13 197 0 88 13 197 0 89 13 197 0 90 13 197 0 91 6 193 0 92 13 197 0 93 13 197 0 94 13 197 0 95 13 197 0 96 13 197 0 97 13 197 0 98 13 197 0 99 13 197 0 100 13 197 0 101 13 197 0 102 13 197 0 103 5 69 0 104 13 205 0 105 13 205 0 106 13 205 0 107 13 225 0 108 13 197 0 112 13 197 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 13 197 0 126 13 205 0 127 13 205 0 128 13 205 0 129 13 169 0 138 13 173 0 139 13 177 0 140 13 181 0 155 13 177 0 247 13 177 0 248 13 177 0 249 13 197 1 131 13 197 1 132 13 197 1 133 13 177 1 134 13 205 1 135 7 21 1 136] 
#[1 3 61 0 101 1 118 0 104 13 229 0 210 13 229 0 229] 
#[1 1 118 0 31 3 61 0 101 13 233 0 210 13 233 0 229] 
#[1 7 145 0 29 2 110 0 31 2 110 0 101 7 149 0 214 13 237 0 215] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 13 241 0 132] 
#[1 2 41 0 5 2 33 0 11 2 33 0 12 3 189 0 13 3 101 0 30 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 106 0 101 2 106 0 104 2 41 0 112 2 41 0 113 2 33 0 126 13 245 0 209 3 193 0 235 7 141 1 95 2 25 1 98 2 25 1 99 2 33 1 103 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[1 2 41 0 5 2 33 0 11 2 33 0 12 3 189 0 13 7 145 0 29 3 101 0 30 2 110 0 31 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 110 0 101 2 41 0 112 2 41 0 113 2 33 0 126 7 149 0 214 13 249 0 215 3 193 0 235 13 253 1 95 2 25 1 98 2 25 1 99 2 33 1 103 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[0 14 1 0 104] 
#[0 4 2 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 14 5 0 134 14 5 0 135 14 5 0 137 9 141 0 238 14 5 0 244 14 5 0 245 14 5 0 246 14 5 0 247 14 5 0 248 14 5 0 249 14 5 0 250 14 5 0 251 14 5 0 254 14 5 0 255 14 5 1 7 14 5 1 8 14 5 1 14 14 5 1 18 14 5 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 14 5 1 29 14 5 1 30 14 5 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 14 5 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[0 4 6 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 14 9 0 134 14 9 0 135 14 9 0 137 9 141 0 238 14 9 0 244 14 9 0 245 14 9 0 246 14 9 0 247 14 9 0 248 14 9 0 249 14 9 0 250 14 9 0 251 14 9 0 254 14 9 0 255 14 9 1 7 14 9 1 8 14 9 1 14 14 9 1 18 14 9 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 14 9 1 29 14 9 1 30 14 9 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 14 9 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[0 4 10 0 69] 
#[0 4 14 0 1 0 5 0 11 0 12 0 13 0 15 0 30 0 31 0 35 0 42 0 44 0 45 0 49 0 53 0 60 0 63 0 66 0 69 0 70 0 72 0 77 0 87 0 90 0 97 0 104 0 112 0 113 0 126 0 127 0 129] 
#[1 14 13 0 19 4 18 0 31 4 18 0 35 4 18 0 104] 
#[0 4 22 0 19 0 31 0 35 0 104] 
#[0 4 26 0 19 0 31 0 35 0 104] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 14 17 0 134 14 17 0 135 14 17 0 137 1 213 0 235 14 17 1 69 14 17 1 71 14 17 1 72 14 17 1 73 14 17 1 74 14 17 1 77 14 17 1 78 14 17 1 79 14 17 1 80 14 17 1 81 14 21 1 82 14 17 1 90 14 17 1 91 14 17 1 92 14 17 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 14 17 1 121 14 25 1 124 2 57 1 125 2 37 1 131] 
#[0 14 29 0 29] 
#[1 1 90 0 17 0 123 0 29] 
#[0 0 34 0 53 0 77 0 112 0 113] 
#[0 14 37 0 53 0 77 0 112 0 113 1 131] 
#[1 14 41 0 13 4 30 0 19 14 45 0 35 14 49 0 104 4 30 0 108 14 53 0 202 14 57 0 203 14 61 0 204] 
#[0 4 34 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 14 65 0 19 4 38 0 108 14 69 0 199] 
#[0 4 42 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 14 73 0 108] 
#[1 1 6 0 3 1 6 0 53 1 6 0 60 1 6 0 77 1 6 0 84 14 77 0 108 1 6 0 112 1 6 0 113 5 133 0 179 14 81 0 198 5 141 0 201] 
#[0 4 46 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 14 85 0 108] 
#[0 4 50 0 31] 
#[0 4 54 0 31] 
#[0 4 58 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 4 62 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 88 0 90 0 97 0 108 0 112 0 113] 
#[0 4 66 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 88 0 90 0 97 0 108 0 112 0 113] 
#[0 4 70 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 88 0 90 0 97 0 108 0 112 0 113] 
#[1 0 37 0 52 5 169 0 58 0 53 0 61 1 41 0 66 0 10 0 69 0 85 0 88 5 173 0 97 14 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 14 93 0 207] 
#[0 4 74 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 4 78 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 88 0 90 0 97 0 108 0 112 0 113] 
#[0 4 82 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 88 0 90 0 97 0 108 0 112 0 113] 
#[0 4 86 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 88 0 90 0 97 0 108 0 112 0 113] 
#[0 4 90 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 2 141 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 5 169 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 0 85 0 88 1 1 0 90 5 173 0 97 14 97 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 5 181 0 141 5 185 0 158 5 189 0 170 0 177 0 171 0 181 0 172 0 185 0 173 5 193 0 207 8 249 0 221 0 249 0 238 0 253 1 104 1 1 1 107 5 205 1 130 1 1 1 131] 
#[1 3 61 0 101 1 118 0 104 14 101 0 210 14 101 0 229] 
#[1 0 127 0 14 2 246 0 17 2 246 0 19] 
#[0 4 94 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 4 98 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 4 102 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 14 109 0 134 14 109 0 135 14 109 0 137 9 141 0 238 14 109 0 244 14 109 0 245 14 109 0 246 14 109 0 247 14 109 0 248 14 109 0 249 14 109 0 250 14 109 0 251 14 109 0 254 14 109 0 255 14 109 1 7 14 109 1 8 14 109 1 14 14 109 1 18 14 109 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 14 109 1 29 14 109 1 30 14 109 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 14 109 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 14 113 0 81 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 14 117 0 134 14 117 0 135 14 117 0 137 9 141 0 238 14 117 0 244 14 117 0 245 14 117 0 246 14 117 0 247 14 117 0 248 14 117 0 249 14 117 0 250 14 117 0 251 14 117 0 254 14 117 0 255 14 117 1 7 14 117 1 8 14 117 1 14 14 117 1 18 14 117 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 14 117 1 29 14 117 1 30 14 117 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 14 117 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 14 121 0 81 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 14 125 0 134 14 125 0 135 14 125 0 137 9 141 0 238 14 125 0 244 14 125 0 245 14 125 0 246 14 125 0 247 14 125 0 248 14 125 0 249 14 125 0 250 14 125 0 251 14 125 0 254 14 125 0 255 14 125 1 7 14 125 1 8 14 125 1 14 14 125 1 18 14 125 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 14 125 1 29 14 125 1 30 14 125 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 14 125 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 0 6 0 1 0 6 0 3 0 6 0 5 0 6 0 8 0 6 0 9 0 6 0 13 0 6 0 14 0 6 0 15 0 6 0 20 0 6 0 24 0 6 0 26 0 6 0 30 0 6 0 44 0 6 0 45 0 6 0 52 0 6 0 53 0 6 0 56 0 6 0 57 0 6 0 59 0 6 0 60 0 6 0 67 0 6 0 70 0 6 0 71 0 6 0 74 0 6 0 75 0 6 0 77 0 6 0 78 0 6 0 80 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 92 0 6 0 97 0 6 0 102 0 6 0 104 0 6 0 105 0 6 0 107 0 6 0 112 0 6 0 113 0 6 0 117 0 6 0 118 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 0 6 0 126 0 6 0 127 14 129 0 132 0 6 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 14 133 0 134 14 133 0 135 14 133 0 137 9 141 0 238 14 133 0 244 14 133 0 245 14 133 0 246 14 133 0 247 14 133 0 248 14 133 0 249 14 133 0 250 14 133 0 251 14 133 0 254 14 133 0 255 14 133 1 7 14 133 1 8 14 133 1 14 14 133 1 18 14 133 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 14 133 1 29 14 133 1 30 14 133 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 14 133 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 14 137 0 134 14 137 0 135 14 137 0 137 9 141 0 238 14 137 0 244 14 137 0 245 14 137 0 246 14 137 0 247 14 137 0 248 14 137 0 249 14 137 0 250 14 137 0 251 14 137 0 254 14 137 0 255 14 137 1 7 14 137 1 8 14 137 1 14 14 137 1 18 14 137 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 14 137 1 29 14 137 1 30 14 137 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 14 137 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 4 106 0 2 2 141 0 3 2 37 0 5 4 106 0 6 4 106 0 7 9 37 0 8 9 41 0 9 4 106 0 10 9 45 0 13 4 106 0 14 9 49 0 15 4 106 0 16 4 106 0 17 4 106 0 18 4 106 0 19 9 53 0 20 4 106 0 21 4 106 0 23 4 106 0 27 4 106 0 28 9 65 0 30 4 106 0 31 4 106 0 32 4 106 0 33 4 106 0 34 4 106 0 35 4 106 0 36 4 106 0 37 4 106 0 38 4 106 0 39 4 106 0 40 4 106 0 41 4 106 0 42 9 237 0 44 9 69 0 45 4 106 0 46 4 106 0 47 4 106 0 48 4 106 0 51 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 4 106 0 64 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 0 131 0 104 9 125 0 105 4 106 0 106 9 129 0 107 4 106 0 108 4 106 0 109 4 106 0 110 4 106 0 111 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 4 106 0 128 4 106 0 129 14 141 0 134 14 141 0 135 14 141 0 137 9 141 0 238 14 141 0 244 14 141 0 245 14 141 0 246 14 141 0 247 14 141 0 248 14 141 0 249 14 141 0 250 14 141 0 251 14 141 0 254 14 141 0 255 14 141 1 7 14 141 1 8 14 141 1 14 14 141 1 18 14 141 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 14 141 1 29 14 141 1 30 14 141 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 14 141 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 14 145 0 134 14 145 0 135 14 145 0 137 9 141 0 238 14 145 0 244 14 145 0 245 14 145 0 246 14 145 0 247 14 145 0 248 14 145 0 249 14 145 0 250 14 145 0 251 14 145 0 254 14 145 0 255 14 145 1 7 14 145 1 8 14 145 1 14 14 145 1 18 14 145 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 14 145 1 29 14 145 1 30 14 145 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 14 145 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 3 157 0 5 9 237 0 44 3 157 0 53 3 157 0 60 3 157 0 77 3 157 0 87 3 157 0 90 3 157 0 112 3 157 0 113 3 157 1 107 14 149 1 111 9 237 1 112 3 157 1 131] 
#[1 0 6 0 1 0 6 0 3 0 6 0 5 0 6 0 8 0 6 0 9 0 6 0 13 0 6 0 15 0 6 0 20 0 6 0 24 0 6 0 26 0 6 0 30 0 6 0 44 0 6 0 45 0 6 0 46 0 6 0 52 0 6 0 53 0 6 0 56 0 6 0 57 0 6 0 59 0 6 0 60 0 6 0 67 0 6 0 70 0 6 0 71 0 6 0 74 0 6 0 75 0 6 0 77 0 6 0 78 0 6 0 80 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 92 0 6 0 97 0 6 0 102 0 6 0 104 0 6 0 105 0 6 0 107 0 6 0 112 0 6 0 113 0 6 0 117 0 6 0 118 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 0 6 0 126 0 6 0 127 14 153 0 132 0 6 1 136] 
#[1 14 157 0 80 6 197 0 104 14 161 0 251] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 14 165 0 134 14 165 0 135 14 165 0 137 9 141 0 238 14 165 0 244 14 165 0 245 14 165 0 246 14 165 0 247 14 165 0 248 14 165 0 249 14 165 0 250 14 165 0 251 14 165 0 254 14 165 0 255 14 165 1 7 14 165 1 8 14 165 1 14 14 165 1 18 14 165 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 14 165 1 29 14 165 1 30 14 165 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 14 165 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 4 110 0 2 2 141 0 3 2 37 0 5 4 110 0 6 4 110 0 7 9 37 0 8 9 41 0 9 4 110 0 10 9 45 0 13 4 110 0 14 9 49 0 15 4 110 0 16 4 110 0 17 4 110 0 18 4 110 0 19 9 53 0 20 4 110 0 21 4 110 0 23 9 57 0 24 9 61 0 26 4 110 0 27 4 110 0 28 9 65 0 30 4 110 0 31 4 110 0 32 4 110 0 33 4 110 0 34 4 110 0 35 4 110 0 36 4 110 0 37 4 110 0 38 4 110 0 39 4 110 0 40 4 110 0 41 4 110 0 42 9 237 0 44 9 69 0 45 4 110 0 46 4 110 0 47 4 110 0 48 4 110 0 51 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 4 110 0 64 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 0 135 0 104 9 125 0 105 4 110 0 106 9 129 0 107 4 110 0 108 4 110 0 109 4 110 0 110 4 110 0 111 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 14 169 0 126 3 125 0 127 4 110 0 128 4 110 0 129 14 173 0 134 14 173 0 135 14 173 0 137 9 141 0 238 14 173 0 244 14 173 0 245 14 173 0 246 14 173 0 247 14 173 0 248 14 173 0 249 14 173 0 250 14 173 0 251 14 173 0 254 14 173 0 255 14 173 1 7 14 173 1 8 14 173 1 14 14 173 1 18 14 173 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 14 173 1 29 14 173 1 30 14 173 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 14 173 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 4 114 0 2 2 141 0 3 2 37 0 5 4 114 0 6 4 114 0 7 9 37 0 8 9 41 0 9 4 114 0 10 9 45 0 13 4 114 0 14 9 49 0 15 4 114 0 16 4 114 0 17 4 114 0 18 4 114 0 19 9 53 0 20 4 114 0 21 4 114 0 23 9 57 0 24 9 61 0 26 4 114 0 27 4 114 0 28 9 65 0 30 4 114 0 31 4 114 0 32 4 114 0 33 4 114 0 34 4 114 0 35 4 114 0 36 4 114 0 37 4 114 0 38 4 114 0 39 4 114 0 40 4 114 0 41 4 114 0 42 9 237 0 44 9 69 0 45 4 114 0 46 4 114 0 47 4 114 0 48 4 114 0 51 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 4 114 0 64 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 0 139 0 104 9 125 0 105 4 114 0 106 9 129 0 107 4 114 0 108 4 114 0 109 4 114 0 110 4 114 0 111 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 14 177 0 126 3 125 0 127 4 114 0 128 4 114 0 129 14 181 0 134 14 181 0 135 14 181 0 137 9 141 0 238 14 181 0 244 14 181 0 245 14 181 0 246 14 181 0 247 14 181 0 248 14 181 0 249 14 181 0 250 14 181 0 251 14 181 0 254 14 181 0 255 14 181 1 7 14 181 1 8 14 181 1 14 14 181 1 18 14 181 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 14 181 1 29 14 181 1 30 14 181 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 14 181 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 15 17 0 134 15 17 0 135 15 17 0 137 15 5 0 248 15 9 0 249 15 13 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 15 17 1 65 15 17 1 66 15 17 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 15 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 15 101 0 134 15 101 0 135 15 101 0 137 9 141 0 238 15 101 0 244 15 101 0 245 15 101 0 246 15 101 0 247 15 101 0 248 15 101 0 249 15 101 0 250 15 101 0 251 15 101 0 254 15 101 0 255 15 101 1 7 15 101 1 8 15 101 1 14 15 101 1 18 15 101 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 15 101 1 29 15 101 1 30 15 101 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 15 101 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 15 17 0 134 15 17 0 135 15 17 0 137 15 5 0 248 15 9 0 249 15 105 1 37 15 109 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 15 17 1 65 15 17 1 66 15 17 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[1 6 197 0 104 15 113 0 251] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 15 117 0 134 15 117 0 135 15 117 0 137 9 141 0 238 15 117 0 244 15 117 0 245 15 117 0 246 15 117 0 247 15 117 0 248 15 117 0 249 15 117 0 250 15 117 0 251 15 117 0 254 15 117 0 255 15 117 1 7 15 117 1 8 15 117 1 14 15 117 1 18 15 117 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 15 117 1 29 15 117 1 30 15 117 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 15 117 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 15 121 0 105 15 125 0 107] 
#[1 9 33 0 1 4 118 0 2 2 141 0 3 2 37 0 5 4 118 0 6 4 118 0 7 9 37 0 8 9 41 0 9 4 118 0 10 9 45 0 13 4 118 0 14 9 49 0 15 4 118 0 16 4 118 0 17 4 118 0 18 4 118 0 19 9 53 0 20 4 118 0 21 4 118 0 23 9 57 0 24 9 61 0 26 4 118 0 27 4 118 0 28 9 65 0 30 4 118 0 31 4 118 0 32 4 118 0 33 4 118 0 34 4 118 0 35 4 118 0 36 4 118 0 37 4 118 0 38 4 118 0 39 4 118 0 40 4 118 0 41 4 118 0 42 9 237 0 44 9 69 0 45 4 118 0 46 4 118 0 47 4 118 0 48 4 118 0 51 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 4 118 0 64 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 0 143 0 104 9 125 0 105 4 118 0 106 9 129 0 107 4 118 0 108 4 118 0 109 4 118 0 110 4 118 0 111 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 4 118 0 128 4 118 0 129 15 129 0 134 15 129 0 135 15 129 0 137 9 141 0 238 15 129 0 244 15 129 0 245 15 129 0 246 15 129 0 247 15 129 0 248 15 129 0 249 15 129 0 250 15 129 0 251 15 129 0 254 15 129 0 255 15 129 1 7 15 129 1 8 15 129 1 14 15 129 1 18 15 129 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 15 129 1 29 15 129 1 30 15 129 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 15 129 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 6 197 0 104 15 133 0 251] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 15 137 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 15 141 0 134 15 141 0 135 15 141 0 137 9 141 0 238 15 141 0 244 15 141 0 245 15 141 0 246 15 141 0 247 15 141 0 248 15 141 0 249 15 141 0 250 15 141 0 251 15 141 0 254 15 141 0 255 15 141 1 7 15 141 1 8 15 141 1 14 15 141 1 18 15 141 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 15 141 1 29 15 141 1 30 15 141 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 15 141 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 1 6 0 3 1 6 0 5 1 6 0 9 1 6 0 13 1 6 0 20 1 6 0 24 1 6 0 30 1 6 0 44 1 6 0 45 1 6 0 49 1 6 0 53 1 6 0 56 1 6 0 60 1 6 0 67 1 6 0 77 1 6 0 81 1 6 0 85 1 6 0 87 1 6 0 90 1 6 0 92 0 147 0 105 1 6 0 112 1 6 0 113 1 6 0 117 1 6 0 118 1 6 0 120 1 6 0 121 1 6 0 122 1 6 0 123 1 6 0 125 1 6 0 127 1 6 0 129 15 149 0 179 15 153 1 19 15 157 1 22 1 6 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 15 161 0 22 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 15 165 0 134 15 165 0 135 15 165 0 137 9 141 0 238 15 165 0 244 15 165 0 245 15 165 0 246 15 165 0 247 15 165 0 248 15 165 0 249 15 165 0 250 15 165 0 251 15 165 0 254 15 165 0 255 15 165 1 7 15 165 1 8 15 165 1 14 15 165 1 18 15 165 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 15 165 1 29 15 165 1 30 15 165 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 15 165 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[0 15 169 0 29] 
#[0 4 122 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 15 177 0 134 15 177 0 135 15 177 0 137 9 141 0 238 15 173 0 244 15 177 0 245 15 181 0 246 15 177 0 247 15 177 0 248 15 177 0 249 15 177 0 250 15 181 0 251 15 181 0 254 15 181 0 255 15 177 1 7 15 177 1 8 15 177 1 14 15 177 1 18 15 181 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 15 181 1 29 15 181 1 30 15 181 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 15 177 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 33 0 46 16 37 0 47 16 41 0 48 16 45 0 51 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[0 4 126 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 4 130 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 4 134 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 4 138 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 4 142 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 4 146 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 4 150 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 4 154 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 4 158 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 4 162 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 4 166 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 4 170 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 4 174 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 4 178 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 4 182 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 4 186 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[1 9 89 0 70 9 101 0 75 9 121 0 102 16 81 1 24 16 85 1 25 16 89 1 26 16 93 1 27] 
#[0 4 190 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 4 194 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 4 198 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[1 4 202 0 2 4 202 0 6 4 202 0 7 4 202 0 9 4 202 0 10 16 97 0 13 4 202 0 14 4 202 0 15 4 202 0 16 4 202 0 17 4 202 0 18 4 202 0 19 4 202 0 20 4 202 0 21 4 202 0 23 4 202 0 24 4 202 0 26 4 202 0 27 4 202 0 28 4 202 0 31 4 202 0 32 4 202 0 33 4 202 0 34 4 202 0 35 4 202 0 36 4 202 0 37 4 202 0 38 4 202 0 39 4 202 0 40 4 202 0 41 4 202 0 42 4 202 0 46 4 202 0 47 4 202 0 48 4 202 0 51 4 202 0 64 0 151 0 104 4 202 0 106 4 202 0 107 4 202 0 108 4 202 0 109 4 202 0 110 4 202 0 111 4 202 0 127 4 202 0 128 4 202 0 129] 
#[1 4 206 0 2 4 206 0 6 4 206 0 7 4 206 0 9 4 206 0 10 4 206 0 13 4 206 0 14 4 206 0 15 4 206 0 16 4 206 0 17 4 206 0 18 4 206 0 19 4 206 0 20 4 206 0 21 4 206 0 23 4 206 0 24 4 206 0 25 4 206 0 26 4 206 0 27 4 206 0 28 4 206 0 29 16 105 0 30 4 206 0 31 4 206 0 32 4 206 0 33 4 206 0 34 4 206 0 35 4 206 0 36 4 206 0 37 4 206 0 38 4 206 0 39 4 206 0 40 4 206 0 41 4 206 0 42 4 206 0 46 4 206 0 47 4 206 0 48 4 206 0 51 4 206 0 64 4 206 0 71 4 206 0 73 4 206 0 104 4 206 0 105 4 206 0 106 4 206 0 107 4 206 0 108 4 206 0 109 4 206 0 110 4 206 0 111 4 206 0 127 4 206 0 128 4 206 0 129 16 109 1 109 16 113 1 110] 
#[1 4 210 0 2 4 210 0 6 4 210 0 7 4 210 0 9 4 210 0 10 4 210 0 13 4 210 0 14 4 210 0 15 4 210 0 16 4 210 0 17 4 210 0 18 4 210 0 19 4 210 0 20 4 210 0 21 4 210 0 23 4 210 0 24 4 210 0 25 4 210 0 26 4 210 0 27 4 210 0 28 4 210 0 29 0 155 0 30 4 210 0 31 4 210 0 32 4 210 0 33 4 210 0 34 4 210 0 35 4 210 0 36 4 210 0 37 4 210 0 38 4 210 0 39 4 210 0 40 4 210 0 41 4 210 0 42 4 210 0 46 4 210 0 47 4 210 0 48 4 210 0 51 4 210 0 64 4 210 0 71 4 210 0 73 4 210 0 104 4 210 0 105 4 210 0 106 4 210 0 107 4 210 0 108 4 210 0 109 4 210 0 110 4 210 0 111 4 210 0 127 4 210 0 128 4 210 0 129] 
#[0 4 214 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 16 105 0 30 16 109 1 109 16 121 1 110] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 16 125 0 134 16 125 0 135 16 125 0 137 1 213 0 235 16 125 1 69 16 125 1 71 16 125 1 72 16 125 1 73 16 125 1 74 16 125 1 77 16 125 1 78 16 125 1 79 16 125 1 80 16 125 1 81 2 1 1 82 16 125 1 90 16 125 1 91 16 125 1 92 16 125 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 16 125 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 3 61 0 101 1 118 0 104 16 129 0 210 16 129 0 229] 
#[1 2 41 0 5 3 101 0 30 2 41 0 44 2 41 0 53 2 41 0 60 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 2 41 1 107 2 41 1 112 16 133 1 124 2 57 1 125 2 41 1 131] 
#[0 9 21 0 14] 
#[0 9 25 0 14] 
#[0 16 137 0 29] 
#[1 4 218 0 11 4 218 0 12 4 218 0 19 4 218 0 126 4 218 0 128 16 141 1 100 16 145 1 102] 
#[1 2 41 0 5 2 33 0 11 2 33 0 12 3 189 0 13 4 222 0 19 3 101 0 30 16 149 0 35 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 2 33 0 126 4 222 0 128 3 193 0 235 16 153 1 95 2 25 1 98 2 25 1 99 2 33 1 103 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 16 157 0 134 16 157 0 135 16 157 0 137 1 213 0 235 16 157 1 69 16 157 1 71 16 157 1 72 16 157 1 73 16 157 1 74 16 157 1 77 16 157 1 78 16 157 1 79 16 157 1 80 16 157 1 81 2 1 1 82 16 157 1 90 16 157 1 91 16 157 1 92 16 157 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 16 157 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 3 30 0 3 3 30 0 53 3 30 0 58 3 30 0 77 3 30 0 112 3 30 0 113 3 30 0 126 16 161 0 128] 
#[0 4 226 0 1 0 5 0 11 0 12 0 13 0 15 0 29 0 30 0 31 0 35 0 42 0 44 0 45 0 49 0 53 0 58 0 60 0 63 0 66 0 69 0 70 0 72 0 77 0 87 0 90 0 97 0 101 0 104 0 112 0 113 0 126 0 127 0 129] 
#[0 4 230 0 1 0 5 0 11 0 12 0 13 0 15 0 29 0 30 0 31 0 35 0 42 0 44 0 45 0 49 0 53 0 58 0 60 0 63 0 66 0 69 0 70 0 72 0 77 0 87 0 90 0 97 0 101 0 104 0 112 0 113 0 126 0 127 0 129] 
#[0 16 165 0 128] 
#[0 4 234 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 16 169 0 134 16 169 0 135 16 169 0 137 1 213 0 235 16 169 1 69 16 169 1 71 16 169 1 72 16 169 1 73 16 169 1 74 16 169 1 77 16 169 1 78 16 169 1 79 16 169 1 80 16 169 1 81 2 1 1 82 16 169 1 90 16 169 1 91 16 169 1 92 16 169 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 16 169 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 16 173 0 70] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 16 177 0 134 16 177 0 135 16 177 0 137 1 213 0 235 16 177 1 69 16 177 1 71 16 177 1 72 16 177 1 73 16 177 1 74 16 177 1 77 16 177 1 78 16 177 1 79 16 177 1 80 16 177 1 81 2 1 1 82 16 177 1 90 16 177 1 91 16 177 1 92 16 177 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 16 177 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 16 181 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 16 185 0 211 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 16 189 0 132] 
#[1 3 61 0 101 1 118 0 104 16 193 0 210 16 193 0 229] 
#[1 1 6 0 1 1 6 0 3 1 6 0 5 1 6 0 11 1 6 0 12 1 6 0 13 16 197 0 14 1 6 0 15 1 6 0 30 1 6 0 42 1 6 0 44 1 6 0 45 1 6 0 49 1 6 0 53 1 6 0 60 1 6 0 63 1 6 0 66 1 6 0 69 1 6 0 70 1 6 0 72 1 6 0 77 1 6 0 87 1 6 0 90 1 6 0 97 1 6 0 112 1 6 0 113 1 6 0 126 1 6 0 127 1 6 0 129 10 121 0 179 16 201 1 84 10 129 1 85 10 133 1 88 10 137 1 89] 
#[0 4 238 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 4 242 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[1 2 141 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 16 205 0 141 16 209 0 170 0 177 0 171 0 181 0 172 0 185 0 173 16 213 0 185 16 217 0 206 2 161 0 238 0 253 1 104 1 1 1 107 16 221 1 130 1 1 1 131] 
#[0 4 246 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[0 4 250 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[0 4 254 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[1 2 141 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 16 225 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 16 229 0 236 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[0 5 2 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[1 0 37 0 52 0 45 0 58 0 53 0 61 1 41 0 66 0 10 0 69 0 101 0 94 5 173 0 97 16 233 0 170 0 177 0 171 0 181 0 172 0 185 0 173 16 237 0 185 16 241 0 206] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 16 245 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 16 249 0 211 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[1 5 6 0 2 5 6 0 6 5 6 0 7 5 6 0 9 5 6 0 10 5 6 0 14 5 6 0 15 5 6 0 16 5 6 0 17 5 6 0 18 5 6 0 19 5 6 0 20 5 6 0 21 16 253 0 22 5 6 0 23 5 6 0 24 5 6 0 26 5 6 0 27 5 6 0 28 5 6 0 29 5 6 0 30 5 6 0 31 5 6 0 32 5 6 0 33 5 6 0 34 5 6 0 35 5 6 0 36 5 6 0 37 5 6 0 38 5 6 0 39 5 6 0 40 5 6 0 41 5 6 0 42 5 6 0 46 5 6 0 47 5 6 0 48 5 6 0 51 5 6 0 64 5 6 0 70 5 6 0 101 5 6 0 104 5 6 0 105 5 6 0 106 5 6 0 107 5 6 0 108 5 6 0 109 5 6 0 110 5 6 0 111 5 6 0 127 5 6 0 128 5 6 0 129 17 1 1 83] 
#[1 3 113 0 1 2 141 0 3 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 17 5 0 49 17 13 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 17 13 0 77 2 37 0 87 2 37 0 90 1 181 0 97 17 13 0 112 17 13 0 113 2 33 0 126 3 125 0 127 1 193 0 129 17 9 0 134 17 9 0 135 17 9 0 137 1 213 0 235 6 65 0 238 17 9 1 69 17 9 1 71 17 9 1 72 17 9 1 73 17 9 1 74 17 9 1 77 17 9 1 78 17 9 1 79 17 9 1 80 17 9 1 81 2 1 1 82 17 9 1 90 17 9 1 91 17 9 1 92 17 9 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 17 9 1 121 3 177 1 124 2 57 1 125 17 13 1 131] 
#[0 17 17 0 14] 
#[0 5 10 0 14] 
#[1 5 14 0 14 5 14 0 19 17 21 1 87] 
#[0 5 18 0 14] 
#[0 5 22 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 17 25 0 134 17 25 0 135 17 25 0 137 1 213 0 235 17 25 1 69 17 25 1 71 17 25 1 72 17 25 1 73 17 25 1 74 17 25 1 77 17 25 1 78 17 25 1 79 17 25 1 80 17 25 1 81 2 1 1 82 17 25 1 90 17 25 1 91 17 25 1 92 17 25 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 17 25 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 5 26 0 14 17 29 0 19 17 33 1 128] 
#[1 5 30 0 2 5 30 0 6 5 30 0 7 5 30 0 9 5 30 0 10 5 30 0 14 5 30 0 15 5 30 0 16 5 30 0 17 5 30 0 18 5 30 0 19 5 30 0 20 5 30 0 21 17 37 0 22 5 30 0 23 5 30 0 24 5 30 0 26 5 30 0 27 5 30 0 28 5 30 0 29 5 30 0 30 5 30 0 31 5 30 0 32 5 30 0 33 5 30 0 34 5 30 0 35 5 30 0 36 5 30 0 37 5 30 0 38 5 30 0 39 5 30 0 40 5 30 0 41 5 30 0 42 5 30 0 46 5 30 0 47 5 30 0 48 5 30 0 51 5 30 0 64 5 30 0 70 5 30 0 101 5 30 0 104 5 30 0 105 5 30 0 106 5 30 0 107 5 30 0 108 5 30 0 109 5 30 0 110 5 30 0 111 5 30 0 127 5 30 0 128 5 30 0 129] 
#[0 5 34 0 19 0 128] 
#[1 9 33 0 1 0 159 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 17 41 0 31 9 237 0 44 9 69 0 45 17 45 0 52 0 41 0 53 9 77 0 56 9 81 0 57 0 45 0 58 9 85 0 59 0 49 0 60 0 53 0 61 0 57 0 65 0 61 0 66 6 189 0 67 0 10 0 69 9 89 0 70 9 93 0 71 0 65 0 72 0 163 0 74 9 101 0 75 0 69 0 77 9 105 0 78 0 73 0 79 9 109 0 80 0 77 0 84 9 113 0 86 2 37 0 87 0 85 0 88 0 89 0 89 2 37 0 90 0 97 0 91 6 193 0 92 0 101 0 94 0 105 0 96 17 49 0 97 0 113 0 99 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 17 53 0 108 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 17 93 0 134 17 57 0 135 17 61 0 137 17 65 0 141 0 157 0 142 17 69 0 157 0 149 0 158 0 153 0 159 0 157 0 160 0 161 0 161 0 165 0 162 0 169 0 165 0 173 0 170 0 177 0 171 0 181 0 172 0 185 0 173 17 73 0 179 0 189 0 185 0 193 0 186 0 197 0 187 0 201 0 188 0 205 0 197 0 209 0 205 0 213 0 206 0 217 0 207 0 221 0 208 0 225 0 213 0 229 0 216 0 233 0 217 0 237 0 218 0 241 0 219 0 245 0 237 17 77 0 238 17 81 0 241 17 81 0 242 17 89 0 243 15 173 0 244 17 93 0 245 17 97 0 246 17 93 0 247 17 93 0 248 17 93 0 249 17 93 0 250 17 97 0 251 17 101 0 252 17 105 0 253 17 97 0 254 17 97 0 255 17 93 1 7 17 93 1 8 17 93 1 14 17 93 1 18 17 97 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 17 97 1 29 17 97 1 30 17 97 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 17 93 1 119 9 245 1 120 1 5 1 130 2 37 1 131 7 21 1 136] 
#[1 17 109 0 19 17 113 0 128 17 117 1 114] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 17 121 0 134 17 121 0 135 17 121 0 137 1 213 0 235 17 121 1 69 17 121 1 71 17 121 1 72 17 121 1 73 17 121 1 74 17 121 1 77 17 121 1 78 17 121 1 79 17 121 1 80 17 121 1 81 2 1 1 82 17 121 1 90 17 121 1 91 17 121 1 92 17 121 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 17 121 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 17 125 0 104] 
#[1 5 38 0 1 5 38 0 2 5 38 0 3 5 38 0 4 5 38 0 5 5 38 0 6 5 38 0 7 5 38 0 9 5 38 0 10 5 38 0 11 5 38 0 12 5 38 0 13 5 38 0 14 5 38 0 15 5 38 0 16 5 38 0 17 5 38 0 18 5 38 0 19 5 38 0 20 5 38 0 21 5 38 0 22 5 38 0 23 5 38 0 24 5 38 0 25 5 38 0 26 5 38 0 27 5 38 0 28 5 38 0 29 5 38 0 30 5 38 0 31 5 38 0 32 5 38 0 33 5 38 0 34 5 38 0 35 5 38 0 36 5 38 0 37 5 38 0 38 5 38 0 39 5 38 0 40 5 38 0 41 5 38 0 42 5 38 0 43 5 38 0 44 5 38 0 45 5 38 0 47 5 38 0 48 5 38 0 49 5 38 0 50 5 38 0 51 5 38 0 52 5 38 0 53 5 38 0 54 5 38 0 55 5 38 0 56 5 38 0 57 5 38 0 58 5 38 0 59 5 38 0 60 5 38 0 62 5 38 0 63 5 38 0 64 5 38 0 65 5 38 0 66 5 38 0 67 5 38 0 68 5 38 0 69 5 38 0 70 5 38 0 71 5 38 0 72 5 38 0 73 5 38 0 74 5 38 0 75 5 38 0 76 5 38 0 77 5 38 0 78 5 38 0 79 5 38 0 80 5 38 0 81 5 38 0 82 5 38 0 83 5 38 0 84 5 38 0 85 5 38 0 86 5 38 0 87 5 38 0 88 5 38 0 89 5 38 0 90 5 38 0 91 5 38 0 92 5 38 0 93 5 38 0 94 5 38 0 95 5 38 0 96 5 38 0 97 5 38 0 98 5 38 0 99 5 38 0 100 5 38 0 101 5 38 0 102 5 38 0 103 5 38 0 104 5 38 0 105 5 38 0 106 5 38 0 107 5 38 0 112 5 38 0 113 5 38 0 117 5 38 0 118 5 38 0 120 5 38 0 121 5 38 0 122 5 38 0 123 5 38 0 125 5 38 0 126 5 38 0 127 5 38 0 128 5 38 0 129 17 129 0 149 5 38 1 136] 
#[1 5 38 0 1 5 38 0 2 5 38 0 3 5 38 0 4 5 38 0 5 5 38 0 6 5 38 0 7 5 38 0 9 5 38 0 10 5 38 0 11 5 38 0 12 5 38 0 13 5 38 0 15 5 38 0 16 5 38 0 17 5 38 0 18 5 38 0 19 5 38 0 20 5 38 0 21 5 38 0 22 5 38 0 23 5 38 0 24 5 38 0 25 5 38 0 26 5 38 0 27 5 38 0 28 5 38 0 29 5 38 0 30 5 38 0 31 5 38 0 32 5 38 0 33 5 38 0 34 5 38 0 35 5 38 0 36 5 38 0 37 5 38 0 38 5 38 0 39 5 38 0 40 5 38 0 41 5 38 0 42 5 38 0 43 5 38 0 44 5 38 0 45 5 38 0 46 5 38 0 47 5 38 0 48 5 38 0 49 5 38 0 50 5 38 0 51 5 38 0 52 5 38 0 53 5 38 0 54 5 38 0 55 5 38 0 56 5 38 0 57 5 38 0 58 5 38 0 59 5 38 0 60 5 38 0 62 5 38 0 63 5 38 0 64 5 38 0 65 5 38 0 66 5 38 0 67 5 38 0 68 5 38 0 69 5 38 0 70 5 38 0 71 5 38 0 72 5 38 0 73 5 38 0 74 5 38 0 75 5 38 0 76 5 38 0 77 5 38 0 78 5 38 0 79 5 38 0 80 5 38 0 81 5 38 0 82 5 38 0 83 5 38 0 84 5 38 0 85 5 38 0 86 5 38 0 87 5 38 0 88 5 38 0 89 5 38 0 90 5 38 0 91 5 38 0 92 5 38 0 93 5 38 0 94 5 38 0 95 5 38 0 96 5 38 0 97 5 38 0 98 5 38 0 99 5 38 0 100 5 38 0 101 5 38 0 102 5 38 0 103 5 38 0 104 5 38 0 105 5 38 0 106 5 38 0 107 5 38 0 112 5 38 0 113 5 38 0 117 5 38 0 118 5 38 0 120 5 38 0 121 5 38 0 122 5 38 0 123 5 38 0 125 5 38 0 126 5 38 0 127 5 38 0 128 5 38 0 129 17 133 0 149 5 38 1 136] 
#[1 5 38 0 1 5 38 0 2 5 38 0 3 5 38 0 4 5 38 0 5 5 38 0 6 5 38 0 7 5 38 0 9 5 38 0 10 5 38 0 11 5 38 0 12 5 38 0 13 5 38 0 15 5 38 0 16 5 38 0 17 5 38 0 18 5 38 0 19 5 38 0 20 5 38 0 21 5 38 0 22 5 38 0 23 5 38 0 24 5 38 0 25 5 38 0 26 5 38 0 27 5 38 0 28 5 38 0 29 5 38 0 30 5 38 0 31 5 38 0 32 5 38 0 33 5 38 0 34 5 38 0 35 5 38 0 36 5 38 0 37 5 38 0 38 5 38 0 39 5 38 0 40 5 38 0 41 5 38 0 42 5 38 0 43 5 38 0 44 5 38 0 45 5 38 0 47 5 38 0 48 5 38 0 49 5 38 0 50 5 38 0 51 5 38 0 52 5 38 0 53 5 38 0 54 5 38 0 55 5 38 0 56 5 38 0 57 5 38 0 58 5 38 0 59 5 38 0 60 5 38 0 62 5 38 0 63 5 38 0 64 5 38 0 65 5 38 0 66 5 38 0 67 5 38 0 68 5 38 0 69 5 38 0 70 5 38 0 71 5 38 0 72 5 38 0 73 5 38 0 74 5 38 0 75 5 38 0 76 5 38 0 77 5 38 0 78 5 38 0 79 5 38 0 80 5 38 0 81 5 38 0 82 5 38 0 83 5 38 0 84 5 38 0 85 5 38 0 86 5 38 0 87 5 38 0 88 5 38 0 89 5 38 0 90 5 38 0 91 5 38 0 92 5 38 0 93 5 38 0 94 5 38 0 95 5 38 0 96 5 38 0 97 5 38 0 98 5 38 0 99 5 38 0 100 5 38 0 101 5 38 0 102 5 38 0 103 5 38 0 104 5 38 0 105 5 38 0 106 5 38 0 107 5 38 0 108 5 38 0 112 5 38 0 113 5 38 0 117 5 38 0 118 5 38 0 120 5 38 0 121 5 38 0 122 5 38 0 123 5 38 0 125 5 38 0 126 5 38 0 127 5 38 0 128 5 38 0 129 17 137 0 149 5 38 1 136] 
#[0 17 141 0 14] 
#[1 5 42 0 14 5 42 0 31 5 42 0 46 5 42 0 108 17 145 0 146] 
#[0 17 149 0 37] 
#[0 17 153 0 46] 
#[0 17 157 0 108] 
#[0 5 46 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 2 141 0 3 1 1 0 5 0 33 0 30 0 37 0 52 0 41 0 53 0 45 0 58 0 49 0 60 0 53 0 61 0 57 0 65 0 61 0 66 0 10 0 69 0 65 0 72 0 69 0 77 0 73 0 79 0 77 0 84 1 1 0 87 0 85 0 88 0 89 0 89 1 1 0 90 0 97 0 91 0 101 0 94 0 105 0 96 0 109 0 97 0 113 0 99 17 161 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 0 157 0 141 0 157 0 142 2 145 0 157 0 149 0 158 0 153 0 159 0 157 0 160 0 161 0 161 0 165 0 162 0 169 0 165 0 173 0 170 0 177 0 171 0 181 0 172 0 185 0 173 0 189 0 185 0 193 0 186 0 197 0 187 0 201 0 188 0 205 0 197 0 209 0 205 0 213 0 206 0 217 0 207 0 221 0 208 0 225 0 213 0 229 0 216 0 233 0 217 0 237 0 218 0 241 0 219 0 249 0 238 0 253 1 104 1 1 1 107 1 5 1 130 1 1 1 131] 
#[0 5 50 0 1 0 5 0 11 0 12 0 13 0 15 0 30 0 42 0 44 0 45 0 49 0 52 0 53 0 58 0 60 0 61 0 63 0 65 0 66 0 69 0 70 0 72 0 77 0 79 0 87 0 88 0 89 0 90 0 91 0 94 0 96 0 97 0 99 0 112 0 113 0 126 0 127 0 129] 
#[1 17 165 0 31 17 169 0 35] 
#[0 5 54 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 17 173 0 134 17 173 0 135 17 173 0 137 9 141 0 238 17 173 0 244 17 173 0 245 17 173 0 246 17 173 0 247 17 173 0 248 17 173 0 249 17 173 0 250 17 173 0 251 17 173 0 254 17 173 0 255 17 173 1 7 17 173 1 8 17 173 1 14 17 173 1 18 17 173 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 17 173 1 29 17 173 1 30 17 173 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 17 173 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[0 5 58 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 17 177 0 31] 
#[0 5 62 0 14 0 19] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 17 181 0 134 17 181 0 135 17 181 0 137 1 213 0 235 17 181 1 69 17 181 1 71 17 181 1 72 17 181 1 73 17 181 1 74 17 181 1 77 17 181 1 78 17 181 1 79 17 181 1 80 17 181 1 81 2 1 1 82 17 181 1 90 17 181 1 91 17 181 1 92 17 181 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 17 181 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 17 185 0 31 3 61 0 101 17 189 0 229] 
#[1 5 66 0 14 17 193 0 19 17 197 0 194] 
#[0 17 201 0 53 0 77 0 112 0 113 1 131] 
#[0 17 205 0 29] 
#[0 5 70 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 17 209 0 19 5 74 0 108 17 213 0 190] 
#[1 17 217 0 31 3 61 0 101 17 221 0 229] 
#[0 17 225 0 14] 
#[0 5 78 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 17 229 0 108] 
#[0 5 82 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 1 6 0 3 1 6 0 53 1 6 0 60 1 6 0 77 1 6 0 84 17 233 0 108 1 6 0 112 1 6 0 113 7 101 0 179 17 237 0 189 7 109 0 192] 
#[0 5 86 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 17 241 0 108] 
#[0 17 245 0 104] 
#[0 5 90 0 31 0 101] 
#[0 17 249 0 31] 
#[1 1 118 0 31 3 61 0 101 17 253 0 210 17 253 0 229] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 18 5 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[1 3 61 0 101 1 118 0 104 18 9 0 210 18 9 0 229] 
#[1 1 118 0 31 3 61 0 101 18 13 0 210 18 13 0 229] 
#[1 7 145 0 29 2 110 0 31 2 110 0 101 7 149 0 214 18 17 0 215] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 18 21 0 132] 
#[0 5 98 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 18 25 0 134 18 25 0 135 18 25 0 137 1 213 0 235 18 25 1 69 18 25 1 71 18 25 1 72 18 25 1 73 18 25 1 74 18 25 1 77 18 25 1 78 18 25 1 79 18 25 1 80 18 25 1 81 2 1 1 82 18 25 1 90 18 25 1 91 18 25 1 92 18 25 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 18 25 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 18 29 0 31 18 33 0 35] 
#[0 5 102 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 18 37 0 31 18 41 0 35 3 61 0 101 18 45 0 229] 
#[0 18 49 0 31] 
#[0 5 106 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 18 53 0 134 18 53 0 135 18 53 0 137 1 213 0 235 18 53 1 69 18 53 1 71 18 53 1 72 18 53 1 73 18 53 1 74 18 53 1 77 18 53 1 78 18 53 1 79 18 53 1 80 18 53 1 81 2 1 1 82 18 53 1 90 18 53 1 91 18 53 1 92 18 53 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 18 53 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 18 57 0 31] 
#[0 5 110 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 18 61 0 108] 
#[1 1 6 0 3 1 6 0 53 1 6 0 60 1 6 0 77 1 6 0 84 1 6 0 112 1 6 0 113 7 101 0 179 18 65 0 189 7 109 0 192] 
#[0 18 69 0 108] 
#[1 2 41 0 5 2 33 0 11 2 33 0 12 3 189 0 13 3 101 0 30 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 106 0 101 2 106 0 104 2 41 0 112 2 41 0 113 2 33 0 126 18 73 0 209 3 193 0 235 7 141 1 95 2 25 1 98 2 25 1 99 2 33 1 103 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[1 2 41 0 5 2 33 0 11 2 33 0 12 3 189 0 13 7 145 0 29 3 101 0 30 2 110 0 31 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 110 0 101 2 41 0 112 2 41 0 113 2 33 0 126 7 149 0 214 18 77 0 215 3 193 0 235 18 81 1 95 2 25 1 98 2 25 1 99 2 33 1 103 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[0 18 85 0 104] 
#[1 18 89 0 29 18 93 0 35 3 61 0 101 1 118 0 104 18 97 0 210 18 97 0 229] 
#[0 5 114 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 2 141 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 5 169 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 0 85 0 88 1 1 0 90 5 173 0 97 18 101 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 5 181 0 141 5 185 0 158 5 189 0 170 0 177 0 171 0 181 0 172 0 185 0 173 5 193 0 207 8 249 0 221 0 249 0 238 0 253 1 104 1 1 1 107 5 205 1 130 1 1 1 131] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 5 169 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 0 85 0 88 1 1 0 90 5 173 0 97 18 105 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 5 181 0 141 5 185 0 158 5 189 0 170 0 177 0 171 0 181 0 172 0 185 0 173 5 193 0 207 18 109 0 220 5 201 0 221 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 5 205 1 130 1 1 1 131] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 18 113 0 134 18 113 0 135 18 113 0 137 1 213 0 235 18 113 1 69 18 113 1 71 18 113 1 72 18 113 1 73 18 113 1 74 18 113 1 77 18 113 1 78 18 113 1 79 18 113 1 80 18 113 1 81 2 1 1 82 18 113 1 90 18 113 1 91 18 113 1 92 18 113 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 18 113 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 18 117 0 70] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 18 121 0 134 18 121 0 135 18 121 0 137 1 213 0 235 18 121 1 69 18 121 1 71 18 121 1 72 18 121 1 73 18 121 1 74 18 121 1 77 18 121 1 78 18 121 1 79 18 121 1 80 18 121 1 81 2 1 1 82 18 121 1 90 18 121 1 91 18 121 1 92 18 121 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 18 121 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 18 125 0 70] 
#[1 2 41 0 5 3 101 0 30 2 41 0 44 2 41 0 53 2 41 0 60 2 41 0 77 2 41 0 87 2 41 0 90 2 41 0 112 2 41 0 113 2 41 1 107 2 41 1 112 18 129 1 124 2 57 1 125 2 41 1 131] 
#[0 18 133 0 70] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 18 137 0 134 18 137 0 135 18 137 0 137 1 213 0 235 18 137 1 69 18 137 1 71 18 137 1 72 18 137 1 73 18 137 1 74 18 137 1 77 18 137 1 78 18 137 1 79 18 137 1 80 18 137 1 81 2 1 1 82 18 137 1 90 18 137 1 91 18 137 1 92 18 137 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 18 137 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 3 61 0 101 1 118 0 104 18 141 0 210 18 141 0 229] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 0 41 0 53 0 45 0 58 0 49 0 60 0 53 0 61 0 57 0 65 0 61 0 66 0 10 0 69 0 65 0 72 0 69 0 77 0 73 0 79 0 77 0 84 1 1 0 87 0 85 0 88 0 89 0 89 1 1 0 90 0 97 0 91 0 101 0 94 0 105 0 96 0 109 0 97 0 113 0 99 18 145 0 108 1 1 0 112 1 1 0 113 18 149 0 133 0 129 0 135 0 133 0 137 0 157 0 141 0 157 0 142 0 145 0 157 0 149 0 158 0 153 0 159 0 157 0 160 0 161 0 161 0 165 0 162 0 169 0 165 0 173 0 170 0 177 0 171 0 181 0 172 0 185 0 173 0 189 0 185 0 193 0 186 0 197 0 187 0 201 0 188 0 205 0 197 0 209 0 205 0 213 0 206 0 217 0 207 0 221 0 208 0 225 0 213 0 229 0 216 0 233 0 217 0 237 0 218 0 241 0 219 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 1 5 1 130 1 1 1 131] 
#[1 3 61 0 101 1 118 0 104 18 153 0 210 18 153 0 229] 
#[1 1 118 0 31 3 61 0 101 18 157 0 210 18 157 0 229] 
#[1 7 145 0 29 2 110 0 31 2 110 0 101 7 149 0 214 18 161 0 215] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 18 165 0 132] 
#[1 2 41 0 5 2 33 0 11 2 33 0 12 3 189 0 13 3 101 0 30 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 106 0 101 2 106 0 104 2 41 0 112 2 41 0 113 2 33 0 126 18 169 0 209 3 193 0 235 7 141 1 95 2 25 1 98 2 25 1 99 2 33 1 103 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[1 2 41 0 5 2 33 0 11 2 33 0 12 3 189 0 13 7 145 0 29 3 101 0 30 2 110 0 31 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 110 0 101 2 41 0 112 2 41 0 113 2 33 0 126 7 149 0 214 18 173 0 215 3 193 0 235 18 177 1 95 2 25 1 98 2 25 1 99 2 33 1 103 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[0 18 181 0 104] 
#[1 11 233 0 19 3 234 0 108 11 237 0 167 18 185 0 169] 
#[1 1 1 0 5 2 121 0 15 2 125 0 30 1 1 0 53 1 1 0 60 1 1 0 77 1 1 0 87 1 1 0 90 2 129 0 104 5 118 0 108 1 1 0 112 1 1 0 113 18 189 0 166 2 137 1 104 1 1 1 107 1 1 1 131] 
#[0 5 122 0 19 0 108] 
#[0 18 193 0 108] 
#[0 5 126 0 19 0 31 0 108] 
#[1 2 130 0 19 2 130 0 108 18 197 0 168] 
#[1 18 201 0 22 18 205 0 31 3 61 0 101 6 197 0 104 18 209 0 184 18 213 0 229 18 217 0 251] 
#[0 18 221 0 14] 
#[1 5 130 0 14 18 225 0 19] 
#[1 3 113 0 1 2 141 0 3 2 37 0 5 14 185 0 9 2 33 0 11 2 33 0 12 18 229 0 13 1 137 0 15 14 193 0 20 14 197 0 24 18 233 0 25 18 237 0 30 1 145 0 42 19 29 0 44 18 241 0 45 18 245 0 49 15 89 0 53 14 209 0 56 2 37 0 60 1 165 0 63 1 169 0 66 14 213 0 67 0 42 0 69 1 173 0 70 1 177 0 72 15 89 0 77 18 249 0 81 14 221 0 85 18 253 0 87 2 37 0 90 14 225 0 92 1 181 0 97 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 2 33 0 126 3 125 0 127 19 1 0 129 19 5 0 134 19 5 0 135 19 5 0 137 19 9 0 180 19 13 0 181 19 17 0 183 1 213 0 235 6 65 0 238 15 5 0 248 15 9 0 249 19 21 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 15 17 1 65 15 17 1 66 15 17 1 68 19 25 1 69 19 25 1 71 19 25 1 72 19 25 1 73 19 25 1 74 19 25 1 77 19 25 1 78 19 25 1 79 19 25 1 80 19 25 1 81 2 1 1 82 19 25 1 90 19 25 1 91 19 25 1 92 19 25 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 19 29 1 112 15 85 1 119 19 33 1 120 19 25 1 121 3 177 1 124 2 57 1 125 15 89 1 131 15 93 1 136] 
#[1 5 134 0 14 5 134 0 19 19 37 0 177] 
#[1 1 6 0 1 1 6 0 3 1 6 0 5 1 6 0 9 1 6 0 11 1 6 0 12 1 6 0 13 19 41 0 14 1 6 0 15 1 6 0 20 1 6 0 24 1 6 0 25 1 6 0 30 1 6 0 42 1 6 0 44 1 6 0 45 1 6 0 49 1 6 0 53 1 6 0 56 1 6 0 60 1 6 0 63 1 6 0 66 1 6 0 67 1 6 0 69 1 6 0 70 1 6 0 72 1 6 0 77 1 6 0 81 1 6 0 85 1 6 0 87 1 6 0 90 1 6 0 92 1 6 0 97 1 6 0 105 1 6 0 112 1 6 0 113 1 6 0 117 1 6 0 118 1 6 0 120 1 6 0 121 1 6 0 122 1 6 0 123 1 6 0 125 1 6 0 126 1 6 0 127 1 6 0 129 19 45 0 175 12 5 0 178 12 9 0 179 12 13 0 182 1 6 1 136] 
#[0 5 138 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 142 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 146 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 150 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 154 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 158 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 162 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 166 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 170 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 178 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 182 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 5 186 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 190 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 194 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 198 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 202 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 206 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 210 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 214 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 218 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 222 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 226 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 230 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 234 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 238 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 242 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 246 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 250 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 5 254 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 2 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 6 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 10 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 14 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 18 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 22 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 26 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 30 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 34 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 38 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 42 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 46 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 50 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 54 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 58 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 62 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 66 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 70 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 74 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 78 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 82 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 86 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 90 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 94 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 98 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 102 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 106 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 110 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 114 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 118 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 122 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 126 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 130 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 134 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 138 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 142 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 146 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 150 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 154 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 158 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 162 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 166 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 170 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 178 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 182 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 186 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 190 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 194 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 198 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 202 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 206 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 210 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 214 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 218 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 222 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 226 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 230 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 234 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 238 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 242 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 246 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 250 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 6 254 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 7 2 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 7 6 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 7 10 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 7 14 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 7 18 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 7 22 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 7 26 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 7 30 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 7 34 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 7 38 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 7 42 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 7 46 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 7 50 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 7 54 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 7 58 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 7 62 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 7 66 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 7 70 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 7 74 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 101 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136 1 137] 
#[0 7 78 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 7 82 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 7 86 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 19 49 0 104] 
#[0 19 53 0 31] 
#[1 1 118 0 31 3 61 0 101 19 57 0 210 19 57 0 229] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 19 61 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[1 3 61 0 101 1 118 0 104 19 65 0 210 19 65 0 229] 
#[1 1 118 0 31 3 61 0 101 19 69 0 210 19 69 0 229] 
#[1 7 145 0 29 2 110 0 31 2 110 0 101 7 149 0 214 19 73 0 215] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 19 77 0 132] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 19 81 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 37 0 47 16 41 0 48 16 45 0 51 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 19 85 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 37 0 47 16 41 0 48 16 45 0 51 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[0 7 90 0 1 0 5 0 11 0 12 0 13 0 15 0 30 0 31 0 35 0 42 0 44 0 45 0 49 0 53 0 60 0 63 0 66 0 69 0 70 0 72 0 77 0 87 0 90 0 97 0 104 0 112 0 113 0 126 0 127 0 129] 
#[0 19 89 0 29] 
#[0 19 93 0 69] 
#[1 0 167 0 17 0 171 0 29] 
#[1 2 41 0 5 2 33 0 11 2 33 0 12 3 189 0 13 7 94 0 19 3 101 0 30 7 94 0 31 7 94 0 35 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 7 94 0 104 2 41 0 112 2 41 0 113 2 33 0 126 3 193 0 235 19 97 1 95 2 25 1 98 2 25 1 99 2 33 1 103 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[1 4 218 0 11 4 218 0 12 4 218 0 19 4 218 0 31 4 218 0 35 4 218 0 104 4 218 0 126 19 101 1 100 16 145 1 102] 
#[1 14 41 0 13 7 98 0 19 14 45 0 35 14 49 0 104 7 98 0 108 19 105 0 202 19 109 0 203 19 113 0 204] 
#[1 1 6 0 1 1 6 0 3 1 6 0 5 1 6 0 11 1 6 0 12 1 6 0 13 19 117 0 14 1 6 0 15 1 6 0 30 1 6 0 42 1 6 0 44 1 6 0 45 1 6 0 49 1 6 0 53 1 6 0 60 1 6 0 63 1 6 0 66 1 6 0 69 1 6 0 70 1 6 0 72 1 6 0 77 1 6 0 84 1 6 0 87 1 6 0 90 1 6 0 97 1 6 0 112 1 6 0 113 1 6 0 126 1 6 0 127 1 6 0 129 7 85 0 179 19 121 0 193 7 93 0 196] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 19 125 0 134 19 125 0 135 19 125 0 137 9 141 0 238 19 125 0 244 19 125 0 245 19 125 0 246 19 125 0 247 19 125 0 248 19 125 0 249 19 125 0 250 19 125 0 251 19 125 0 254 19 125 0 255 19 125 1 7 19 125 1 8 19 125 1 14 19 125 1 18 19 125 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 19 125 1 29 19 125 1 30 19 125 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 19 125 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 1 6 0 3 1 6 0 53 1 6 0 60 1 6 0 77 1 6 0 84 19 129 0 108 1 6 0 112 1 6 0 113 7 101 0 179 19 133 0 189 7 109 0 192] 
#[0 7 102 0 19 0 108] 
#[0 7 106 0 19 0 108] 
#[0 7 110 0 19 0 108] 
#[1 1 6 0 3 1 6 0 53 1 6 0 60 1 6 0 77 1 6 0 84 7 114 0 108 1 6 0 112 1 6 0 113 5 133 0 179 19 137 0 201] 
#[0 7 118 0 19 0 108] 
#[0 7 122 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 7 126 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 19 141 0 108] 
#[0 7 130 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 7 134 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 88 0 90 0 97 0 108 0 112 0 113] 
#[0 7 138 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 88 0 90 0 97 0 108 0 112 0 113] 
#[0 7 142 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 19 145 0 104] 
#[0 7 146 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 7 150 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 7 150 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 7 150 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 7 150 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 7 150 0 46 16 37 0 47 16 41 0 48 16 45 0 51 7 150 0 64 7 150 0 104 16 49 0 106 16 53 0 107 7 150 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 19 149 0 134 19 149 0 135 19 149 0 137 9 141 0 238 19 149 0 244 19 149 0 245 19 149 0 246 19 149 0 247 19 149 0 248 19 149 0 249 19 149 0 250 19 149 0 251 19 149 0 254 19 149 0 255 19 149 1 7 19 149 1 8 19 149 1 14 19 149 1 18 19 149 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 19 149 1 29 19 149 1 30 19 149 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 19 149 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 7 154 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 7 154 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 7 154 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 7 154 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 7 154 0 46 16 37 0 47 16 41 0 48 16 45 0 51 7 154 0 64 7 154 0 104 16 49 0 106 16 53 0 107 7 154 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 19 153 0 134 19 153 0 135 19 153 0 137 9 141 0 238 19 153 0 244 19 153 0 245 19 153 0 246 19 153 0 247 19 153 0 248 19 153 0 249 19 153 0 250 19 153 0 251 19 153 0 254 19 153 0 255 19 153 1 7 19 153 1 8 19 153 1 14 19 153 1 18 19 153 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 19 153 1 29 19 153 1 30 19 153 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 19 153 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 15 185 0 2 15 189 0 6 7 158 0 7 7 158 0 9 7 158 0 10 7 158 0 14 15 205 0 15 7 158 0 16 15 213 0 17 7 158 0 18 7 158 0 19 15 221 0 20 7 158 0 21 15 229 0 23 7 158 0 24 7 158 0 26 15 241 0 27 7 158 0 28 7 158 0 31 15 249 0 32 7 158 0 33 16 1 0 34 7 158 0 35 16 9 0 36 7 158 0 37 16 13 0 38 16 17 0 39 7 158 0 40 16 25 0 41 16 29 0 42 7 158 0 46 16 37 0 47 7 158 0 48 16 45 0 51 7 158 0 64 7 158 0 104 7 158 0 106 7 158 0 107 7 158 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 9 33 0 1 0 25 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 19 157 0 14 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 19 161 0 134 19 161 0 135 19 161 0 137 0 245 0 237 9 141 0 238 19 161 0 244 19 161 0 245 19 161 0 246 19 161 0 247 19 161 0 248 19 161 0 249 19 161 0 250 19 161 0 251 19 161 0 254 19 161 0 255 19 165 1 3 19 169 1 4 19 173 1 5 19 161 1 7 19 161 1 8 19 161 1 14 19 161 1 18 19 161 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 19 161 1 29 19 161 1 30 19 161 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 19 161 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 7 162 0 2 7 162 0 6 7 162 0 7 7 162 0 9 7 162 0 10 7 162 0 14 7 162 0 15 7 162 0 16 7 162 0 17 7 162 0 18 7 162 0 19 7 162 0 20 7 162 0 21 15 229 0 23 7 162 0 24 7 162 0 26 7 162 0 27 7 162 0 28 7 162 0 31 7 162 0 32 7 162 0 33 7 162 0 34 7 162 0 35 7 162 0 36 7 162 0 37 7 162 0 38 7 162 0 39 7 162 0 40 7 162 0 41 16 29 0 42 7 162 0 46 7 162 0 47 7 162 0 48 16 45 0 51 7 162 0 64 7 162 0 104 7 162 0 106 7 162 0 107 7 162 0 108 7 162 0 109 16 61 0 110 16 65 0 111 7 162 0 127 7 162 0 128 7 162 0 129] 
#[1 7 166 0 2 15 189 0 6 7 166 0 7 7 166 0 9 7 166 0 10 7 166 0 14 15 205 0 15 7 166 0 16 7 166 0 17 7 166 0 18 7 166 0 19 7 166 0 20 7 166 0 21 15 229 0 23 7 166 0 24 7 166 0 26 15 241 0 27 7 166 0 28 7 166 0 31 7 166 0 32 7 166 0 33 7 166 0 34 7 166 0 35 7 166 0 36 7 166 0 37 7 166 0 38 7 166 0 39 7 166 0 40 7 166 0 41 16 29 0 42 7 166 0 46 7 166 0 47 7 166 0 48 16 45 0 51 7 166 0 64 7 166 0 104 7 166 0 106 7 166 0 107 7 166 0 108 7 166 0 109 16 61 0 110 16 65 0 111 7 166 0 127 7 166 0 128 7 166 0 129] 
#[1 15 185 0 2 15 189 0 6 7 170 0 7 15 197 0 9 7 170 0 10 7 170 0 14 15 205 0 15 7 170 0 16 15 213 0 17 7 170 0 18 7 170 0 19 15 221 0 20 7 170 0 21 15 229 0 23 15 241 0 27 7 170 0 28 7 170 0 31 15 249 0 32 7 170 0 33 16 1 0 34 7 170 0 35 16 9 0 36 7 170 0 37 16 13 0 38 16 17 0 39 7 170 0 40 16 25 0 41 16 29 0 42 7 170 0 46 16 37 0 47 7 170 0 48 16 45 0 51 7 170 0 64 7 170 0 104 7 170 0 106 16 53 0 107 7 170 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 15 185 0 2 15 189 0 6 7 174 0 7 15 197 0 9 7 174 0 10 7 174 0 14 15 205 0 15 7 174 0 16 15 213 0 17 7 174 0 18 7 174 0 19 15 221 0 20 7 174 0 21 15 229 0 23 15 241 0 27 7 174 0 28 7 174 0 31 15 249 0 32 7 174 0 33 16 1 0 34 7 174 0 35 16 9 0 36 7 174 0 37 16 13 0 38 16 17 0 39 7 174 0 40 16 25 0 41 16 29 0 42 7 174 0 46 16 37 0 47 7 174 0 48 16 45 0 51 7 174 0 64 7 174 0 104 7 174 0 106 16 53 0 107 7 174 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 7 178 0 2 7 178 0 6 7 178 0 7 7 178 0 9 7 178 0 10 7 178 0 13 7 178 0 14 7 178 0 15 7 178 0 16 7 178 0 17 7 178 0 18 7 178 0 19 7 178 0 20 7 178 0 21 7 178 0 23 7 178 0 24 7 178 0 25 7 178 0 26 7 178 0 27 7 178 0 28 7 178 0 29 16 105 0 30 7 178 0 31 7 178 0 32 7 178 0 33 7 178 0 34 7 178 0 35 7 178 0 36 7 178 0 37 7 178 0 38 7 178 0 39 7 178 0 40 7 178 0 41 7 178 0 42 7 178 0 46 7 178 0 47 7 178 0 48 7 178 0 51 7 178 0 64 7 178 0 71 7 178 0 73 7 178 0 104 7 178 0 105 7 178 0 106 7 178 0 107 7 178 0 108 7 178 0 109 7 178 0 110 7 178 0 111 7 178 0 127 7 178 0 128 7 178 0 129 16 109 1 109 19 177 1 110] 
#[1 9 33 0 1 0 25 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 19 181 0 46 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 19 185 0 134 19 185 0 135 19 185 0 137 0 245 0 237 9 141 0 238 19 185 0 244 19 185 0 245 19 185 0 246 19 185 0 247 19 185 0 248 19 185 0 249 19 185 0 250 19 185 0 251 19 185 0 254 19 185 0 255 19 189 1 0 19 185 1 7 19 185 1 8 19 185 1 14 19 185 1 18 19 185 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 19 185 1 29 19 185 1 30 19 185 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 19 185 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 6 197 0 104 19 193 0 251] 
#[0 7 182 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 7 186 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 7 186 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 7 186 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 7 186 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 7 186 0 46 16 37 0 47 16 41 0 48 16 45 0 51 7 186 0 64 7 186 0 104 16 49 0 106 16 53 0 107 7 186 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 9 33 0 1 7 190 0 2 2 141 0 3 2 37 0 5 7 190 0 6 7 190 0 7 9 37 0 8 9 41 0 9 7 190 0 10 9 45 0 13 7 190 0 14 9 49 0 15 7 190 0 16 7 190 0 17 7 190 0 18 7 190 0 19 9 53 0 20 7 190 0 21 7 190 0 23 9 57 0 24 9 61 0 26 7 190 0 27 7 190 0 28 15 169 0 29 9 65 0 30 7 190 0 31 7 190 0 32 7 190 0 33 7 190 0 34 7 190 0 35 7 190 0 36 7 190 0 37 7 190 0 38 7 190 0 39 7 190 0 40 7 190 0 41 7 190 0 42 9 237 0 44 9 69 0 45 7 190 0 46 7 190 0 47 7 190 0 48 7 190 0 51 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 7 190 0 64 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 0 175 0 104 9 125 0 105 7 190 0 106 9 129 0 107 7 190 0 108 7 190 0 109 7 190 0 110 7 190 0 111 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 7 190 0 128 7 190 0 129 19 197 0 134 19 197 0 135 19 197 0 137 9 141 0 238 19 197 0 244 19 197 0 245 19 197 0 246 19 197 0 247 19 197 0 248 19 197 0 249 19 197 0 250 19 197 0 251 19 197 0 254 19 197 0 255 19 197 1 7 19 197 1 8 19 197 1 14 19 197 1 18 19 197 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 19 197 1 29 19 197 1 30 19 197 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 19 197 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 7 194 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 7 194 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 7 194 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 7 194 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 7 194 0 46 16 37 0 47 16 41 0 48 16 45 0 51 7 194 0 64 7 194 0 104 16 49 0 106 16 53 0 107 7 194 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 9 33 0 1 7 198 0 2 2 141 0 3 2 37 0 5 7 198 0 6 7 198 0 7 9 37 0 8 9 41 0 9 7 198 0 10 9 45 0 13 7 198 0 14 9 49 0 15 7 198 0 16 7 198 0 17 7 198 0 18 7 198 0 19 9 53 0 20 7 198 0 21 7 198 0 23 9 57 0 24 9 61 0 26 7 198 0 27 7 198 0 28 15 169 0 29 9 65 0 30 7 198 0 31 7 198 0 32 7 198 0 33 7 198 0 34 7 198 0 35 7 198 0 36 7 198 0 37 7 198 0 38 7 198 0 39 7 198 0 40 7 198 0 41 7 198 0 42 9 237 0 44 9 69 0 45 7 198 0 46 7 198 0 47 7 198 0 48 7 198 0 51 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 7 198 0 64 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 0 179 0 104 9 125 0 105 7 198 0 106 9 129 0 107 7 198 0 108 7 198 0 109 7 198 0 110 7 198 0 111 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 7 198 0 128 7 198 0 129 19 201 0 134 19 201 0 135 19 201 0 137 9 141 0 238 19 201 0 244 19 201 0 245 19 201 0 246 19 201 0 247 19 201 0 248 19 201 0 249 19 201 0 250 19 201 0 251 19 201 0 254 19 201 0 255 19 201 1 7 19 201 1 8 19 201 1 14 19 201 1 18 19 201 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 19 201 1 29 19 201 1 30 19 201 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 19 201 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 7 202 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 7 202 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 7 202 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 7 202 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 7 202 0 46 16 37 0 47 16 41 0 48 16 45 0 51 7 202 0 64 7 202 0 104 16 49 0 106 16 53 0 107 7 202 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 19 205 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 19 209 0 134 19 209 0 135 19 209 0 137 15 5 0 248 15 9 0 249 19 209 1 43 19 209 1 44 19 209 1 45 19 209 1 46 19 209 1 47 19 209 1 49 19 213 1 50 19 209 1 51 19 209 1 52 19 209 1 59 19 209 1 63 19 209 1 65 19 209 1 66 19 209 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 19 217 0 14 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 15 17 0 134 15 17 0 135 15 17 0 137 15 5 0 248 15 9 0 249 19 221 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 19 225 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 19 229 1 64 15 17 1 65 15 17 1 66 15 17 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[1 6 221 0 123 6 225 0 125 19 233 0 248 19 237 0 249] 
#[0 7 206 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 19 241 0 46 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 15 17 0 134 15 17 0 135 15 17 0 137 15 5 0 248 15 9 0 249 19 245 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 15 17 1 65 15 17 1 66 19 249 1 67 15 17 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[0 7 210 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 19 253 0 134 19 253 0 135 19 253 0 137 15 5 0 248 15 9 0 249 19 253 1 43 19 253 1 44 19 253 1 45 19 253 1 46 19 253 1 47 19 253 1 49 19 213 1 50 19 253 1 51 19 253 1 52 19 253 1 59 19 253 1 63 19 253 1 65 19 253 1 66 19 253 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[0 7 214 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 20 1 0 53 0 77 0 112 0 113 1 131] 
#[1 20 9 0 53 20 9 0 77 20 5 0 81 20 9 0 112 20 9 0 113 20 9 1 131] 
#[0 7 218 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 20 13 0 134 20 13 0 135 20 13 0 137 15 5 0 248 15 9 0 249 20 13 1 42 20 13 1 43 20 13 1 44 20 13 1 45 20 13 1 46 20 13 1 47 20 13 1 48 20 13 1 49 15 49 1 50 20 13 1 51 20 13 1 52 20 13 1 59 20 13 1 63 20 13 1 65 20 13 1 66 20 13 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[1 7 222 0 14 7 222 0 19 7 226 0 24 7 226 0 25 7 226 0 26 7 222 0 29 7 222 0 31 7 222 0 35 7 222 0 37 7 222 0 46 7 222 0 71 7 222 0 73 7 222 0 105 7 222 0 108] 
#[0 7 230 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 7 234 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 7 238 0 14 7 238 0 19 7 242 0 24 7 242 0 25 7 242 0 26 7 238 0 29 7 238 0 31 7 238 0 35 7 238 0 37 7 238 0 46 7 238 0 71 7 238 0 73 7 238 0 105 7 238 0 108] 
#[0 7 246 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 20 17 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 20 21 0 134 20 21 0 135 20 21 0 137 15 5 0 248 15 9 0 249 20 21 1 43 20 21 1 44 20 21 1 45 20 21 1 46 20 21 1 47 20 21 1 49 19 213 1 50 20 21 1 51 20 21 1 52 20 21 1 59 20 21 1 63 20 21 1 65 20 21 1 66 20 21 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[0 7 250 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 7 254 0 14 7 254 0 19 8 2 0 24 8 2 0 25 8 2 0 26 7 254 0 29 7 254 0 31 7 254 0 35 7 254 0 37 7 254 0 46 7 254 0 71 7 254 0 73 7 254 0 105 7 254 0 108] 
#[1 8 6 0 14 8 6 0 19 8 10 0 24 8 10 0 25 8 10 0 26 8 6 0 29 8 6 0 31 8 6 0 35 8 6 0 37 8 6 0 46 8 6 0 71 8 6 0 73 8 6 0 105 8 6 0 108] 
#[0 20 25 0 73] 
#[1 8 14 0 14 8 14 0 19 8 14 0 29 8 14 0 31 8 14 0 35 8 14 0 37 8 14 0 46 8 14 0 71 8 14 0 73 8 14 0 105 8 14 0 108 20 29 1 41] 
#[0 8 18 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 8 22 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 8 26 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 8 30 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 8 34 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 8 38 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 8 42 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 20 33 0 24 20 37 0 25 20 41 0 26] 
#[0 8 46 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 8 50 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 8 54 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 8 58 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 8 62 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 8 66 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 8 70 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 20 45 0 13 8 74 0 14 8 74 0 19 8 78 0 24 8 78 0 25 8 78 0 26 8 74 0 29 8 74 0 31 8 74 0 35 8 74 0 37 8 74 0 46 8 74 0 71 8 74 0 73 20 49 0 104 8 74 0 105 8 74 0 108] 
#[1 8 82 0 14 8 82 0 19 8 86 0 24 8 86 0 25 8 86 0 26 8 82 0 29 8 82 0 31 8 82 0 35 8 82 0 37 8 82 0 46 8 82 0 71 8 82 0 73 8 82 0 105 8 82 0 108] 
#[1 0 190 0 1 0 190 0 13 0 183 0 14 0 190 0 17 0 183 0 19 0 190 0 24 0 190 0 25 0 190 0 26 0 183 0 29 0 190 0 30 0 183 0 31 0 183 0 35 0 183 0 37 20 53 0 43 0 183 0 46 0 183 0 71 0 183 0 73 0 190 0 104 0 183 0 105 0 183 0 108 0 190 0 127] 
#[0 8 94 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 15 17 0 134 15 17 0 135 15 17 0 137 15 5 0 248 15 9 0 249 20 57 1 37 15 109 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 15 17 1 65 15 17 1 66 15 17 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 37 0 47 16 41 0 48 16 45 0 51 6 197 0 104 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129 20 61 0 251] 
#[0 20 65 0 35] 
#[0 8 98 0 35 0 37 0 71] 
#[0 8 102 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 37 0 47 16 41 0 48 16 45 0 51 20 69 0 104 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 1 6 0 3 1 6 0 5 1 6 0 9 1 6 0 13 1 6 0 20 1 6 0 24 1 6 0 30 1 6 0 44 1 6 0 45 1 6 0 49 1 6 0 53 1 6 0 56 1 6 0 60 1 6 0 67 1 6 0 77 1 6 0 81 1 6 0 85 1 6 0 87 1 6 0 90 1 6 0 92 0 187 0 105 1 6 0 112 1 6 0 113 1 6 0 117 1 6 0 118 1 6 0 120 1 6 0 121 1 6 0 122 1 6 0 123 1 6 0 125 1 6 0 127 1 6 0 129 15 149 0 179 20 77 1 19 15 157 1 22 1 6 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 20 81 0 22 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 85 0 134 20 85 0 135 20 85 0 137 9 141 0 238 20 85 0 244 20 85 0 245 20 85 0 246 20 85 0 247 20 85 0 248 20 85 0 249 20 85 0 250 20 85 0 251 20 85 0 254 20 85 0 255 20 85 1 7 20 85 1 8 20 85 1 14 20 85 1 18 20 85 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 85 1 29 20 85 1 30 20 85 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 85 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 8 106 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 8 106 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 8 106 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 8 106 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 8 106 0 46 16 37 0 47 16 41 0 48 16 45 0 51 8 106 0 64 8 106 0 104 16 49 0 106 16 53 0 107 8 106 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[0 8 110 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 15 17 0 134 15 17 0 135 15 17 0 137 15 5 0 248 15 9 0 249 20 89 1 37 15 109 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 15 17 1 65 15 17 1 66 15 17 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 37 0 47 16 41 0 48 16 45 0 51 6 197 0 104 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129 20 93 0 251] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 20 97 0 22 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 101 0 134 20 101 0 135 20 101 0 137 9 141 0 238 20 101 0 244 20 101 0 245 20 101 0 246 20 101 0 247 20 101 0 248 20 101 0 249 20 101 0 250 20 101 0 251 20 101 0 254 20 101 0 255 20 101 1 7 20 101 1 8 20 101 1 14 20 101 1 18 20 101 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 101 1 29 20 101 1 30 20 101 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 101 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 2 141 0 3 2 37 0 5 14 185 0 9 14 189 0 13 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 15 17 0 134 15 17 0 135 15 17 0 137 6 65 0 238 15 5 0 248 15 9 0 249 20 105 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 15 17 1 65 15 17 1 66 15 17 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[0 20 109 0 105] 
#[1 8 114 0 19 8 114 0 105 20 113 1 21] 
#[1 3 113 0 1 2 37 0 5 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 3 253 0 63 1 169 0 66 0 42 0 69 1 173 0 70 4 1 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 3 125 0 127 1 193 0 129 20 117 0 134 20 117 0 135 20 117 0 137 1 213 0 235 20 117 1 70 20 117 1 71 20 117 1 72 20 117 1 73 20 117 1 74 20 117 1 77 20 117 1 78 20 117 1 79 20 117 1 80 20 117 1 81 2 1 1 82 20 117 1 91 20 117 1 93 20 117 1 94 4 21 1 99 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 20 117 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 15 185 0 2 15 189 0 6 8 118 0 7 15 197 0 9 8 118 0 10 8 118 0 14 15 205 0 15 8 118 0 16 15 213 0 17 8 118 0 18 8 118 0 19 15 221 0 20 8 118 0 21 15 229 0 23 8 118 0 24 8 118 0 26 15 241 0 27 8 118 0 28 8 118 0 31 15 249 0 32 8 118 0 33 16 1 0 34 8 118 0 35 16 9 0 36 8 118 0 37 16 13 0 38 16 17 0 39 8 118 0 40 16 25 0 41 16 29 0 42 8 118 0 46 16 37 0 47 8 118 0 48 16 45 0 51 8 118 0 64 8 118 0 104 8 118 0 106 8 118 0 107 8 118 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[0 8 122 0 70 0 75 0 102] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 37 0 47 16 41 0 48 16 45 0 51 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 0 191 0 2 0 191 0 6 0 191 0 7 0 191 0 9 0 191 0 10 8 126 0 14 0 191 0 15 0 191 0 16 0 191 0 17 0 191 0 18 8 126 0 19 0 191 0 20 0 191 0 21 0 191 0 23 0 191 0 24 0 191 0 26 0 191 0 27 0 191 0 28 8 126 0 31 0 191 0 32 0 191 0 33 0 191 0 34 0 191 0 35 0 191 0 36 8 126 0 37 0 191 0 38 0 191 0 39 0 191 0 40 0 191 0 41 0 191 0 42 8 126 0 46 0 191 0 47 0 191 0 48 0 191 0 51 8 126 0 64 8 126 0 104 0 191 0 106 0 191 0 107 8 126 0 108 0 191 0 109 0 191 0 110 0 191 0 111 0 191 0 127 0 191 0 128 0 191 0 129] 
#[1 8 130 0 1 0 195 0 2 8 130 0 3 8 130 0 5 0 195 0 6 0 195 0 7 8 130 0 8 0 195 0 9 0 195 0 10 8 130 0 13 8 130 0 14 0 195 0 15 0 195 0 16 0 195 0 17 0 195 0 18 8 130 0 19 0 195 0 20 0 195 0 21 0 195 0 23 0 195 0 24 0 195 0 26 0 195 0 27 0 195 0 28 8 130 0 30 8 130 0 31 0 195 0 32 0 195 0 33 0 195 0 34 0 195 0 35 0 195 0 36 8 130 0 37 0 195 0 38 0 195 0 39 0 195 0 40 0 195 0 41 0 195 0 42 8 130 0 44 8 130 0 45 8 130 0 46 0 195 0 47 0 195 0 48 8 130 0 49 0 195 0 51 8 130 0 52 8 130 0 53 8 130 0 56 8 130 0 57 8 130 0 58 8 130 0 59 8 130 0 60 8 130 0 61 8 130 0 64 8 130 0 65 8 130 0 66 8 130 0 67 8 130 0 69 8 130 0 70 8 130 0 71 8 130 0 72 8 130 0 74 8 130 0 75 8 130 0 77 8 130 0 78 8 130 0 79 8 130 0 80 8 130 0 81 8 130 0 84 8 130 0 85 8 130 0 86 8 130 0 87 8 130 0 88 8 130 0 89 8 130 0 90 8 130 0 91 8 130 0 92 8 130 0 94 8 130 0 96 8 130 0 97 8 130 0 99 8 130 0 102 8 130 0 104 8 130 0 105 0 195 0 106 0 195 0 107 8 130 0 108 0 195 0 109 0 195 0 110 0 195 0 111 8 130 0 112 8 130 0 113 8 130 0 117 8 130 0 118 8 130 0 120 8 130 0 121 8 130 0 122 8 130 0 123 8 130 0 125 8 130 0 126 0 195 0 127 0 195 0 128 0 195 0 129 8 130 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 121 0 134 20 121 0 135 20 121 0 137 9 141 0 238 20 121 0 244 20 121 0 245 20 121 0 246 20 121 0 247 20 121 0 248 20 121 0 249 20 121 0 250 20 121 0 251 20 121 0 254 20 121 0 255 20 121 1 7 20 121 1 8 20 121 1 14 20 121 1 18 20 121 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 121 1 29 20 121 1 30 20 121 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 121 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 125 0 134 20 125 0 135 20 125 0 137 9 141 0 238 20 125 0 244 20 125 0 245 20 125 0 246 20 125 0 247 20 125 0 248 20 125 0 249 20 125 0 250 20 125 0 251 20 125 0 254 20 125 0 255 20 125 1 7 20 125 1 8 20 125 1 14 20 125 1 18 20 125 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 125 1 29 20 125 1 30 20 125 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 125 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 129 0 134 20 129 0 135 20 129 0 137 9 141 0 238 20 129 0 244 20 129 0 245 20 129 0 246 20 129 0 247 20 129 0 248 20 129 0 249 20 129 0 250 20 129 0 251 20 129 0 254 20 129 0 255 20 129 1 7 20 129 1 8 20 129 1 14 20 129 1 18 20 129 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 129 1 29 20 129 1 30 20 129 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 129 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 133 0 134 20 133 0 135 20 133 0 137 9 141 0 238 20 133 0 244 20 133 0 245 20 133 0 246 20 133 0 247 20 133 0 248 20 133 0 249 20 133 0 250 20 133 0 251 20 133 0 254 20 133 0 255 20 133 1 7 20 133 1 8 20 133 1 14 20 133 1 18 20 133 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 133 1 29 20 133 1 30 20 133 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 133 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 137 0 134 20 137 0 135 20 137 0 137 9 141 0 238 20 137 0 244 20 137 0 245 20 137 0 246 20 137 0 247 20 137 0 248 20 137 0 249 20 137 0 250 20 137 0 251 20 137 0 254 20 137 0 255 20 137 1 7 20 137 1 8 20 137 1 14 20 137 1 18 20 137 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 137 1 29 20 137 1 30 20 137 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 137 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 141 0 134 20 141 0 135 20 141 0 137 9 141 0 238 20 141 0 244 20 141 0 245 20 141 0 246 20 141 0 247 20 141 0 248 20 141 0 249 20 141 0 250 20 141 0 251 20 141 0 254 20 141 0 255 20 141 1 7 20 141 1 8 20 141 1 14 20 141 1 18 20 141 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 141 1 29 20 141 1 30 20 141 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 141 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 145 0 134 20 145 0 135 20 145 0 137 9 141 0 238 20 145 0 244 20 145 0 245 20 145 0 246 20 145 0 247 20 145 0 248 20 145 0 249 20 145 0 250 20 145 0 251 20 145 0 254 20 145 0 255 20 145 1 7 20 145 1 8 20 145 1 14 20 145 1 18 20 145 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 145 1 29 20 145 1 30 20 145 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 145 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 149 0 134 20 149 0 135 20 149 0 137 9 141 0 238 20 149 0 244 20 149 0 245 20 149 0 246 20 149 0 247 20 149 0 248 20 149 0 249 20 149 0 250 20 149 0 251 20 149 0 254 20 149 0 255 20 149 1 7 20 149 1 8 20 149 1 14 20 149 1 18 20 149 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 149 1 29 20 149 1 30 20 149 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 149 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 153 0 134 20 153 0 135 20 153 0 137 9 141 0 238 20 153 0 244 20 153 0 245 20 153 0 246 20 153 0 247 20 153 0 248 20 153 0 249 20 153 0 250 20 153 0 251 20 153 0 254 20 153 0 255 20 153 1 7 20 153 1 8 20 153 1 14 20 153 1 18 20 153 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 153 1 29 20 153 1 30 20 153 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 153 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 157 0 134 20 157 0 135 20 157 0 137 9 141 0 238 20 157 0 244 20 157 0 245 20 157 0 246 20 157 0 247 20 157 0 248 20 157 0 249 20 157 0 250 20 157 0 251 20 157 0 254 20 157 0 255 20 157 1 7 20 157 1 8 20 157 1 14 20 157 1 18 20 157 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 157 1 29 20 157 1 30 20 157 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 157 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 161 0 134 20 161 0 135 20 161 0 137 9 141 0 238 20 161 0 244 20 161 0 245 20 161 0 246 20 161 0 247 20 161 0 248 20 161 0 249 20 161 0 250 20 161 0 251 20 161 0 254 20 161 0 255 20 161 1 7 20 161 1 8 20 161 1 14 20 161 1 18 20 161 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 161 1 29 20 161 1 30 20 161 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 161 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 237 0 5 9 237 0 44 20 181 0 53 20 165 0 54 9 237 0 60 20 181 0 77 9 237 0 87 9 237 0 90 20 181 0 112 20 181 0 113 20 173 0 123 20 173 1 6 9 237 1 107 20 177 1 111 9 237 1 112 20 181 1 131] 
#[1 9 33 0 1 8 134 0 2 2 141 0 3 2 37 0 5 8 134 0 6 8 134 0 7 9 37 0 8 9 41 0 9 8 134 0 10 9 45 0 13 8 134 0 14 9 49 0 15 8 134 0 16 8 134 0 17 8 134 0 18 8 134 0 19 9 53 0 20 8 134 0 21 8 134 0 23 8 134 0 27 8 134 0 28 9 65 0 30 8 134 0 31 8 134 0 32 8 134 0 33 8 134 0 34 8 134 0 35 8 134 0 36 8 134 0 37 8 134 0 38 8 134 0 39 8 134 0 40 8 134 0 41 8 134 0 42 9 237 0 44 9 69 0 45 8 134 0 46 8 134 0 47 8 134 0 48 8 134 0 51 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 8 134 0 64 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 0 199 0 104 9 125 0 105 8 134 0 106 9 129 0 107 8 134 0 108 8 134 0 109 8 134 0 110 8 134 0 111 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 8 134 0 128 8 134 0 129 20 185 0 134 20 185 0 135 20 185 0 137 9 141 0 238 20 185 0 244 20 185 0 245 20 185 0 246 20 185 0 247 20 185 0 248 20 185 0 249 20 185 0 250 20 185 0 251 20 185 0 254 20 185 0 255 20 185 1 7 20 185 1 8 20 185 1 14 20 185 1 18 20 185 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 185 1 29 20 185 1 30 20 185 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 185 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 189 0 134 20 189 0 135 20 189 0 137 9 141 0 238 20 189 0 244 20 189 0 245 20 189 0 246 20 189 0 247 20 189 0 248 20 189 0 249 20 189 0 250 20 189 0 251 20 189 0 254 20 189 0 255 20 189 1 7 20 189 1 8 20 189 1 14 20 189 1 18 20 189 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 189 1 29 20 189 1 30 20 189 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 189 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 193 0 134 20 193 0 135 20 193 0 137 9 141 0 238 20 193 0 244 20 193 0 245 20 193 0 246 20 193 0 247 20 193 0 248 20 193 0 249 20 193 0 250 20 193 0 251 20 193 0 254 20 193 0 255 20 193 1 7 20 193 1 8 20 193 1 14 20 193 1 18 20 193 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 193 1 29 20 193 1 30 20 193 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 193 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 197 0 134 20 197 0 135 20 197 0 137 9 141 0 238 20 197 0 244 20 197 0 245 20 197 0 246 20 197 0 247 20 197 0 248 20 197 0 249 20 197 0 250 20 197 0 251 20 197 0 254 20 197 0 255 20 197 1 7 20 197 1 8 20 197 1 14 20 197 1 18 20 197 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 197 1 29 20 197 1 30 20 197 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 197 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 201 0 134 20 201 0 135 20 201 0 137 9 141 0 238 20 201 0 244 20 201 0 245 20 201 0 246 20 201 0 247 20 201 0 248 20 201 0 249 20 201 0 250 20 201 0 251 20 201 0 254 20 201 0 255 20 201 1 7 20 201 1 8 20 201 1 14 20 201 1 18 20 201 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 201 1 29 20 201 1 30 20 201 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 201 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 205 0 134 20 205 0 135 20 205 0 137 9 141 0 238 20 205 0 244 20 205 0 245 20 205 0 246 20 205 0 247 20 205 0 248 20 205 0 249 20 205 0 250 20 205 0 251 20 205 0 254 20 205 0 255 20 205 1 7 20 205 1 8 20 205 1 14 20 205 1 18 20 205 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 205 1 29 20 205 1 30 20 205 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 205 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 209 0 134 20 209 0 135 20 209 0 137 9 141 0 238 20 209 0 244 20 209 0 245 20 209 0 246 20 209 0 247 20 209 0 248 20 209 0 249 20 209 0 250 20 209 0 251 20 209 0 254 20 209 0 255 20 209 1 7 20 209 1 8 20 209 1 14 20 209 1 18 20 209 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 209 1 29 20 209 1 30 20 209 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 209 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 213 0 134 20 213 0 135 20 213 0 137 9 141 0 238 20 213 0 244 20 213 0 245 20 213 0 246 20 213 0 247 20 213 0 248 20 213 0 249 20 213 0 250 20 213 0 251 20 213 0 254 20 213 0 255 20 213 1 7 20 213 1 8 20 213 1 14 20 213 1 18 20 213 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 213 1 29 20 213 1 30 20 213 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 213 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 217 0 134 20 217 0 135 20 217 0 137 9 141 0 238 20 217 0 244 20 217 0 245 20 217 0 246 20 217 0 247 20 217 0 248 20 217 0 249 20 217 0 250 20 217 0 251 20 217 0 254 20 217 0 255 20 217 1 7 20 217 1 8 20 217 1 14 20 217 1 18 20 217 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 217 1 29 20 217 1 30 20 217 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 217 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 221 0 134 20 221 0 135 20 221 0 137 9 141 0 238 20 221 0 244 20 221 0 245 20 221 0 246 20 221 0 247 20 221 0 248 20 221 0 249 20 221 0 250 20 221 0 251 20 221 0 254 20 221 0 255 20 221 1 7 20 221 1 8 20 221 1 14 20 221 1 18 20 221 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 221 1 29 20 221 1 30 20 221 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 221 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 225 0 134 20 225 0 135 20 225 0 137 9 141 0 238 20 225 0 244 20 225 0 245 20 225 0 246 20 225 0 247 20 225 0 248 20 225 0 249 20 225 0 250 20 225 0 251 20 225 0 254 20 225 0 255 20 225 1 7 20 225 1 8 20 225 1 14 20 225 1 18 20 225 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 225 1 29 20 225 1 30 20 225 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 225 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 229 0 134 20 229 0 135 20 229 0 137 9 141 0 238 20 229 0 244 20 229 0 245 20 229 0 246 20 229 0 247 20 229 0 248 20 229 0 249 20 229 0 250 20 229 0 251 20 229 0 254 20 229 0 255 20 229 1 7 20 229 1 8 20 229 1 14 20 229 1 18 20 229 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 229 1 29 20 229 1 30 20 229 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 229 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 233 0 134 20 233 0 135 20 233 0 137 9 141 0 238 20 233 0 244 20 233 0 245 20 233 0 246 20 233 0 247 20 233 0 248 20 233 0 249 20 233 0 250 20 233 0 251 20 233 0 254 20 233 0 255 20 233 1 7 20 233 1 8 20 233 1 14 20 233 1 18 20 233 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 233 1 29 20 233 1 30 20 233 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 233 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[0 8 138 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 8 142 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 237 0 134 20 237 0 135 20 237 0 137 9 141 0 238 20 237 0 244 20 237 0 245 20 237 0 246 20 237 0 247 20 237 0 248 20 237 0 249 20 237 0 250 20 237 0 251 20 237 0 254 20 237 0 255 20 237 1 7 20 237 1 8 20 237 1 14 20 237 1 18 20 237 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 237 1 29 20 237 1 30 20 237 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 237 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 241 0 134 20 241 0 135 20 241 0 137 9 141 0 238 20 241 0 244 20 241 0 245 20 241 0 246 20 241 0 247 20 241 0 248 20 241 0 249 20 241 0 250 20 241 0 251 20 241 0 254 20 241 0 255 20 241 1 7 20 241 1 8 20 241 1 14 20 241 1 18 20 241 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 241 1 29 20 241 1 30 20 241 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 241 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 3 113 0 1 2 37 0 5 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 3 253 0 63 1 169 0 66 0 42 0 69 1 173 0 70 4 1 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 3 125 0 127 1 193 0 129 20 245 0 134 20 245 0 135 20 245 0 137 1 213 0 235 20 245 1 70 20 245 1 71 20 245 1 72 20 245 1 73 20 245 1 74 20 245 1 77 20 245 1 78 20 245 1 79 20 245 1 80 20 245 1 81 2 1 1 82 20 245 1 91 20 245 1 93 20 245 1 94 4 21 1 99 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 20 245 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 249 0 134 20 249 0 135 20 249 0 137 9 141 0 238 20 249 0 244 20 249 0 245 20 249 0 246 20 249 0 247 20 249 0 248 20 249 0 249 20 249 0 250 20 249 0 251 20 249 0 254 20 249 0 255 20 249 1 7 20 249 1 8 20 249 1 14 20 249 1 18 20 249 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 249 1 29 20 249 1 30 20 249 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 249 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 20 253 0 134 20 253 0 135 20 253 0 137 9 141 0 238 20 253 0 244 20 253 0 245 20 253 0 246 20 253 0 247 20 253 0 248 20 253 0 249 20 253 0 250 20 253 0 251 20 253 0 254 20 253 0 255 20 253 1 7 20 253 1 8 20 253 1 14 20 253 1 18 20 253 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 20 253 1 29 20 253 1 30 20 253 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 20 253 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 21 1 0 134 21 1 0 135 21 1 0 137 9 141 0 238 21 1 0 244 21 1 0 245 21 1 0 246 21 1 0 247 21 1 0 248 21 1 0 249 21 1 0 250 21 1 0 251 21 1 0 254 21 1 0 255 21 1 1 7 21 1 1 8 21 1 1 14 21 1 1 18 21 1 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 21 1 1 29 21 1 1 30 21 1 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 21 1 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 21 5 0 14 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 21 9 0 134 21 9 0 135 21 9 0 137 9 141 0 238 21 9 0 244 21 9 0 245 21 9 0 246 21 9 0 247 21 9 0 248 21 9 0 249 21 9 0 250 21 9 0 251 21 9 0 254 21 9 0 255 21 9 1 7 21 9 1 8 21 9 1 14 21 13 1 17 21 9 1 18 21 9 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 21 9 1 29 21 9 1 30 21 9 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 21 9 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 21 17 0 134 21 17 0 135 21 17 0 137 9 141 0 238 21 17 0 244 21 17 0 245 21 17 0 246 21 17 0 247 21 17 0 248 21 17 0 249 21 17 0 250 21 17 0 251 21 17 0 254 21 17 0 255 21 17 1 7 21 17 1 8 21 17 1 14 21 17 1 18 21 17 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 21 17 1 29 21 17 1 30 21 17 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 21 17 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 21 21 0 134 21 21 0 135 21 21 0 137 9 141 0 238 21 21 0 244 21 21 0 245 21 21 0 246 21 21 0 247 21 21 0 248 21 21 0 249 21 21 0 250 21 21 0 251 21 21 0 254 21 21 0 255 21 21 1 7 21 21 1 8 21 21 1 14 21 21 1 18 21 21 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 21 21 1 29 21 21 1 30 21 21 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 21 21 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 21 25 0 134 21 25 0 135 21 25 0 137 9 141 0 238 21 25 0 244 21 25 0 245 21 25 0 246 21 25 0 247 21 25 0 248 21 25 0 249 21 25 0 250 21 25 0 251 21 25 0 254 21 25 0 255 21 25 1 7 21 25 1 8 21 25 1 14 21 25 1 18 21 25 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 21 25 1 29 21 25 1 30 21 25 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 21 25 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 21 29 0 134 21 29 0 135 21 29 0 137 9 141 0 238 21 29 0 244 21 29 0 245 21 29 0 246 21 29 0 247 21 29 0 248 21 29 0 249 21 29 0 250 21 29 0 251 21 29 0 254 21 29 0 255 21 29 1 7 21 29 1 8 21 29 1 14 21 29 1 18 21 29 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 21 29 1 29 21 29 1 30 21 29 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 21 29 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[0 8 146 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 8 150 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 8 154 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 8 158 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 21 33 0 14 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 21 37 0 134 21 37 0 135 21 37 0 137 9 141 0 238 21 37 0 244 21 37 0 245 21 37 0 246 21 37 0 247 21 37 0 248 21 37 0 249 21 37 0 250 21 37 0 251 21 37 0 254 21 37 0 255 21 37 1 7 21 37 1 8 21 37 1 14 21 37 1 18 21 37 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 21 37 1 29 21 37 1 30 21 37 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 21 37 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 0 6 0 3 0 6 0 24 0 6 0 53 0 6 0 77 0 6 0 108 0 6 0 112 0 6 0 113 0 6 0 123 21 41 0 132] 
#[1 9 237 0 5 9 237 0 44 9 237 0 53 9 237 0 60 9 237 0 77 9 237 0 87 9 237 0 90 9 237 0 112 9 237 0 113 9 237 1 107 21 45 1 111 9 237 1 112 9 237 1 131] 
#[0 8 162 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 71 0 73 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 8 166 0 2 8 166 0 6 8 166 0 7 8 166 0 9 8 166 0 10 8 166 0 13 8 166 0 14 8 166 0 15 8 166 0 16 8 166 0 17 8 166 0 18 8 166 0 19 8 166 0 20 8 166 0 21 8 166 0 23 8 166 0 24 8 166 0 25 8 166 0 26 8 166 0 27 8 166 0 28 8 166 0 29 16 105 0 30 8 166 0 31 8 166 0 32 8 166 0 33 8 166 0 34 8 166 0 35 8 166 0 36 8 166 0 37 8 166 0 38 8 166 0 39 8 166 0 40 8 166 0 41 8 166 0 42 8 166 0 46 8 166 0 47 8 166 0 48 8 166 0 51 8 166 0 64 8 166 0 71 8 166 0 73 8 166 0 104 8 166 0 105 8 166 0 106 8 166 0 107 8 166 0 108 8 166 0 109 8 166 0 110 8 166 0 111 8 166 0 127 8 166 0 128 8 166 0 129 21 49 1 109] 
#[1 4 77 0 127 21 53 1 113] 
#[1 8 170 0 2 8 170 0 6 8 170 0 7 8 170 0 9 8 170 0 10 8 170 0 14 8 170 0 15 8 170 0 16 8 170 0 17 8 170 0 18 8 170 0 19 8 170 0 20 8 170 0 21 8 170 0 23 8 170 0 24 8 170 0 25 8 170 0 26 8 170 0 27 8 170 0 28 8 170 0 29 16 105 0 30 8 170 0 31 8 170 0 32 8 170 0 33 8 170 0 34 8 170 0 35 8 170 0 36 8 170 0 37 8 170 0 38 8 170 0 39 8 170 0 40 8 170 0 41 8 170 0 42 8 170 0 46 8 170 0 47 8 170 0 48 8 170 0 51 8 170 0 64 8 170 0 71 8 170 0 73 8 170 0 104 8 170 0 105 8 170 0 106 8 170 0 107 8 170 0 108 8 170 0 109 8 170 0 110 8 170 0 111 8 170 0 127 8 170 0 128 8 170 0 129 21 49 1 109] 
#[1 3 61 0 101 1 118 0 104 21 57 0 210 21 57 0 229] 
#[0 21 61 0 104] 
#[0 14 105 0 14] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 21 65 0 134 21 65 0 135 21 65 0 137 1 213 0 235 21 65 1 69 21 65 1 71 21 65 1 72 21 65 1 73 21 65 1 74 21 65 1 77 21 65 1 78 21 65 1 79 21 65 1 80 21 65 1 81 2 1 1 82 21 65 1 90 21 65 1 91 21 65 1 92 21 65 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 21 65 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 8 174 0 19 0 128] 
#[1 21 73 0 11 21 73 0 12 8 178 0 19 8 178 0 31 8 178 0 35 8 178 0 104 21 73 0 126 8 178 0 128 21 69 1 101 21 73 1 103] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 21 77 0 134 21 77 0 135 21 77 0 137 1 213 0 235 21 77 1 69 21 77 1 71 21 77 1 72 21 77 1 73 21 77 1 74 21 77 1 77 21 77 1 78 21 77 1 79 21 77 1 80 21 77 1 81 2 1 1 82 21 77 1 90 21 77 1 91 21 77 1 92 21 77 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 21 77 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 8 182 0 19 21 81 0 35 8 182 0 128] 
#[0 8 186 0 19 0 128] 
#[0 8 190 0 1 0 5 0 11 0 12 0 13 0 15 0 29 0 30 0 31 0 35 0 42 0 44 0 45 0 49 0 53 0 58 0 60 0 63 0 66 0 69 0 70 0 72 0 77 0 87 0 90 0 97 0 101 0 104 0 112 0 113 0 126 0 127 0 129] 
#[0 8 194 0 30] 
#[1 3 61 0 101 1 118 0 104 21 85 0 210 21 85 0 229] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 21 89 0 134 21 89 0 135 21 89 0 137 1 213 0 235 21 89 1 69 21 89 1 71 21 89 1 72 21 89 1 73 21 89 1 74 21 89 1 77 21 89 1 78 21 89 1 79 21 89 1 80 21 89 1 81 2 1 1 82 21 89 1 90 21 89 1 91 21 89 1 92 21 89 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 21 89 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 3 61 0 101 1 118 0 104 21 93 0 210 21 93 0 229] 
#[0 8 198 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 2 141 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 21 97 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 16 229 0 236 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 21 101 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 21 105 0 211 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[0 21 109 0 104] 
#[1 8 202 0 2 8 202 0 6 8 202 0 7 8 202 0 9 8 202 0 10 8 202 0 14 8 202 0 15 8 202 0 16 8 202 0 17 8 202 0 18 8 202 0 19 8 202 0 20 8 202 0 21 16 253 0 22 8 202 0 23 8 202 0 24 8 202 0 26 8 202 0 27 8 202 0 28 8 202 0 29 8 202 0 30 8 202 0 31 8 202 0 32 8 202 0 33 8 202 0 34 8 202 0 35 8 202 0 36 8 202 0 37 8 202 0 38 8 202 0 39 8 202 0 40 8 202 0 41 8 202 0 42 8 202 0 46 8 202 0 47 8 202 0 48 8 202 0 51 8 202 0 64 8 202 0 70 8 202 0 101 8 202 0 104 8 202 0 105 8 202 0 106 8 202 0 107 8 202 0 108 8 202 0 109 8 202 0 110 8 202 0 111 8 202 0 127 8 202 0 128 8 202 0 129 21 113 1 83] 
#[0 21 117 0 14] 
#[0 8 206 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[0 8 210 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[0 8 214 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[0 8 218 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[1 0 37 0 52 0 45 0 58 0 53 0 61 1 41 0 66 0 10 0 69 0 101 0 94 5 173 0 97 21 121 0 170 0 177 0 171 0 181 0 172 0 185 0 173 21 125 0 185 21 129 0 206] 
#[0 8 222 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 8 226 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[0 8 230 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[0 8 234 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[0 8 238 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[0 8 242 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 2 141 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 21 133 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 16 229 0 236 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[1 3 113 0 1 2 37 0 5 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 3 253 0 63 1 169 0 66 0 42 0 69 1 173 0 70 4 1 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 3 125 0 127 1 193 0 129 21 137 0 134 21 137 0 135 21 137 0 137 1 213 0 235 21 137 1 70 21 137 1 71 21 137 1 72 21 137 1 73 21 137 1 74 21 137 1 77 21 137 1 78 21 137 1 79 21 137 1 80 21 137 1 81 2 1 1 82 21 137 1 91 21 137 1 93 21 137 1 94 4 21 1 99 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 21 137 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 8 246 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 0 246 0 14 0 246 0 19 21 141 0 29] 
#[0 8 250 0 14 0 19] 
#[1 0 190 0 1 0 190 0 13 0 190 0 14 0 190 0 17 0 190 0 19 21 145 0 29 0 190 0 30 0 190 0 127] 
#[1 8 254 0 2 8 254 0 6 8 254 0 7 8 254 0 9 8 254 0 10 8 254 0 14 8 254 0 15 8 254 0 16 8 254 0 17 8 254 0 18 8 254 0 19 8 254 0 20 8 254 0 21 16 253 0 22 8 254 0 23 8 254 0 24 8 254 0 26 8 254 0 27 8 254 0 28 8 254 0 29 8 254 0 30 8 254 0 31 8 254 0 32 8 254 0 33 8 254 0 34 8 254 0 35 8 254 0 36 8 254 0 37 8 254 0 38 8 254 0 39 8 254 0 40 8 254 0 41 8 254 0 42 8 254 0 46 8 254 0 47 8 254 0 48 8 254 0 51 8 254 0 64 8 254 0 70 8 254 0 101 8 254 0 104 8 254 0 105 8 254 0 106 8 254 0 107 8 254 0 108 8 254 0 109 8 254 0 110 8 254 0 111 8 254 0 127 8 254 0 128 8 254 0 129 21 149 1 83] 
#[1 9 2 0 14 21 153 0 19 21 157 1 86] 
#[0 9 6 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 9 10 0 14 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 21 161 0 134 21 161 0 135 21 161 0 137 1 213 0 235 21 161 1 69 21 161 1 71 21 161 1 72 21 161 1 73 21 161 1 74 21 161 1 77 21 161 1 78 21 161 1 79 21 161 1 80 21 161 1 81 2 1 1 82 21 161 1 90 21 161 1 91 21 161 1 92 21 161 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 21 161 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 9 14 0 14 0 19] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 21 165 0 134 21 165 0 135 21 165 0 137 1 213 0 235 21 165 1 69 21 165 1 71 21 165 1 72 21 165 1 73 21 165 1 74 21 165 1 77 21 165 1 78 21 165 1 79 21 165 1 80 21 165 1 81 2 1 1 82 21 165 1 90 21 165 1 91 21 165 1 92 21 165 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 21 165 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 9 18 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136] 
#[1 1 41 0 66 0 10 0 69 14 157 0 80 1 45 0 97 6 197 0 104 0 181 0 172 1 49 0 173 14 161 0 251] 
#[1 2 97 0 53 2 101 0 66 0 10 0 69 2 105 0 72 2 109 0 79 2 113 0 91 6 197 0 104 0 181 0 172 2 117 0 173 15 133 0 251] 
#[0 9 22 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136 1 137] 
#[1 0 74 0 1 1 14 0 2 0 74 0 3 0 74 0 5 1 14 0 6 1 14 0 7 0 74 0 8 0 203 0 9 1 14 0 10 0 74 0 13 0 203 0 15 1 14 0 16 1 14 0 17 1 14 0 18 0 203 0 20 1 14 0 21 1 14 0 23 0 203 0 24 0 203 0 26 1 14 0 27 1 14 0 28 0 74 0 30 0 203 0 31 1 14 0 32 1 14 0 33 1 14 0 34 1 14 0 35 1 14 0 36 1 14 0 38 1 14 0 39 1 14 0 40 1 14 0 41 1 14 0 42 0 74 0 44 0 74 0 45 1 14 0 47 1 14 0 48 1 14 0 51 0 74 0 52 0 74 0 53 0 74 0 56 0 74 0 57 0 74 0 58 0 74 0 59 0 74 0 60 0 74 0 61 0 74 0 65 0 74 0 66 0 74 0 67 0 74 0 69 0 74 0 70 0 74 0 71 0 74 0 72 0 74 0 74 0 74 0 75 0 74 0 77 0 74 0 78 0 74 0 79 0 74 0 80 0 74 0 84 0 74 0 86 0 74 0 87 0 74 0 88 0 74 0 89 0 74 0 90 0 74 0 91 0 74 0 92 0 74 0 94 0 74 0 96 0 74 0 97 0 74 0 99 0 74 0 102 0 74 0 104 0 74 0 105 1 14 0 106 0 203 0 107 0 203 0 108 1 14 0 109 1 14 0 110 1 14 0 111 0 74 0 112 0 74 0 113 0 74 0 117 0 74 0 118 0 74 0 120 0 74 0 121 0 74 0 122 0 74 0 123 0 74 0 125 0 74 0 126 0 203 0 127 1 14 0 128 1 14 0 129 0 74 1 136] 
#[1 1 18 0 2 1 18 0 6 1 18 0 7 1 18 0 9 1 18 0 10 1 18 0 15 1 18 0 16 1 18 0 17 1 18 0 18 1 18 0 20 1 18 0 21 1 18 0 23 1 18 0 24 1 18 0 26 1 18 0 27 1 18 0 28 0 207 0 31 1 18 0 32 1 18 0 33 1 18 0 34 1 18 0 35 1 18 0 36 1 18 0 38 1 18 0 39 1 18 0 40 1 18 0 41 1 18 0 42 1 18 0 47 1 18 0 48 1 18 0 51 1 18 0 106 1 18 0 107 1 18 0 108 1 18 0 109 1 18 0 110 1 18 0 111 1 18 0 127 1 18 0 128 1 18 0 129] 
#[0 0 211 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136] 
#[0 9 30 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136] 
#[1 2 141 0 3 21 169 0 74 6 65 0 238] 
#[1 9 33 0 1 0 215 0 3 0 219 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 0 223 0 30 9 237 0 44 9 69 0 45 0 227 0 52 0 231 0 53 9 77 0 56 9 81 0 57 0 182 0 58 9 85 0 59 0 235 0 60 0 182 0 61 0 182 0 65 0 182 0 66 6 189 0 67 0 182 0 69 9 89 0 70 9 93 0 71 0 182 0 72 9 97 0 74 9 101 0 75 0 239 0 77 9 105 0 78 0 182 0 79 9 109 0 80 0 182 0 84 9 113 0 86 0 243 0 87 0 182 0 88 0 182 0 89 0 247 0 90 0 182 0 91 6 193 0 92 0 182 0 94 0 182 0 96 0 251 0 97 0 182 0 99 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 0 255 0 112 1 3 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 15 177 0 134 15 177 0 135 15 177 0 137 9 141 0 238 15 173 0 244 15 177 0 245 15 181 0 246 15 177 0 247 15 177 0 248 15 177 0 249 15 177 0 250 15 181 0 251 15 181 0 254 15 181 0 255 15 177 1 7 15 177 1 8 15 177 1 14 15 177 1 18 15 181 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 15 181 1 29 15 181 1 30 15 181 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 15 177 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[0 9 34 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136] 
#[0 9 38 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136] 
#[0 9 42 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136] 
#[1 4 126 0 2 4 126 0 6 4 126 0 7 4 126 0 9 4 126 0 10 4 126 0 15 4 126 0 16 4 126 0 17 4 126 0 18 4 126 0 20 4 126 0 21 4 126 0 23 4 126 0 24 4 126 0 26 4 126 0 27 4 126 0 28 21 173 0 31 4 126 0 32 4 126 0 33 4 126 0 34 4 126 0 35 4 126 0 36 4 126 0 38 4 126 0 39 4 126 0 40 4 126 0 41 4 126 0 42 4 126 0 47 4 126 0 48 4 126 0 51 4 126 0 106 4 126 0 107 9 46 0 108 4 126 0 109 4 126 0 110 4 126 0 111 4 126 0 127 4 126 0 128 4 126 0 129] 
#[1 9 50 0 1 4 130 0 2 9 50 0 3 9 50 0 5 4 130 0 6 4 130 0 7 9 50 0 8 1 7 0 9 4 130 0 10 9 50 0 13 1 7 0 15 4 130 0 16 4 130 0 17 4 130 0 18 1 7 0 20 4 130 0 21 4 130 0 23 1 7 0 24 1 7 0 26 4 130 0 27 4 130 0 28 9 50 0 30 9 50 0 31 4 130 0 32 4 130 0 33 4 130 0 34 4 130 0 35 4 130 0 36 4 130 0 38 4 130 0 39 4 130 0 40 4 130 0 41 4 130 0 42 9 50 0 44 9 50 0 45 4 130 0 47 4 130 0 48 4 130 0 51 9 50 0 52 9 50 0 53 9 50 0 56 9 50 0 57 9 50 0 58 9 50 0 59 9 50 0 60 9 50 0 61 9 50 0 65 9 50 0 66 9 50 0 67 9 50 0 69 9 50 0 70 9 50 0 71 9 50 0 72 9 50 0 74 9 50 0 75 9 50 0 77 9 50 0 78 9 50 0 79 9 50 0 80 9 50 0 84 9 50 0 86 9 50 0 87 9 50 0 88 9 50 0 89 9 50 0 90 9 50 0 91 9 50 0 92 9 50 0 94 9 50 0 96 9 50 0 97 9 50 0 99 9 50 0 102 9 50 0 104 9 50 0 105 4 130 0 106 1 7 0 107 9 50 0 108 4 130 0 109 4 130 0 110 4 130 0 111 9 50 0 112 9 50 0 113 9 50 0 117 9 50 0 118 9 50 0 120 9 50 0 121 9 50 0 122 9 50 0 123 9 50 0 125 9 50 0 126 1 7 0 127 4 130 0 128 4 130 0 129 9 50 1 136] 
#[0 21 177 0 108] 
#[1 9 33 0 1 1 11 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 17 41 0 31 9 237 0 44 9 69 0 45 17 45 0 52 0 41 0 53 9 77 0 56 9 81 0 57 0 45 0 58 9 85 0 59 0 49 0 60 0 53 0 61 0 57 0 65 0 61 0 66 6 189 0 67 0 10 0 69 9 89 0 70 9 93 0 71 0 65 0 72 0 163 0 74 9 101 0 75 0 69 0 77 9 105 0 78 0 73 0 79 9 109 0 80 0 77 0 84 9 113 0 86 2 37 0 87 0 85 0 88 0 89 0 89 2 37 0 90 0 97 0 91 6 193 0 92 0 101 0 94 0 105 0 96 17 49 0 97 0 113 0 99 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 9 54 0 108 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 21 185 0 134 17 57 0 135 17 61 0 137 17 65 0 141 0 157 0 142 17 69 0 157 0 149 0 158 0 153 0 159 0 157 0 160 0 161 0 161 0 165 0 162 0 169 0 165 0 173 0 170 0 177 0 171 0 181 0 172 0 185 0 173 17 73 0 179 0 189 0 185 0 193 0 186 0 197 0 187 0 201 0 188 0 205 0 197 0 209 0 205 0 213 0 206 0 217 0 207 0 221 0 208 0 225 0 213 0 229 0 216 0 233 0 217 0 237 0 218 0 241 0 219 17 77 0 238 21 181 0 241 21 181 0 242 17 89 0 243 15 173 0 244 21 185 0 245 17 97 0 246 21 185 0 247 21 185 0 248 21 185 0 249 21 185 0 250 17 97 0 251 17 97 0 254 17 97 0 255 21 185 1 7 21 185 1 8 21 185 1 14 21 185 1 18 17 97 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 17 97 1 29 17 97 1 30 17 97 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 21 185 1 119 9 245 1 120 1 5 1 130 2 37 1 131 7 21 1 136] 
#[1 3 113 0 1 7 1 0 5 6 253 0 11 6 253 0 12 1 133 0 13 1 137 0 15 6 185 0 20 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 7 17 0 53 7 1 0 60 1 165 0 63 1 169 0 66 6 189 0 67 0 42 0 69 1 173 0 70 1 177 0 72 7 17 0 77 7 1 0 87 7 1 0 90 6 193 0 92 1 181 0 97 6 197 0 104 7 17 0 112 7 17 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 6 253 0 126 3 125 0 127 21 189 0 128 1 193 0 129 21 193 0 134 21 193 0 135 21 193 0 137 1 213 0 235 21 193 0 247 21 193 0 248 21 193 0 249 21 193 0 251 21 193 1 69 21 193 1 71 21 193 1 72 21 193 1 73 21 193 1 74 21 193 1 77 21 193 1 78 21 193 1 79 21 193 1 80 21 193 1 81 2 1 1 82 21 193 1 90 21 193 1 91 21 193 1 92 21 193 1 94 2 21 1 95 2 25 1 98 2 29 1 99 6 253 1 103 0 253 1 104 7 1 1 107 2 41 1 112 21 193 1 116 21 193 1 117 21 193 1 118 2 45 1 120 21 193 1 121 3 177 1 124 2 57 1 125 7 17 1 131 7 21 1 136] 
#[0 9 58 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 9 62 0 19 0 128] 
#[0 9 66 0 19 0 128] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 21 197 0 132] 
#[1 21 233 0 1 21 233 0 2 21 233 0 3 21 201 0 4 21 225 0 5 21 233 0 6 21 233 0 7 21 233 0 9 21 233 0 10 21 225 0 11 21 225 0 12 10 177 0 13 21 205 0 14 21 221 0 15 21 233 0 16 21 221 0 17 21 233 0 18 21 233 0 19 21 233 0 20 21 233 0 21 21 233 0 22 21 233 0 23 21 233 0 24 21 233 0 25 21 233 0 26 21 233 0 27 21 233 0 28 21 233 0 29 21 233 0 30 21 233 0 31 21 233 0 32 21 233 0 33 21 233 0 34 21 233 0 35 21 233 0 36 21 233 0 37 21 233 0 38 21 233 0 39 21 233 0 40 21 233 0 41 21 221 0 42 21 233 0 43 21 225 0 44 10 181 0 45 21 233 0 47 21 233 0 48 21 233 0 49 21 225 0 50 21 225 0 51 21 225 0 52 21 225 0 53 21 225 0 54 21 225 0 55 21 225 0 56 21 225 0 57 21 225 0 58 21 225 0 59 21 225 0 60 21 225 0 62 21 225 0 63 21 225 0 64 21 225 0 65 21 225 0 66 6 189 0 67 21 225 0 68 21 225 0 69 21 225 0 70 21 225 0 71 21 225 0 72 21 225 0 73 21 225 0 74 21 225 0 75 21 225 0 76 21 225 0 77 21 225 0 78 21 225 0 79 21 225 0 80 21 225 0 81 21 225 0 82 21 225 0 83 21 225 0 84 21 225 0 85 21 225 0 86 21 225 0 87 21 225 0 88 21 225 0 89 21 225 0 90 21 225 0 91 6 193 0 92 21 225 0 93 21 225 0 94 21 225 0 95 21 225 0 96 21 225 0 97 21 225 0 98 21 225 0 99 21 225 0 100 21 225 0 101 21 225 0 102 21 225 0 103 10 185 0 104 21 233 0 105 21 233 0 106 21 233 0 107 21 225 0 112 21 225 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 21 225 0 126 21 233 0 127 21 233 0 128 21 233 0 129 21 209 0 148 21 213 0 150 21 217 0 152 21 221 0 155 21 217 0 247 21 217 0 248 21 217 0 249 21 225 1 131 21 225 1 132 21 225 1 133 21 217 1 134 21 233 1 135 7 21 1 136] 
#[1 21 233 0 1 21 233 0 2 21 233 0 3 21 201 0 4 21 225 0 5 21 233 0 6 21 233 0 7 21 233 0 9 21 233 0 10 21 225 0 11 21 225 0 12 10 177 0 13 21 221 0 15 21 233 0 16 21 221 0 17 21 233 0 18 21 233 0 19 21 233 0 20 21 233 0 21 21 233 0 22 21 233 0 23 21 233 0 24 21 233 0 25 21 233 0 26 21 233 0 27 21 233 0 28 21 233 0 29 21 233 0 30 21 233 0 31 21 233 0 32 21 233 0 33 21 233 0 34 21 233 0 35 21 233 0 36 21 233 0 37 21 233 0 38 21 233 0 39 21 233 0 40 21 233 0 41 21 221 0 42 21 233 0 43 21 225 0 44 10 181 0 45 21 237 0 46 21 233 0 47 21 233 0 48 21 233 0 49 21 225 0 50 21 225 0 51 21 225 0 52 21 225 0 53 21 225 0 54 21 225 0 55 21 225 0 56 21 225 0 57 21 225 0 58 21 225 0 59 21 225 0 60 21 225 0 62 21 225 0 63 21 225 0 64 21 225 0 65 21 225 0 66 6 189 0 67 21 225 0 68 21 225 0 69 21 225 0 70 21 225 0 71 21 225 0 72 21 225 0 73 21 225 0 74 21 225 0 75 21 225 0 76 21 225 0 77 21 225 0 78 21 225 0 79 21 225 0 80 21 225 0 81 21 225 0 82 21 225 0 83 21 225 0 84 21 225 0 85 21 225 0 86 21 225 0 87 21 225 0 88 21 225 0 89 21 225 0 90 21 225 0 91 6 193 0 92 21 225 0 93 21 225 0 94 21 225 0 95 21 225 0 96 21 225 0 97 21 225 0 98 21 225 0 99 21 225 0 100 21 225 0 101 21 225 0 102 21 225 0 103 10 185 0 104 21 233 0 105 21 233 0 106 21 233 0 107 21 225 0 112 21 225 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 21 225 0 126 21 233 0 127 21 233 0 128 21 233 0 129 21 209 0 148 21 213 0 150 21 217 0 152 21 221 0 155 21 217 0 247 21 217 0 248 21 217 0 249 21 225 1 131 21 225 1 132 21 225 1 133 21 217 1 134 21 233 1 135 7 21 1 136] 
#[1 21 233 0 1 21 233 0 2 21 233 0 3 21 201 0 4 21 225 0 5 21 233 0 6 21 233 0 7 21 233 0 9 21 233 0 10 21 225 0 11 21 225 0 12 10 177 0 13 21 221 0 15 21 233 0 16 21 221 0 17 21 233 0 18 21 233 0 19 21 233 0 20 21 233 0 21 21 233 0 22 21 233 0 23 21 233 0 24 21 233 0 25 21 233 0 26 21 233 0 27 21 233 0 28 21 233 0 29 21 233 0 30 21 233 0 31 21 233 0 32 21 233 0 33 21 233 0 34 21 233 0 35 21 233 0 36 21 233 0 37 21 233 0 38 21 233 0 39 21 233 0 40 21 233 0 41 21 221 0 42 21 233 0 43 21 225 0 44 10 181 0 45 21 233 0 47 21 233 0 48 21 233 0 49 21 225 0 50 21 225 0 51 21 225 0 52 21 225 0 53 21 225 0 54 21 225 0 55 21 225 0 56 21 225 0 57 21 225 0 58 21 225 0 59 21 225 0 60 21 225 0 62 21 225 0 63 21 225 0 64 21 225 0 65 21 225 0 66 6 189 0 67 21 225 0 68 21 225 0 69 21 225 0 70 21 225 0 71 21 225 0 72 21 225 0 73 21 225 0 74 21 225 0 75 21 225 0 76 21 225 0 77 21 225 0 78 21 225 0 79 21 225 0 80 21 225 0 81 21 225 0 82 21 225 0 83 21 225 0 84 21 225 0 85 21 225 0 86 21 225 0 87 21 225 0 88 21 225 0 89 21 225 0 90 21 225 0 91 6 193 0 92 21 225 0 93 21 225 0 94 21 225 0 95 21 225 0 96 21 225 0 97 21 225 0 98 21 225 0 99 21 225 0 100 21 225 0 101 21 225 0 102 21 225 0 103 10 185 0 104 21 233 0 105 21 233 0 106 21 233 0 107 21 241 0 108 21 225 0 112 21 225 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 21 225 0 126 21 233 0 127 21 233 0 128 21 233 0 129 21 209 0 148 21 213 0 150 21 217 0 152 21 221 0 155 21 217 0 247 21 217 0 248 21 217 0 249 21 225 1 131 21 225 1 132 21 225 1 133 21 217 1 134 21 233 1 135 7 21 1 136] 
#[0 21 245 0 31] 
#[1 9 70 0 14 21 249 0 31 9 70 0 46 9 70 0 108 21 253 0 145] 
#[1 5 57 0 13 5 65 0 45 5 69 0 104 22 1 0 138 22 5 0 156] 
#[0 22 9 0 31] 
#[0 9 74 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 9 78 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 9 82 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 22 13 0 134 22 13 0 135 22 13 0 137 9 141 0 238 22 13 0 244 22 13 0 245 22 13 0 246 22 13 0 247 22 13 0 248 22 13 0 249 22 13 0 250 22 13 0 251 22 13 0 254 22 13 0 255 22 13 1 7 22 13 1 8 22 13 1 14 22 13 1 18 22 13 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 22 13 1 29 22 13 1 30 22 13 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 22 13 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 22 17 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 37 0 47 16 41 0 48 16 45 0 51 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[0 9 86 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 9 90 0 14 0 19] 
#[0 9 94 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 22 21 0 31] 
#[1 1 6 0 1 1 6 0 3 1 6 0 5 1 6 0 11 1 6 0 12 1 6 0 13 9 98 0 14 1 6 0 15 1 6 0 30 1 6 0 42 1 6 0 44 1 6 0 45 1 6 0 49 1 6 0 53 1 6 0 60 1 6 0 63 1 6 0 66 1 6 0 69 1 6 0 70 1 6 0 72 1 6 0 77 1 6 0 84 1 6 0 87 1 6 0 90 1 6 0 97 1 6 0 112 1 6 0 113 1 6 0 126 1 6 0 127 1 6 0 129 7 85 0 179 22 25 0 196] 
#[0 9 102 0 14 0 19] 
#[0 22 29 0 29] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 22 33 0 134 22 33 0 135 22 33 0 137 1 213 0 235 22 33 1 69 22 33 1 71 22 33 1 72 22 33 1 73 22 33 1 74 22 33 1 77 22 33 1 78 22 33 1 79 22 33 1 80 22 33 1 81 2 1 1 82 22 33 1 90 22 33 1 91 22 33 1 92 22 33 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 22 33 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 1 6 0 3 1 6 0 53 1 6 0 60 1 6 0 77 1 6 0 84 9 106 0 108 1 6 0 112 1 6 0 113 7 101 0 179 22 37 0 192] 
#[0 9 110 0 19 0 108] 
#[0 9 114 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 22 41 0 31] 
#[1 22 45 0 31 3 61 0 101 22 49 0 229] 
#[0 9 118 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 9 122 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 22 53 0 108] 
#[0 9 126 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 22 57 0 132] 
#[0 9 130 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 22 61 0 31] 
#[1 2 141 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 9 134 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 16 229 0 236 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[0 22 65 0 108] 
#[0 22 69 0 104] 
#[0 22 73 0 31] 
#[1 1 118 0 31 3 61 0 101 22 77 0 210 22 77 0 229] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 22 81 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[0 22 85 0 31] 
#[0 9 138 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 22 89 0 134 22 89 0 135 22 89 0 137 1 213 0 235 22 89 1 69 22 89 1 71 22 89 1 72 22 89 1 73 22 89 1 74 22 89 1 77 22 89 1 78 22 89 1 79 22 89 1 80 22 89 1 81 2 1 1 82 22 89 1 90 22 89 1 91 22 89 1 92 22 89 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 22 89 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 9 142 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 22 93 0 134 22 93 0 135 22 93 0 137 1 213 0 235 22 93 1 69 22 93 1 71 22 93 1 72 22 93 1 73 22 93 1 74 22 93 1 77 22 93 1 78 22 93 1 79 22 93 1 80 22 93 1 81 2 1 1 82 22 93 1 90 22 93 1 91 22 93 1 92 22 93 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 22 93 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 22 97 0 31 22 101 0 35] 
#[0 9 146 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 22 105 0 31] 
#[0 9 150 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 9 154 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 22 109 0 108] 
#[0 9 158 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 3 61 0 101 1 118 0 104 22 113 0 210 22 113 0 229] 
#[1 1 118 0 31 3 61 0 101 22 117 0 210 22 117 0 229] 
#[1 7 145 0 29 2 110 0 31 2 110 0 101 7 149 0 214 22 121 0 215] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 22 125 0 132] 
#[1 2 41 0 5 2 33 0 11 2 33 0 12 3 189 0 13 3 101 0 30 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 106 0 101 2 106 0 104 2 41 0 112 2 41 0 113 2 33 0 126 22 129 0 209 3 193 0 235 7 141 1 95 2 25 1 98 2 25 1 99 2 33 1 103 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[1 2 41 0 5 2 33 0 11 2 33 0 12 3 189 0 13 7 145 0 29 3 101 0 30 2 110 0 31 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 2 110 0 101 2 41 0 112 2 41 0 113 2 33 0 126 7 149 0 214 22 133 0 215 3 193 0 235 22 137 1 95 2 25 1 98 2 25 1 99 2 33 1 103 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[0 22 141 0 104] 
#[0 9 162 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 9 166 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 2 141 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 5 169 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 0 85 0 88 1 1 0 90 5 173 0 97 22 145 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 5 181 0 141 5 185 0 158 5 189 0 170 0 177 0 171 0 181 0 172 0 185 0 173 5 193 0 207 8 249 0 221 0 249 0 238 0 253 1 104 1 1 1 107 5 205 1 130 1 1 1 131] 
#[1 3 61 0 101 1 118 0 104 22 149 0 210 22 149 0 229] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 22 153 0 134 22 153 0 135 22 153 0 137 1 213 0 235 22 153 1 69 22 153 1 71 22 153 1 72 22 153 1 73 22 153 1 74 22 153 1 77 22 153 1 78 22 153 1 79 22 153 1 80 22 153 1 81 2 1 1 82 22 153 1 90 22 153 1 91 22 153 1 92 22 153 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 22 153 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 3 61 0 101 1 118 0 104 22 157 0 210 22 157 0 229] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 22 161 0 134 22 161 0 135 22 161 0 137 1 213 0 235 22 161 1 69 22 161 1 71 22 161 1 72 22 161 1 73 22 161 1 74 22 161 1 77 22 161 1 78 22 161 1 79 22 161 1 80 22 161 1 81 2 1 1 82 22 161 1 90 22 161 1 91 22 161 1 92 22 161 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 22 161 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 22 165 0 70] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 22 169 0 134 22 169 0 135 22 169 0 137 1 213 0 235 22 169 1 69 22 169 1 71 22 169 1 72 22 169 1 73 22 169 1 74 22 169 1 77 22 169 1 78 22 169 1 79 22 169 1 80 22 169 1 81 2 1 1 82 22 169 1 90 22 169 1 91 22 169 1 92 22 169 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 22 169 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 3 61 0 101 1 118 0 104 22 173 0 210 22 173 0 229] 
#[0 22 177 0 104] 
#[0 9 170 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 2 141 0 3 1 1 0 5 0 33 0 30 0 37 0 52 0 41 0 53 0 45 0 58 0 49 0 60 0 53 0 61 0 57 0 65 0 61 0 66 0 10 0 69 0 65 0 72 0 69 0 77 0 73 0 79 0 77 0 84 1 1 0 87 0 85 0 88 0 89 0 89 1 1 0 90 0 97 0 91 0 101 0 94 0 105 0 96 0 109 0 97 0 113 0 99 22 181 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 0 157 0 141 0 157 0 142 2 145 0 157 0 149 0 158 0 153 0 159 0 157 0 160 0 161 0 161 0 165 0 162 0 169 0 165 0 173 0 170 0 177 0 171 0 181 0 172 0 185 0 173 0 189 0 185 0 193 0 186 0 197 0 187 0 201 0 188 0 205 0 197 0 209 0 205 0 213 0 206 0 217 0 207 0 221 0 208 0 225 0 213 0 229 0 216 0 233 0 217 0 237 0 218 0 241 0 219 0 249 0 238 0 253 1 104 1 1 1 107 1 5 1 130 1 1 1 131] 
#[0 22 185 0 104] 
#[0 22 189 0 31] 
#[1 1 118 0 31 3 61 0 101 22 193 0 210 22 193 0 229] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 22 197 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[1 3 61 0 101 1 118 0 104 22 201 0 210 22 201 0 229] 
#[1 1 118 0 31 3 61 0 101 22 205 0 210 22 205 0 229] 
#[1 7 145 0 29 2 110 0 31 2 110 0 101 7 149 0 214 22 209 0 215] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 22 213 0 132] 
#[0 22 217 0 108] 
#[0 9 174 0 19 0 108] 
#[0 9 178 0 19 0 31 0 108] 
#[1 11 233 0 19 3 234 0 108 11 237 0 167 22 221 0 169] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 22 225 0 134 22 225 0 135 22 225 0 137 1 213 0 235 22 225 1 69 22 225 1 71 22 225 1 72 22 225 1 73 22 225 1 74 22 225 1 77 22 225 1 78 22 225 1 79 22 225 1 80 22 225 1 81 2 1 1 82 22 225 1 90 22 225 1 91 22 225 1 92 22 225 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 22 225 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 9 182 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 22 229 0 31 3 61 0 101 6 197 0 104 22 233 0 229 22 237 0 251] 
#[1 22 241 0 31 6 197 0 104 22 245 0 251] 
#[0 9 186 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 18 201 0 22 22 249 0 31 3 61 0 101 6 197 0 104 22 253 0 184 23 1 0 229 23 5 0 251] 
#[1 1 6 0 1 1 6 0 3 1 6 0 5 1 6 0 9 1 6 0 11 1 6 0 12 1 6 0 13 9 190 0 14 1 6 0 15 1 6 0 20 1 6 0 24 1 6 0 25 1 6 0 30 1 6 0 42 1 6 0 44 1 6 0 45 1 6 0 49 1 6 0 53 1 6 0 56 1 6 0 60 1 6 0 63 1 6 0 66 1 6 0 67 1 6 0 69 1 6 0 70 1 6 0 72 1 6 0 77 1 6 0 81 1 6 0 85 1 6 0 87 1 6 0 90 1 6 0 92 1 6 0 97 1 6 0 105 1 6 0 112 1 6 0 113 1 6 0 117 1 6 0 118 1 6 0 120 1 6 0 121 1 6 0 122 1 6 0 123 1 6 0 125 1 6 0 126 1 6 0 127 1 6 0 129 23 9 0 179 23 13 0 182 1 6 1 136] 
#[1 3 113 0 1 2 37 0 5 14 185 0 9 2 33 0 11 2 33 0 12 18 229 0 13 23 17 0 14 1 137 0 15 14 193 0 20 14 197 0 24 18 237 0 30 3 121 0 42 19 29 0 44 18 241 0 45 18 245 0 49 15 89 0 53 14 209 0 56 2 37 0 60 1 165 0 63 1 169 0 66 14 213 0 67 0 42 0 69 1 173 0 70 1 177 0 72 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 1 181 0 97 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 2 33 0 126 3 125 0 127 23 21 0 129 19 5 0 134 19 5 0 135 19 5 0 137 3 129 0 235 15 5 0 248 15 9 0 249 19 221 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 19 225 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 19 229 1 64 15 17 1 65 15 17 1 66 15 17 1 68 3 133 1 69 3 133 1 71 3 133 1 72 3 133 1 73 3 133 1 74 3 137 1 75 3 141 1 76 3 133 1 77 3 133 1 78 3 133 1 79 3 133 1 80 3 133 1 81 2 1 1 82 3 133 1 90 3 133 1 91 3 133 1 92 3 133 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 19 29 1 112 15 85 1 119 19 33 1 120 3 133 1 121 3 145 1 124 2 57 1 125 15 89 1 131 15 93 1 136] 
#[0 9 194 0 14 0 19] 
#[1 3 157 0 5 19 29 0 44 3 157 0 53 3 157 0 60 3 157 0 77 3 157 0 87 3 157 0 90 3 157 0 112 3 157 0 113 3 157 1 107 14 149 1 111 19 29 1 112 3 161 1 125 3 157 1 131] 
#[1 3 113 0 1 2 37 0 5 14 185 0 9 2 33 0 11 2 33 0 12 18 229 0 13 1 137 0 15 14 193 0 20 14 197 0 24 18 237 0 30 1 145 0 42 19 29 0 44 18 241 0 45 19 241 0 46 18 245 0 49 15 89 0 53 14 209 0 56 2 37 0 60 1 165 0 63 1 169 0 66 14 213 0 67 0 42 0 69 1 173 0 70 1 177 0 72 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 1 181 0 97 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 2 33 0 126 3 125 0 127 23 21 0 129 19 5 0 134 19 5 0 135 19 5 0 137 1 213 0 235 15 5 0 248 15 9 0 249 19 245 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 15 17 1 65 15 17 1 66 19 249 1 67 15 17 1 68 3 173 1 69 3 173 1 71 3 173 1 72 3 173 1 73 3 173 1 74 3 173 1 77 3 173 1 78 3 173 1 79 3 173 1 80 3 173 1 81 2 1 1 82 3 173 1 90 3 173 1 91 3 173 1 92 3 173 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 19 29 1 112 15 85 1 119 19 33 1 120 3 173 1 121 3 177 1 124 2 57 1 125 15 89 1 131 15 93 1 136] 
#[1 1 15 0 14 1 15 0 19 7 210 0 29 0 246 0 31 1 15 0 46 7 210 0 105] 
#[1 20 1 0 53 20 1 0 77 23 25 0 87 20 1 0 112 20 1 0 113 20 1 1 131] 
#[1 0 54 0 1 0 54 0 13 1 19 0 14 0 54 0 17 1 19 0 19 0 54 0 24 0 54 0 25 0 54 0 26 1 23 0 29 0 54 0 30 0 54 0 104 0 54 0 105 0 54 0 127] 
#[1 3 113 0 1 2 37 0 5 14 185 0 9 23 41 0 11 23 41 0 12 18 229 0 13 1 137 0 15 14 193 0 20 14 197 0 24 18 237 0 30 1 145 0 42 19 29 0 44 18 241 0 45 18 245 0 49 15 89 0 53 14 209 0 56 2 37 0 60 3 253 0 63 1 169 0 66 14 213 0 67 0 42 0 69 1 173 0 70 4 1 0 72 15 89 0 77 23 33 0 81 14 221 0 85 23 37 0 87 2 37 0 90 14 225 0 92 1 181 0 97 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 23 41 0 126 3 125 0 127 23 21 0 129 19 5 0 134 19 5 0 135 19 5 0 137 1 213 0 235 15 5 0 248 15 9 0 249 20 21 1 43 20 21 1 44 20 21 1 45 20 21 1 46 20 21 1 47 20 21 1 49 19 213 1 50 20 21 1 51 20 21 1 52 20 21 1 59 20 21 1 63 20 21 1 65 20 21 1 66 20 21 1 68 4 9 1 70 4 9 1 71 4 9 1 72 4 9 1 73 4 9 1 74 4 9 1 77 4 9 1 78 4 9 1 79 4 9 1 80 4 9 1 81 2 1 1 82 4 9 1 91 4 9 1 93 4 9 1 94 4 21 1 99 23 41 1 103 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 19 29 1 112 15 85 1 119 19 33 1 120 4 9 1 121 3 177 1 124 2 57 1 125 15 89 1 131 15 93 1 136] 
#[1 1 27 0 14 1 27 0 19 7 250 0 29 1 10 0 31 1 27 0 46 7 250 0 105] 
#[0 9 202 0 14 0 19] 
#[0 9 206 0 14 0 19] 
#[0 9 210 0 14 0 19] 
#[0 23 45 0 29] 
#[0 9 214 0 14 0 19] 
#[1 1 31 0 13 1 35 0 14 1 98 0 17 1 35 0 19 4 210 0 24 4 210 0 25 4 210 0 26 4 210 0 29 1 39 0 30 1 98 0 31 1 35 0 46 4 210 0 104 4 210 0 105 4 77 0 127 4 81 1 113 4 85 1 126] 
#[1 23 53 0 30 16 109 1 109 16 121 1 110 4 93 1 122 4 97 1 123] 
#[1 9 218 0 14 23 57 0 19 23 61 0 176] 
#[1 18 201 0 22 23 65 0 31 3 61 0 101 6 197 0 104 23 69 0 184 23 73 0 229 23 77 0 251] 
#[0 23 81 0 14] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 23 85 0 132] 
#[0 9 222 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 23 89 0 31] 
#[0 23 93 0 108] 
#[0 23 97 0 104] 
#[0 23 101 0 31] 
#[1 1 118 0 31 3 61 0 101 23 105 0 210 23 105 0 229] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 23 109 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[0 9 226 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 9 230 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 2 41 0 5 2 33 0 11 2 33 0 12 3 189 0 13 9 234 0 19 3 101 0 30 9 234 0 31 9 234 0 35 1 145 0 42 2 41 0 44 2 41 0 53 2 41 0 60 1 173 0 70 2 41 0 77 2 41 0 87 2 41 0 90 9 234 0 104 2 41 0 112 2 41 0 113 2 33 0 126 3 193 0 235 23 113 1 95 2 25 1 98 2 25 1 99 2 33 1 103 2 41 1 107 2 41 1 112 3 205 1 124 2 57 1 125 2 41 1 131] 
#[0 23 117 0 13] 
#[0 9 238 0 19 0 31 0 35 0 104] 
#[0 9 242 0 19 0 31 0 35 0 104] 
#[0 9 246 0 19 0 108] 
#[0 9 250 0 19 0 108] 
#[0 9 254 0 19 0 108] 
#[0 10 2 0 19 0 108] 
#[0 23 121 0 14] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 10 6 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 37 0 47 16 41 0 48 16 45 0 51 16 49 0 106 16 53 0 107 10 6 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[0 10 10 0 19 0 108] 
#[0 23 125 0 108] 
#[0 10 14 0 19 0 108] 
#[0 10 18 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 23 129 0 132] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 10 22 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 10 22 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 10 22 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 10 22 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 10 22 0 46 16 37 0 47 16 41 0 48 16 45 0 51 10 22 0 64 10 22 0 104 16 49 0 106 16 53 0 107 10 22 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 15 185 0 2 15 189 0 6 10 26 0 7 10 26 0 9 10 26 0 10 10 26 0 14 15 205 0 15 10 26 0 16 15 213 0 17 10 26 0 18 10 26 0 19 15 221 0 20 10 26 0 21 15 229 0 23 10 26 0 24 10 26 0 26 15 241 0 27 10 26 0 28 10 26 0 31 15 249 0 32 10 26 0 33 16 1 0 34 10 26 0 35 16 9 0 36 10 26 0 37 16 13 0 38 16 17 0 39 10 26 0 40 16 25 0 41 16 29 0 42 10 26 0 46 16 37 0 47 10 26 0 48 16 45 0 51 10 26 0 64 10 26 0 104 10 26 0 106 10 26 0 107 10 26 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[0 10 30 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 23 133 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 23 137 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 37 0 47 16 41 0 48 16 45 0 51 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[0 23 141 0 14] 
#[0 10 34 0 1 0 3 0 5 0 8 0 9 0 13 0 14 0 15 0 20 0 24 0 26 0 30 0 44 0 45 0 52 0 53 0 56 0 57 0 59 0 60 0 67 0 70 0 71 0 74 0 75 0 77 0 78 0 80 0 86 0 87 0 90 0 92 0 97 0 102 0 104 0 105 0 107 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 10 38 0 14 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 23 145 0 134 23 145 0 135 23 145 0 137 9 141 0 238 23 145 0 244 23 145 0 245 23 145 0 246 23 145 0 247 23 145 0 248 23 145 0 249 23 145 0 250 23 145 0 251 23 145 0 254 23 145 0 255 23 149 1 4 23 145 1 7 23 145 1 8 23 145 1 14 23 145 1 18 23 145 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 23 145 1 29 23 145 1 30 23 145 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 23 145 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 10 42 0 2 10 42 0 6 10 42 0 7 10 42 0 9 10 42 0 10 10 42 0 13 10 42 0 14 10 42 0 15 10 42 0 16 10 42 0 17 10 42 0 18 10 42 0 19 10 42 0 20 10 42 0 21 10 42 0 23 10 42 0 24 10 42 0 25 10 42 0 26 10 42 0 27 10 42 0 28 10 42 0 29 16 105 0 30 10 42 0 31 10 42 0 32 10 42 0 33 10 42 0 34 10 42 0 35 10 42 0 36 10 42 0 37 10 42 0 38 10 42 0 39 10 42 0 40 10 42 0 41 10 42 0 42 10 42 0 46 10 42 0 47 10 42 0 48 10 42 0 51 10 42 0 64 10 42 0 71 10 42 0 73 10 42 0 104 10 42 0 105 10 42 0 106 10 42 0 107 10 42 0 108 10 42 0 109 10 42 0 110 10 42 0 111 10 42 0 127 10 42 0 128 10 42 0 129 21 49 1 109] 
#[0 10 46 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 10 50 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 23 153 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 10 50 0 46 16 37 0 47 16 41 0 48 16 45 0 51 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129 23 157 1 2] 
#[0 23 161 0 46] 
#[0 10 54 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 10 58 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 10 58 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 10 58 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 10 58 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 10 58 0 46 16 37 0 47 16 41 0 48 16 45 0 51 10 58 0 64 10 58 0 104 16 49 0 106 16 53 0 107 10 58 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 10 62 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 10 62 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 10 62 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 10 62 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 10 62 0 46 16 37 0 47 16 41 0 48 16 45 0 51 10 62 0 64 10 62 0 104 16 49 0 106 16 53 0 107 10 62 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 23 169 0 53 14 209 0 56 2 37 0 60 14 213 0 67 23 169 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 23 169 0 112 23 169 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 23 165 0 134 23 165 0 135 23 165 0 137 15 5 0 248 15 9 0 249 23 165 1 43 23 165 1 44 23 165 1 45 23 165 1 46 23 165 1 47 23 165 1 49 19 213 1 50 23 165 1 51 23 165 1 52 23 165 1 59 23 165 1 63 23 165 1 65 23 165 1 66 23 165 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 23 169 1 131 15 93 1 136] 
#[0 10 66 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 20 37 0 25] 
#[0 10 70 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 23 173 0 14 23 177 0 19 23 181 1 61 23 185 1 62] 
#[1 1 43 0 14 8 34 0 19 8 34 0 105] 
#[0 23 189 0 14] 
#[1 10 78 0 14 10 78 0 19 10 82 0 24 10 82 0 25 10 82 0 26 10 78 0 29 10 78 0 31 10 78 0 35 10 78 0 37 10 78 0 46 10 78 0 71 10 78 0 73 10 78 0 105 10 78 0 108] 
#[1 10 86 0 14 10 86 0 19 10 90 0 24 10 90 0 25 10 90 0 26 10 86 0 29 10 86 0 31 10 86 0 35 10 86 0 37 10 86 0 46 10 86 0 71 10 86 0 73 10 86 0 105 10 86 0 108] 
#[0 10 94 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 23 193 0 19 10 98 0 46 23 181 1 61 23 197 1 62] 
#[0 23 201 0 46] 
#[0 10 102 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 10 106 0 14 10 106 0 19 10 106 0 29 10 106 0 31 10 106 0 35 10 106 0 37 23 205 0 43 10 106 0 46 10 106 0 71 10 106 0 73 10 106 0 105 10 106 0 108] 
#[0 23 209 0 53 0 77 0 112 0 113 1 131] 
#[1 10 110 0 14 10 110 0 19 10 110 0 29 10 110 0 31 10 110 0 35 10 110 0 37 23 213 0 43 10 110 0 46 10 110 0 71 10 110 0 73 10 110 0 105 10 110 0 108] 
#[1 8 14 0 14 8 14 0 19 8 14 0 29 8 14 0 31 8 14 0 35 8 14 0 37 8 14 0 46 8 14 0 71 8 14 0 73 8 14 0 105 8 14 0 108 23 217 1 41] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 23 169 0 53 14 209 0 56 2 37 0 60 14 213 0 67 23 169 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 23 169 0 112 23 169 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 23 221 0 134 23 221 0 135 23 221 0 137 15 5 0 248 15 9 0 249 23 221 1 43 23 221 1 44 23 221 1 45 23 221 1 46 23 221 1 47 23 221 1 49 19 213 1 50 23 221 1 51 23 221 1 52 23 221 1 59 23 221 1 63 23 221 1 65 23 221 1 66 23 221 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 23 169 1 131 15 93 1 136] 
#[0 10 114 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 23 225 0 134 23 225 0 135 23 225 0 137 9 141 0 238 23 225 0 244 23 225 0 245 23 225 0 246 23 225 0 247 23 225 0 248 23 225 0 249 23 225 0 250 23 225 0 251 23 225 0 254 23 225 0 255 23 225 1 7 23 225 1 8 23 225 1 14 23 225 1 18 23 225 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 23 225 1 29 23 225 1 30 23 225 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 23 225 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 10 118 0 14 10 118 0 19 10 118 0 29 10 118 0 31 10 118 0 35 10 118 0 37 10 118 0 46 10 118 0 71 10 118 0 73 1 47 0 105 10 118 0 108 23 233 1 40] 
#[0 10 122 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 9 237 0 5 23 237 0 20 23 241 0 30 9 237 0 44 9 237 0 53 9 237 0 60 9 237 0 77 9 237 0 87 9 237 0 90 9 237 0 112 9 237 0 113 23 245 0 117 23 249 0 121 6 221 0 123 6 225 0 125 3 125 0 127 24 5 0 248 24 5 0 249 24 5 1 50 9 237 1 107 24 5 1 108 9 233 1 111 9 237 1 112 24 5 1 119 9 245 1 120 9 237 1 131] 
#[1 9 237 0 5 23 237 0 20 23 241 0 30 9 237 0 44 9 237 0 53 9 237 0 60 9 237 0 77 9 237 0 87 9 237 0 90 9 237 0 112 9 237 0 113 23 245 0 117 23 249 0 121 6 221 0 123 6 225 0 125 3 125 0 127 24 17 0 248 24 17 0 249 24 17 1 50 9 237 1 107 24 17 1 108 9 233 1 111 9 237 1 112 24 17 1 119 9 245 1 120 9 237 1 131] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 24 21 0 14 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 15 17 0 134 15 17 0 135 15 17 0 137 15 5 0 248 15 9 0 249 24 25 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 24 29 1 60 15 17 1 63 15 17 1 65 15 17 1 66 15 17 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[1 1 6 0 3 1 6 0 24 1 6 0 53 1 6 0 77 1 6 0 81 1 6 0 85 24 33 0 108 1 6 0 112 1 6 0 113 1 6 0 123 24 37 0 179 24 41 1 53 24 45 1 54 24 49 1 57 24 53 1 58] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 15 17 0 134 15 17 0 135 15 17 0 137 15 5 0 248 15 9 0 249 24 57 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 15 17 1 65 15 17 1 66 15 17 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[0 24 61 0 35] 
#[1 10 126 0 1 10 126 0 2 10 126 0 3 10 126 0 5 10 126 0 6 10 126 0 7 10 126 0 8 10 126 0 9 10 126 0 10 10 126 0 13 10 126 0 14 10 126 0 15 10 126 0 16 10 126 0 17 10 126 0 18 10 126 0 19 10 126 0 20 10 126 0 21 10 126 0 23 10 126 0 24 10 126 0 26 10 126 0 27 10 126 0 28 10 126 0 30 10 126 0 31 10 126 0 32 10 126 0 33 10 126 0 34 10 126 0 35 10 126 0 36 10 126 0 37 10 126 0 38 10 126 0 39 10 126 0 40 10 126 0 41 10 126 0 42 10 126 0 44 10 126 0 45 10 126 0 46 10 126 0 47 10 126 0 48 10 126 0 49 10 126 0 51 10 126 0 52 10 126 0 53 10 126 0 56 10 126 0 57 10 126 0 58 10 126 0 59 10 126 0 60 10 126 0 61 1 51 0 64 10 126 0 65 10 126 0 66 10 126 0 67 10 126 0 69 10 126 0 70 10 126 0 71 10 126 0 72 10 126 0 74 10 126 0 75 10 126 0 77 10 126 0 78 10 126 0 79 10 126 0 80 10 126 0 81 10 126 0 84 10 126 0 85 10 126 0 86 10 126 0 87 10 126 0 88 10 126 0 89 10 126 0 90 10 126 0 91 10 126 0 92 10 126 0 94 10 126 0 96 10 126 0 97 10 126 0 99 10 126 0 102 10 126 0 104 10 126 0 105 10 126 0 106 10 126 0 107 10 126 0 108 10 126 0 109 10 126 0 110 10 126 0 111 10 126 0 112 10 126 0 113 10 126 0 117 10 126 0 118 10 126 0 120 10 126 0 121 10 126 0 122 10 126 0 123 10 126 0 125 10 126 0 126 10 126 0 127 10 126 0 128 10 126 0 129 10 126 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 24 69 0 134 24 69 0 135 24 69 0 137 9 141 0 238 24 69 0 244 24 69 0 245 24 69 0 246 24 69 0 247 24 69 0 248 24 69 0 249 24 69 0 250 24 69 0 251 24 69 0 254 24 69 0 255 24 69 1 7 24 69 1 8 24 69 1 14 24 69 1 18 24 69 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 24 69 1 29 24 69 1 30 24 69 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 24 69 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 0 6 0 3 0 6 0 5 0 6 0 9 0 6 0 13 0 6 0 20 0 6 0 24 0 6 0 30 0 6 0 44 0 6 0 45 0 6 0 49 0 6 0 53 0 6 0 56 0 6 0 60 0 6 0 67 0 6 0 77 0 6 0 81 0 6 0 85 0 6 0 87 0 6 0 90 0 6 0 92 0 6 0 105 0 6 0 108 0 6 0 112 0 6 0 113 0 6 0 117 0 6 0 118 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 0 6 0 127 0 6 0 129 24 73 0 132 0 6 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 24 77 0 22 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 24 81 0 134 24 81 0 135 24 81 0 137 9 141 0 238 24 81 0 244 24 81 0 245 24 81 0 246 24 81 0 247 24 81 0 248 24 81 0 249 24 81 0 250 24 81 0 251 24 81 0 254 24 81 0 255 24 81 1 7 24 81 1 8 24 81 1 14 24 81 1 18 24 81 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 24 81 1 29 24 81 1 30 24 81 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 24 81 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[0 24 85 0 105] 
#[1 3 113 0 1 2 37 0 5 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 3 253 0 63 1 169 0 66 0 42 0 69 1 173 0 70 4 1 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 3 125 0 127 1 193 0 129 24 89 0 134 24 89 0 135 24 89 0 137 1 213 0 235 24 89 1 70 24 89 1 71 24 89 1 72 24 89 1 73 24 89 1 74 24 89 1 77 24 89 1 78 24 89 1 79 24 89 1 80 24 89 1 81 2 1 1 82 24 89 1 91 24 89 1 93 24 89 1 94 4 21 1 99 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 24 89 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 15 185 0 2 15 189 0 6 10 130 0 7 15 197 0 9 10 130 0 10 10 130 0 14 15 205 0 15 10 130 0 16 15 213 0 17 10 130 0 18 10 130 0 19 15 221 0 20 10 130 0 21 15 229 0 23 10 130 0 24 10 130 0 26 15 241 0 27 10 130 0 28 10 130 0 31 15 249 0 32 10 130 0 33 16 1 0 34 10 130 0 35 16 9 0 36 10 130 0 37 16 13 0 38 16 17 0 39 10 130 0 40 16 25 0 41 16 29 0 42 10 130 0 46 16 37 0 47 10 130 0 48 16 45 0 51 10 130 0 64 10 130 0 104 10 130 0 106 10 130 0 107 10 130 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[0 24 93 0 35] 
#[0 10 134 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[1 3 113 0 1 2 37 0 5 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 3 253 0 63 1 169 0 66 0 42 0 69 1 173 0 70 4 1 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 3 125 0 127 1 193 0 129 24 97 0 134 24 97 0 135 24 97 0 137 1 213 0 235 24 97 1 70 24 97 1 71 24 97 1 72 24 97 1 73 24 97 1 74 24 97 1 77 24 97 1 78 24 97 1 79 24 97 1 80 24 97 1 81 2 1 1 82 24 97 1 91 24 97 1 93 24 97 1 94 4 21 1 99 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 24 97 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 10 138 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 10 138 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 10 138 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 10 138 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 10 138 0 46 16 37 0 47 16 41 0 48 16 45 0 51 10 138 0 64 10 138 0 104 16 49 0 106 16 53 0 107 10 138 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 10 142 0 19 24 101 0 29 10 142 0 105] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 24 105 0 22 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 24 109 0 134 24 109 0 135 24 109 0 137 9 141 0 238 24 109 0 244 24 109 0 245 24 109 0 246 24 109 0 247 24 109 0 248 24 109 0 249 24 109 0 250 24 109 0 251 24 109 0 254 24 109 0 255 24 109 1 7 24 109 1 8 24 109 1 14 24 109 1 18 24 109 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 24 109 1 29 24 109 1 30 24 109 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 24 109 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 24 113 0 19 10 146 0 105 24 117 1 20] 
#[1 6 197 0 104 24 121 0 251] 
#[1 15 189 0 6 10 150 0 7 10 150 0 9 10 150 0 10 10 150 0 14 15 205 0 15 10 150 0 16 15 213 0 17 10 150 0 18 10 150 0 19 15 221 0 20 10 150 0 21 15 229 0 23 10 150 0 24 10 150 0 26 15 241 0 27 10 150 0 28 10 150 0 31 15 249 0 32 10 150 0 33 10 150 0 35 10 150 0 37 16 17 0 39 10 150 0 40 16 25 0 41 16 29 0 42 10 150 0 46 16 37 0 47 10 150 0 48 16 45 0 51 10 150 0 64 10 150 0 104 10 150 0 106 10 150 0 107 10 150 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 77 0 129] 
#[1 10 154 0 2 10 154 0 6 10 154 0 7 10 154 0 9 10 154 0 10 10 154 0 14 10 154 0 15 10 154 0 16 10 154 0 17 10 154 0 18 10 154 0 19 10 154 0 20 10 154 0 21 15 229 0 23 10 154 0 24 10 154 0 26 10 154 0 27 10 154 0 28 10 154 0 31 10 154 0 32 10 154 0 33 10 154 0 34 10 154 0 35 10 154 0 36 10 154 0 37 10 154 0 38 10 154 0 39 10 154 0 40 10 154 0 41 16 29 0 42 10 154 0 46 10 154 0 47 10 154 0 48 16 45 0 51 10 154 0 64 10 154 0 104 10 154 0 106 10 154 0 107 10 154 0 108 10 154 0 109 16 61 0 110 16 65 0 111 10 154 0 127 10 154 0 128 10 154 0 129] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 10 158 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 10 158 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 10 158 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 10 158 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 10 158 0 46 16 37 0 47 16 41 0 48 16 45 0 51 10 158 0 64 10 158 0 104 16 49 0 106 16 53 0 107 10 158 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 15 185 0 2 15 189 0 6 10 162 0 7 10 162 0 9 10 162 0 10 10 162 0 14 15 205 0 15 10 162 0 16 15 213 0 17 10 162 0 18 10 162 0 19 15 221 0 20 10 162 0 21 15 229 0 23 10 162 0 24 10 162 0 26 15 241 0 27 10 162 0 28 10 162 0 31 15 249 0 32 10 162 0 33 16 1 0 34 10 162 0 35 16 9 0 36 10 162 0 37 16 13 0 38 16 17 0 39 10 162 0 40 16 25 0 41 16 29 0 42 10 162 0 46 16 37 0 47 10 162 0 48 16 45 0 51 10 162 0 64 10 162 0 104 10 162 0 106 10 162 0 107 10 162 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 10 166 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 10 166 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 10 166 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 10 166 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 10 166 0 46 16 37 0 47 16 41 0 48 16 45 0 51 10 166 0 64 10 166 0 104 16 49 0 106 16 53 0 107 10 166 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 10 170 0 2 10 170 0 6 10 170 0 7 10 170 0 9 10 170 0 10 10 170 0 14 10 170 0 15 10 170 0 16 10 170 0 17 10 170 0 18 10 170 0 19 10 170 0 20 10 170 0 21 15 229 0 23 10 170 0 24 10 170 0 26 10 170 0 27 10 170 0 28 10 170 0 31 10 170 0 32 10 170 0 33 10 170 0 34 10 170 0 35 10 170 0 36 10 170 0 37 10 170 0 38 10 170 0 39 10 170 0 40 10 170 0 41 16 29 0 42 10 170 0 46 10 170 0 47 10 170 0 48 16 45 0 51 10 170 0 64 10 170 0 104 10 170 0 106 10 170 0 107 10 170 0 108 10 170 0 109 16 61 0 110 16 65 0 111 10 170 0 127 10 170 0 128 10 170 0 129] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 10 174 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 10 174 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 10 174 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 10 174 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 10 174 0 46 16 37 0 47 16 41 0 48 16 45 0 51 10 174 0 64 10 174 0 104 16 49 0 106 16 53 0 107 10 174 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 10 178 0 2 15 189 0 6 10 178 0 7 10 178 0 9 10 178 0 10 10 178 0 14 15 205 0 15 10 178 0 16 10 178 0 17 10 178 0 18 10 178 0 19 10 178 0 20 10 178 0 21 15 229 0 23 10 178 0 24 10 178 0 26 15 241 0 27 10 178 0 28 10 178 0 31 10 178 0 32 10 178 0 33 10 178 0 34 10 178 0 35 10 178 0 36 10 178 0 37 10 178 0 38 10 178 0 39 10 178 0 40 10 178 0 41 16 29 0 42 10 178 0 46 10 178 0 47 10 178 0 48 16 45 0 51 10 178 0 64 10 178 0 104 10 178 0 106 10 178 0 107 10 178 0 108 10 178 0 109 16 61 0 110 16 65 0 111 10 178 0 127 10 178 0 128 10 178 0 129] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 10 182 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 10 182 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 10 182 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 10 182 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 10 182 0 46 16 37 0 47 16 41 0 48 16 45 0 51 10 182 0 64 10 182 0 104 16 49 0 106 16 53 0 107 10 182 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 10 186 0 2 15 189 0 6 10 186 0 7 10 186 0 9 10 186 0 10 10 186 0 14 15 205 0 15 10 186 0 16 10 186 0 17 10 186 0 18 10 186 0 19 10 186 0 20 10 186 0 21 15 229 0 23 10 186 0 24 10 186 0 26 15 241 0 27 10 186 0 28 10 186 0 31 10 186 0 32 10 186 0 33 10 186 0 34 10 186 0 35 10 186 0 36 10 186 0 37 10 186 0 38 10 186 0 39 10 186 0 40 10 186 0 41 16 29 0 42 10 186 0 46 10 186 0 47 10 186 0 48 16 45 0 51 10 186 0 64 10 186 0 104 10 186 0 106 10 186 0 107 10 186 0 108 10 186 0 109 16 61 0 110 16 65 0 111 10 186 0 127 10 186 0 128 10 186 0 129] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 10 190 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 10 190 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 10 190 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 10 190 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 10 190 0 46 16 37 0 47 16 41 0 48 16 45 0 51 10 190 0 64 10 190 0 104 16 49 0 106 16 53 0 107 10 190 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[0 10 194 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 10 198 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 10 202 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 24 125 0 110] 
#[1 10 206 0 2 10 206 0 6 10 206 0 7 10 206 0 9 10 206 0 10 10 206 0 14 10 206 0 15 10 206 0 16 10 206 0 17 10 206 0 18 10 206 0 19 10 206 0 20 10 206 0 21 10 206 0 23 10 206 0 24 10 206 0 26 10 206 0 27 10 206 0 28 0 190 0 30 10 206 0 31 10 206 0 32 10 206 0 33 10 206 0 34 10 206 0 35 10 206 0 36 10 206 0 37 10 206 0 38 10 206 0 39 10 206 0 40 10 206 0 41 10 206 0 42 10 206 0 46 10 206 0 47 10 206 0 48 10 206 0 51 10 206 0 64 10 206 0 104 10 206 0 106 10 206 0 107 10 206 0 108 10 206 0 109 1 55 0 110 10 206 0 111 10 206 0 127 10 206 0 128 10 206 0 129] 
#[1 15 185 0 2 15 189 0 6 10 210 0 7 15 197 0 9 10 210 0 10 10 210 0 14 15 205 0 15 10 210 0 16 15 213 0 17 10 210 0 18 10 210 0 19 15 221 0 20 10 210 0 21 15 229 0 23 15 241 0 27 10 210 0 28 10 210 0 31 15 249 0 32 10 210 0 33 16 1 0 34 10 210 0 35 16 9 0 36 10 210 0 37 16 13 0 38 16 17 0 39 10 210 0 40 16 25 0 41 16 29 0 42 10 210 0 46 16 37 0 47 10 210 0 48 16 45 0 51 10 210 0 64 10 210 0 104 10 210 0 106 16 53 0 107 10 210 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 15 185 0 2 15 189 0 6 10 214 0 7 15 197 0 9 10 214 0 10 10 214 0 14 15 205 0 15 10 214 0 16 15 213 0 17 10 214 0 18 10 214 0 19 15 221 0 20 10 214 0 21 15 229 0 23 15 241 0 27 10 214 0 28 10 214 0 31 15 249 0 32 10 214 0 33 16 1 0 34 10 214 0 35 16 9 0 36 10 214 0 37 16 13 0 38 16 17 0 39 10 214 0 40 16 25 0 41 16 29 0 42 10 214 0 46 16 37 0 47 10 214 0 48 16 45 0 51 10 214 0 64 10 214 0 104 10 214 0 106 16 53 0 107 10 214 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 10 218 0 2 10 218 0 6 10 218 0 7 10 218 0 9 10 218 0 10 10 218 0 14 10 218 0 15 10 218 0 16 10 218 0 17 10 218 0 18 10 218 0 19 10 218 0 20 10 218 0 21 15 229 0 23 10 218 0 24 10 218 0 26 10 218 0 27 10 218 0 28 10 218 0 31 10 218 0 32 10 218 0 33 10 218 0 34 10 218 0 35 10 218 0 36 10 218 0 37 10 218 0 38 10 218 0 39 10 218 0 40 10 218 0 41 16 29 0 42 10 218 0 46 10 218 0 47 10 218 0 48 16 45 0 51 10 218 0 64 10 218 0 104 10 218 0 106 10 218 0 107 10 218 0 108 10 218 0 109 16 61 0 110 16 65 0 111 10 218 0 127 10 218 0 128 10 218 0 129] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 10 222 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 10 222 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 10 222 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 10 222 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 10 222 0 46 16 37 0 47 16 41 0 48 16 45 0 51 10 222 0 64 10 222 0 104 16 49 0 106 16 53 0 107 10 222 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 10 226 0 2 15 189 0 6 10 226 0 7 10 226 0 9 10 226 0 10 10 226 0 14 15 205 0 15 10 226 0 16 15 213 0 17 10 226 0 18 10 226 0 19 15 221 0 20 10 226 0 21 15 229 0 23 10 226 0 24 10 226 0 26 15 241 0 27 10 226 0 28 10 226 0 31 10 226 0 32 10 226 0 33 10 226 0 34 10 226 0 35 10 226 0 36 10 226 0 37 10 226 0 38 10 226 0 39 10 226 0 40 10 226 0 41 16 29 0 42 10 226 0 46 10 226 0 47 10 226 0 48 16 45 0 51 10 226 0 64 10 226 0 104 10 226 0 106 10 226 0 107 10 226 0 108 10 226 0 109 16 61 0 110 16 65 0 111 10 226 0 127 10 226 0 128 10 226 0 129] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 10 230 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 10 230 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 10 230 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 10 230 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 10 230 0 46 16 37 0 47 16 41 0 48 16 45 0 51 10 230 0 64 10 230 0 104 16 49 0 106 16 53 0 107 10 230 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 15 189 0 6 10 234 0 7 10 234 0 9 10 234 0 10 10 234 0 14 15 205 0 15 10 234 0 16 15 213 0 17 10 234 0 18 10 234 0 19 15 221 0 20 10 234 0 21 15 229 0 23 10 234 0 24 10 234 0 26 15 241 0 27 10 234 0 28 10 234 0 31 15 249 0 32 10 234 0 33 10 234 0 35 10 234 0 37 16 17 0 39 10 234 0 40 16 25 0 41 16 29 0 42 10 234 0 46 16 37 0 47 10 234 0 48 16 45 0 51 10 234 0 64 10 234 0 104 10 234 0 106 10 234 0 107 10 234 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 77 0 129] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 10 238 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 10 238 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 10 238 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 10 238 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 10 238 0 46 16 37 0 47 16 41 0 48 16 45 0 51 10 238 0 64 10 238 0 104 16 49 0 106 16 53 0 107 10 238 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 15 189 0 6 10 242 0 7 10 242 0 9 10 242 0 10 10 242 0 14 15 205 0 15 10 242 0 16 15 213 0 17 10 242 0 18 10 242 0 19 15 221 0 20 10 242 0 21 15 229 0 23 10 242 0 24 10 242 0 26 15 241 0 27 10 242 0 28 10 242 0 31 15 249 0 32 10 242 0 33 10 242 0 35 10 242 0 37 16 17 0 39 10 242 0 40 16 25 0 41 16 29 0 42 10 242 0 46 16 37 0 47 10 242 0 48 16 45 0 51 10 242 0 64 10 242 0 104 10 242 0 106 10 242 0 107 10 242 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 77 0 129] 
#[1 15 189 0 6 10 246 0 7 10 246 0 9 10 246 0 10 10 246 0 14 15 205 0 15 10 246 0 16 15 213 0 17 10 246 0 18 10 246 0 19 15 221 0 20 10 246 0 21 15 229 0 23 10 246 0 24 10 246 0 26 15 241 0 27 10 246 0 28 10 246 0 31 15 249 0 32 10 246 0 33 10 246 0 35 10 246 0 37 16 17 0 39 10 246 0 40 16 25 0 41 16 29 0 42 10 246 0 46 16 37 0 47 10 246 0 48 16 45 0 51 10 246 0 64 10 246 0 104 10 246 0 106 10 246 0 107 10 246 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 77 0 129] 
#[1 10 250 0 2 15 189 0 6 10 250 0 7 10 250 0 9 10 250 0 10 10 250 0 14 15 205 0 15 10 250 0 16 15 213 0 17 10 250 0 18 10 250 0 19 15 221 0 20 10 250 0 21 15 229 0 23 10 250 0 24 10 250 0 26 15 241 0 27 10 250 0 28 10 250 0 31 10 250 0 32 10 250 0 33 10 250 0 34 10 250 0 35 10 250 0 36 10 250 0 37 10 250 0 38 10 250 0 39 10 250 0 40 10 250 0 41 16 29 0 42 10 250 0 46 10 250 0 47 10 250 0 48 16 45 0 51 10 250 0 64 10 250 0 104 10 250 0 106 10 250 0 107 10 250 0 108 10 250 0 109 16 61 0 110 16 65 0 111 10 250 0 127 10 250 0 128 10 250 0 129] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 10 254 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 10 254 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 10 254 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 10 254 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 10 254 0 46 16 37 0 47 16 41 0 48 16 45 0 51 10 254 0 64 10 254 0 104 16 49 0 106 16 53 0 107 10 254 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 11 2 0 2 15 189 0 6 11 2 0 7 11 2 0 9 11 2 0 10 11 2 0 14 15 205 0 15 11 2 0 16 15 213 0 17 11 2 0 18 11 2 0 19 15 221 0 20 11 2 0 21 15 229 0 23 11 2 0 24 11 2 0 26 15 241 0 27 11 2 0 28 11 2 0 31 11 2 0 32 11 2 0 33 11 2 0 34 11 2 0 35 11 2 0 36 11 2 0 37 11 2 0 38 11 2 0 39 11 2 0 40 11 2 0 41 16 29 0 42 11 2 0 46 11 2 0 47 11 2 0 48 16 45 0 51 11 2 0 64 11 2 0 104 11 2 0 106 11 2 0 107 11 2 0 108 11 2 0 109 16 61 0 110 16 65 0 111 11 2 0 127 11 2 0 128 11 2 0 129] 
#[1 11 6 0 2 15 189 0 6 11 6 0 7 11 6 0 9 11 6 0 10 11 6 0 14 15 205 0 15 11 6 0 16 15 213 0 17 11 6 0 18 11 6 0 19 15 221 0 20 11 6 0 21 15 229 0 23 11 6 0 24 11 6 0 26 15 241 0 27 11 6 0 28 11 6 0 31 15 249 0 32 11 6 0 33 11 6 0 34 11 6 0 35 11 6 0 36 11 6 0 37 11 6 0 38 16 17 0 39 11 6 0 40 16 25 0 41 16 29 0 42 11 6 0 46 11 6 0 47 11 6 0 48 16 45 0 51 11 6 0 64 11 6 0 104 11 6 0 106 11 6 0 107 11 6 0 108 11 6 0 109 16 61 0 110 16 65 0 111 11 6 0 127 11 6 0 128 16 77 0 129] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 11 10 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 11 10 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 11 10 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 11 10 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 11 10 0 46 16 37 0 47 16 41 0 48 16 45 0 51 11 10 0 64 11 10 0 104 16 49 0 106 16 53 0 107 11 10 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[0 11 14 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 11 18 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 11 18 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 11 18 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 11 18 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 11 18 0 46 16 37 0 47 16 41 0 48 16 45 0 51 11 18 0 64 11 18 0 104 16 49 0 106 16 53 0 107 11 18 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 15 185 0 2 15 189 0 6 11 22 0 7 15 197 0 9 11 22 0 10 11 22 0 14 15 205 0 15 11 22 0 16 15 213 0 17 11 22 0 18 11 22 0 19 15 221 0 20 11 22 0 21 15 229 0 23 11 22 0 24 11 22 0 26 15 241 0 27 11 22 0 28 11 22 0 31 15 249 0 32 11 22 0 33 16 1 0 34 11 22 0 35 16 9 0 36 11 22 0 37 16 13 0 38 16 17 0 39 11 22 0 40 16 25 0 41 16 29 0 42 11 22 0 46 16 37 0 47 11 22 0 48 16 45 0 51 11 22 0 64 11 22 0 104 11 22 0 106 11 22 0 107 11 22 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 11 26 0 2 15 189 0 6 11 26 0 7 11 26 0 9 11 26 0 10 11 26 0 14 15 205 0 15 11 26 0 16 15 213 0 17 11 26 0 18 11 26 0 19 15 221 0 20 11 26 0 21 15 229 0 23 11 26 0 24 11 26 0 26 15 241 0 27 11 26 0 28 11 26 0 31 15 249 0 32 11 26 0 33 11 26 0 34 11 26 0 35 11 26 0 36 11 26 0 37 11 26 0 38 16 17 0 39 11 26 0 40 16 25 0 41 16 29 0 42 11 26 0 46 16 37 0 47 11 26 0 48 16 45 0 51 11 26 0 64 11 26 0 104 11 26 0 106 11 26 0 107 11 26 0 108 11 26 0 109 16 61 0 110 16 65 0 111 11 26 0 127 11 26 0 128 16 77 0 129] 
#[0 11 30 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 11 34 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 11 34 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 37 0 47 16 41 0 48 16 45 0 51 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129 24 129 1 16] 
#[0 24 133 0 14] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 24 137 0 46 16 37 0 47 16 41 0 48 16 45 0 51 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 15 189 0 6 11 38 0 7 11 38 0 9 11 38 0 10 11 38 0 14 15 205 0 15 11 38 0 16 15 213 0 17 11 38 0 18 11 38 0 19 15 221 0 20 11 38 0 21 15 229 0 23 11 38 0 24 11 38 0 26 15 241 0 27 11 38 0 28 11 38 0 31 15 249 0 32 11 38 0 33 11 38 0 35 11 38 0 37 16 17 0 39 11 38 0 40 16 25 0 41 16 29 0 42 11 38 0 46 16 37 0 47 11 38 0 48 16 45 0 51 11 38 0 64 11 38 0 104 11 38 0 106 11 38 0 107 11 38 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 77 0 129] 
#[1 15 189 0 6 11 42 0 7 11 42 0 9 11 42 0 10 11 42 0 14 15 205 0 15 11 42 0 16 15 213 0 17 11 42 0 18 11 42 0 19 15 221 0 20 11 42 0 21 15 229 0 23 11 42 0 24 11 42 0 26 15 241 0 27 11 42 0 28 11 42 0 31 15 249 0 32 11 42 0 33 11 42 0 35 11 42 0 37 16 17 0 39 11 42 0 40 16 25 0 41 16 29 0 42 11 42 0 46 16 37 0 47 11 42 0 48 16 45 0 51 11 42 0 64 11 42 0 104 11 42 0 106 11 42 0 107 11 42 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 77 0 129] 
#[1 11 46 0 2 15 189 0 6 11 46 0 7 11 46 0 9 11 46 0 10 11 46 0 14 15 205 0 15 11 46 0 16 15 213 0 17 11 46 0 18 11 46 0 19 15 221 0 20 11 46 0 21 15 229 0 23 11 46 0 24 11 46 0 26 15 241 0 27 11 46 0 28 11 46 0 31 15 249 0 32 11 46 0 33 11 46 0 34 11 46 0 35 11 46 0 36 11 46 0 37 11 46 0 38 16 17 0 39 11 46 0 40 16 25 0 41 16 29 0 42 11 46 0 46 11 46 0 47 11 46 0 48 16 45 0 51 11 46 0 64 11 46 0 104 11 46 0 106 11 46 0 107 11 46 0 108 11 46 0 109 16 61 0 110 16 65 0 111 11 46 0 127 11 46 0 128 11 46 0 129] 
#[0 11 50 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 11 34 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 11 34 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 37 0 47 16 41 0 48 16 45 0 51 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129 24 141 1 16] 
#[1 1 59 0 3 24 149 0 24 1 6 0 53 1 6 0 77 24 153 0 108 1 6 0 112 1 6 0 113 1 6 0 123 24 157 0 179 0 245 0 237 24 161 1 9 24 165 1 12 24 169 1 13] 
#[0 11 54 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 71 0 73 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 11 58 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 71 0 73 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 11 62 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 71 0 73 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 24 173 0 104] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 24 177 0 132] 
#[0 11 66 0 19 0 128] 
#[0 11 70 0 11 0 12 0 19 0 31 0 35 0 104 0 126 0 128] 
#[1 24 181 0 17 11 74 0 19 11 74 0 31 11 74 0 35 11 74 0 104 11 74 0 128] 
#[0 11 78 0 19 0 128] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 24 185 0 134 24 185 0 135 24 185 0 137 1 213 0 235 24 185 1 69 24 185 1 71 24 185 1 72 24 185 1 73 24 185 1 74 24 185 1 77 24 185 1 78 24 185 1 79 24 185 1 80 24 185 1 81 2 1 1 82 24 185 1 90 24 185 1 91 24 185 1 92 24 185 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 24 185 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 24 189 0 104] 
#[1 3 61 0 101 1 118 0 104 24 193 0 210 24 193 0 229] 
#[0 24 197 0 104] 
#[0 11 82 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 11 86 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 2 141 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 24 201 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 16 229 0 236 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 24 205 0 132] 
#[0 11 90 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 11 94 0 2 11 94 0 6 11 94 0 7 11 94 0 9 11 94 0 10 11 94 0 14 11 94 0 15 11 94 0 16 11 94 0 17 11 94 0 18 11 94 0 19 11 94 0 20 11 94 0 21 16 253 0 22 11 94 0 23 11 94 0 24 11 94 0 26 11 94 0 27 11 94 0 28 11 94 0 29 11 94 0 30 11 94 0 31 11 94 0 32 11 94 0 33 11 94 0 34 11 94 0 35 11 94 0 36 11 94 0 37 11 94 0 38 11 94 0 39 11 94 0 40 11 94 0 41 11 94 0 42 11 94 0 46 11 94 0 47 11 94 0 48 11 94 0 51 11 94 0 64 11 94 0 70 11 94 0 101 11 94 0 104 11 94 0 105 11 94 0 106 11 94 0 107 11 94 0 108 11 94 0 109 11 94 0 110 11 94 0 111 11 94 0 127 11 94 0 128 11 94 0 129 24 209 1 83] 
#[0 11 98 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[0 11 102 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[0 11 106 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[0 11 110 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 11 114 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 24 213 0 134 24 213 0 135 24 213 0 137 1 213 0 235 24 213 1 69 24 213 1 71 24 213 1 72 24 213 1 73 24 213 1 74 24 213 1 77 24 213 1 78 24 213 1 79 24 213 1 80 24 213 1 81 2 1 1 82 24 213 1 90 24 213 1 91 24 213 1 92 24 213 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 24 213 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 24 217 0 134 24 217 0 135 24 217 0 137 1 213 0 235 24 217 1 69 24 217 1 71 24 217 1 72 24 217 1 73 24 217 1 74 24 217 1 77 24 217 1 78 24 217 1 79 24 217 1 80 24 217 1 81 2 1 1 82 24 217 1 90 24 217 1 91 24 217 1 92 24 217 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 24 217 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 11 118 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 1 6 0 1 1 6 0 3 1 6 0 5 1 6 0 11 1 6 0 12 1 6 0 13 11 122 0 14 1 6 0 15 1 6 0 25 1 6 0 30 1 6 0 42 1 6 0 44 1 6 0 45 1 6 0 49 1 6 0 53 1 6 0 60 1 6 0 63 1 6 0 66 1 6 0 69 1 6 0 70 1 6 0 72 1 6 0 77 1 6 0 87 1 6 0 90 1 6 0 97 1 6 0 112 1 6 0 113 1 6 0 126 1 6 0 127 1 6 0 129 24 221 0 179 24 225 1 88] 
#[0 11 126 0 14 0 19] 
#[0 11 130 0 14 0 19] 
#[0 11 134 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 15 17 0 134 15 17 0 135 15 17 0 137 15 5 0 248 15 9 0 249 24 229 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 15 17 1 65 15 17 1 66 15 17 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[0 11 138 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136] 
#[0 11 142 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136 1 137] 
#[0 11 146 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136] 
#[1 4 126 0 2 4 126 0 6 4 126 0 7 4 126 0 9 4 126 0 10 4 126 0 15 4 126 0 16 4 126 0 17 4 126 0 18 4 126 0 20 4 126 0 21 4 126 0 23 4 126 0 24 4 126 0 26 4 126 0 27 4 126 0 28 21 173 0 31 4 126 0 32 4 126 0 33 4 126 0 34 4 126 0 35 4 126 0 36 4 126 0 38 4 126 0 39 4 126 0 40 4 126 0 41 4 126 0 42 4 126 0 47 4 126 0 48 4 126 0 51 4 126 0 106 4 126 0 107 11 150 0 108 4 126 0 109 4 126 0 110 4 126 0 111 4 126 0 127 4 126 0 128 4 126 0 129] 
#[0 11 154 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 11 158 0 19 0 128] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 24 233 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[1 24 237 0 13 24 245 0 53 24 245 0 77 24 241 0 87 24 245 0 112 24 245 0 113 24 245 1 131] 
#[0 11 162 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 11 166 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 11 170 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 11 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 11 178 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 11 182 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 11 186 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 11 190 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 11 194 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 11 198 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 11 202 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 10 177 0 13 11 206 0 14 10 181 0 45 11 206 0 46 10 185 0 104 11 206 0 108 24 249 0 147 10 197 0 148] 
#[0 11 210 0 14 0 31 0 46 0 108] 
#[0 11 214 0 14 0 31 0 46 0 108] 
#[0 11 218 0 14 0 31 0 46 0 108] 
#[0 11 222 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 24 253 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 37 0 47 16 41 0 48 16 45 0 51 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[0 11 226 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 11 230 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 11 234 0 14 0 19] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 25 1 0 134 25 1 0 135 25 1 0 137 1 213 0 235 25 1 1 69 25 1 1 71 25 1 1 72 25 1 1 73 25 1 1 74 25 1 1 77 25 1 1 78 25 1 1 79 25 1 1 80 25 1 1 81 2 1 1 82 25 1 1 90 25 1 1 91 25 1 1 92 25 1 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 25 1 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 11 238 0 19 0 108] 
#[0 11 242 0 19 0 108] 
#[0 11 246 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 11 250 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 25 5 0 31] 
#[0 11 254 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 25 9 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[0 12 2 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 12 6 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 25 13 0 132] 
#[0 12 10 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 25 17 0 31] 
#[0 25 21 0 108] 
#[0 12 14 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 25 25 0 31] 
#[0 25 29 0 31] 
#[0 12 18 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 25 33 0 134 25 33 0 135 25 33 0 137 1 213 0 235 25 33 1 69 25 33 1 71 25 33 1 72 25 33 1 73 25 33 1 74 25 33 1 77 25 33 1 78 25 33 1 79 25 33 1 80 25 33 1 81 2 1 1 82 25 33 1 90 25 33 1 91 25 33 1 92 25 33 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 25 33 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 12 22 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 12 26 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 25 37 0 104] 
#[0 25 41 0 31] 
#[1 1 118 0 31 3 61 0 101 25 45 0 210 25 45 0 229] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 25 49 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[1 3 61 0 101 1 118 0 104 25 53 0 210 25 53 0 229] 
#[1 1 118 0 31 3 61 0 101 25 57 0 210 25 57 0 229] 
#[1 7 145 0 29 2 110 0 31 2 110 0 101 7 149 0 214 25 61 0 215] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 25 65 0 132] 
#[0 12 30 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 25 69 0 104] 
#[1 3 61 0 101 1 118 0 104 25 73 0 210 25 73 0 229] 
#[0 25 77 0 104] 
#[1 3 61 0 101 1 118 0 104 25 81 0 210 25 81 0 229] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 25 85 0 134 25 85 0 135 25 85 0 137 1 213 0 235 25 85 1 69 25 85 1 71 25 85 1 72 25 85 1 73 25 85 1 74 25 85 1 77 25 85 1 78 25 85 1 79 25 85 1 80 25 85 1 81 2 1 1 82 25 85 1 90 25 85 1 91 25 85 1 92 25 85 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 25 85 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 3 61 0 101 1 118 0 104 25 89 0 210 25 89 0 229] 
#[0 25 93 0 104] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 25 97 0 132] 
#[0 12 34 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 25 101 0 132] 
#[0 12 38 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 25 105 0 31] 
#[0 25 109 0 108] 
#[0 25 113 0 104] 
#[0 25 117 0 31] 
#[1 1 118 0 31 3 61 0 101 25 121 0 210 25 121 0 229] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 25 125 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[0 12 42 0 19 0 31 0 108] 
#[0 25 129 0 108] 
#[0 12 46 0 31 0 101 0 104] 
#[0 12 50 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 25 133 0 31 6 197 0 104 25 137 0 251] 
#[0 12 54 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 12 58 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 12 62 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 12 66 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 25 141 0 31 3 61 0 101 6 197 0 104 25 145 0 229 25 149 0 251] 
#[1 25 153 0 31 6 197 0 104 25 157 0 251] 
#[0 12 70 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 3 113 0 1 2 141 0 3 2 37 0 5 14 185 0 9 2 33 0 11 2 33 0 12 18 229 0 13 1 137 0 15 14 193 0 20 14 197 0 24 18 233 0 25 18 237 0 30 1 145 0 42 19 29 0 44 18 241 0 45 18 245 0 49 15 89 0 53 14 209 0 56 2 37 0 60 1 165 0 63 1 169 0 66 14 213 0 67 0 42 0 69 1 173 0 70 1 177 0 72 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 1 181 0 97 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 2 33 0 126 3 125 0 127 23 21 0 129 19 5 0 134 19 5 0 135 19 5 0 137 19 17 0 183 1 213 0 235 6 65 0 238 15 5 0 248 15 9 0 249 19 21 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 15 17 1 65 15 17 1 66 15 17 1 68 19 25 1 69 19 25 1 71 19 25 1 72 19 25 1 73 19 25 1 74 19 25 1 77 19 25 1 78 19 25 1 79 19 25 1 80 19 25 1 81 2 1 1 82 19 25 1 90 19 25 1 91 19 25 1 92 19 25 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 19 29 1 112 15 85 1 119 19 33 1 120 19 25 1 121 3 177 1 124 2 57 1 125 15 89 1 131 15 93 1 136] 
#[1 5 134 0 14 5 134 0 19 25 161 0 177] 
#[1 1 63 0 14 1 63 0 19 10 70 0 29 2 6 0 31 1 63 0 46 10 70 0 105] 
#[1 3 113 0 1 2 37 0 5 14 185 0 9 4 25 0 11 4 25 0 12 18 229 0 13 1 137 0 15 14 193 0 20 14 197 0 24 18 237 0 30 1 145 0 42 19 29 0 44 18 241 0 45 18 245 0 49 15 89 0 53 14 209 0 56 2 37 0 60 3 253 0 63 1 169 0 66 14 213 0 67 0 42 0 69 1 173 0 70 4 1 0 72 15 89 0 77 25 165 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 1 181 0 97 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 4 25 0 126 3 125 0 127 23 21 0 129 19 5 0 134 19 5 0 135 19 5 0 137 1 213 0 235 15 5 0 248 15 9 0 249 20 21 1 43 20 21 1 44 20 21 1 45 20 21 1 46 20 21 1 47 20 21 1 49 19 213 1 50 20 21 1 51 20 21 1 52 20 21 1 59 20 21 1 63 20 21 1 65 20 21 1 66 20 21 1 68 4 9 1 70 4 9 1 71 4 9 1 72 4 9 1 73 4 9 1 74 4 9 1 77 4 9 1 78 4 9 1 79 4 9 1 80 4 9 1 81 2 1 1 82 4 9 1 91 4 9 1 93 4 9 1 94 4 21 1 99 4 25 1 103 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 19 29 1 112 15 85 1 119 19 33 1 120 4 9 1 121 3 177 1 124 2 57 1 125 15 89 1 131 15 93 1 136] 
#[1 12 74 0 14 12 74 0 19 25 169 0 29] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 25 173 0 134 25 173 0 135 25 173 0 137 1 213 0 235 25 173 1 69 25 173 1 71 25 173 1 72 25 173 1 73 25 173 1 74 25 173 1 77 25 173 1 78 25 173 1 79 25 173 1 80 25 173 1 81 2 1 1 82 25 173 1 90 25 173 1 91 25 173 1 92 25 173 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 25 173 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 3 113 0 1 2 37 0 5 14 185 0 9 18 229 0 13 1 137 0 15 14 193 0 20 14 197 0 24 18 237 0 30 1 145 0 42 19 29 0 44 18 241 0 45 18 245 0 49 23 169 0 53 14 209 0 56 2 37 0 60 3 253 0 63 1 169 0 66 14 213 0 67 0 42 0 69 1 173 0 70 4 1 0 72 23 169 0 77 14 217 0 81 14 221 0 85 25 177 0 87 2 37 0 90 14 225 0 92 1 181 0 97 23 169 0 112 23 169 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 23 21 0 129 19 5 0 134 19 5 0 135 19 5 0 137 1 213 0 235 15 5 0 248 15 9 0 249 23 221 1 43 23 221 1 44 23 221 1 45 23 221 1 46 23 221 1 47 23 221 1 49 19 213 1 50 23 221 1 51 23 221 1 52 23 221 1 59 23 221 1 63 23 221 1 65 23 221 1 66 23 221 1 68 6 105 1 70 6 105 1 71 6 105 1 72 6 105 1 73 6 105 1 74 6 105 1 77 6 105 1 78 6 105 1 79 6 105 1 80 6 105 1 81 2 1 1 82 6 105 1 91 6 105 1 93 6 105 1 94 4 21 1 99 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 19 29 1 112 15 85 1 119 19 33 1 120 6 105 1 121 3 177 1 124 2 57 1 125 23 169 1 131 15 93 1 136] 
#[1 0 54 0 1 0 54 0 13 1 67 0 14 1 67 0 19 0 54 0 25 0 54 0 29 0 54 0 30 0 54 0 104 0 54 0 105 0 54 0 127] 
#[1 3 113 0 1 2 37 0 5 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 3 253 0 63 1 169 0 66 0 42 0 69 1 173 0 70 4 1 0 72 2 37 0 77 25 181 0 81 25 185 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 3 125 0 127 1 193 0 129 6 113 0 134 6 113 0 135 6 113 0 137 1 213 0 235 6 113 1 70 6 113 1 71 6 113 1 72 6 113 1 73 6 113 1 74 6 113 1 77 6 113 1 78 6 113 1 79 6 113 1 80 6 113 1 81 2 1 1 82 6 113 1 91 6 113 1 93 6 113 1 94 4 21 1 99 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 6 113 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 25 189 0 25 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 25 193 0 134 25 193 0 135 25 193 0 137 1 213 0 235 25 193 1 69 25 193 1 71 25 193 1 72 25 193 1 73 25 193 1 74 25 193 1 77 25 193 1 78 25 193 1 79 25 193 1 80 25 193 1 81 2 1 1 82 25 193 1 90 25 193 1 91 25 193 1 92 25 193 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 25 193 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 4 69 0 13 2 74 0 14 2 74 0 17 2 74 0 19 2 74 0 30 2 74 0 31 2 74 0 46 4 77 0 127 25 197 1 113 6 181 1 126] 
#[1 19 29 0 5 19 29 0 44 19 29 0 53 19 29 0 60 19 29 0 77 19 29 0 87 19 29 0 90 19 29 0 112 19 29 0 113 19 29 1 107 21 45 1 111 19 29 1 112 7 25 1 125 19 29 1 131] 
#[1 1 6 0 1 1 6 0 3 1 6 0 5 1 6 0 9 1 6 0 11 1 6 0 12 1 6 0 13 12 82 0 14 1 6 0 15 1 6 0 20 1 6 0 24 1 6 0 25 1 6 0 30 1 6 0 42 1 6 0 44 1 6 0 45 1 6 0 49 1 6 0 53 1 6 0 56 1 6 0 60 1 6 0 63 1 6 0 66 1 6 0 67 1 6 0 69 1 6 0 70 1 6 0 72 1 6 0 77 1 6 0 81 1 6 0 85 1 6 0 87 1 6 0 90 1 6 0 92 1 6 0 97 1 6 0 105 1 6 0 112 1 6 0 113 1 6 0 117 1 6 0 118 1 6 0 120 1 6 0 121 1 6 0 122 1 6 0 123 1 6 0 125 1 6 0 126 1 6 0 127 1 6 0 129 23 9 0 179 25 201 0 182 1 6 1 136] 
#[0 12 86 0 14 0 19] 
#[0 12 90 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 25 205 0 31 3 61 0 101 6 197 0 104 25 209 0 229 25 213 0 251] 
#[1 25 217 0 31 6 197 0 104 25 221 0 251] 
#[0 12 94 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 18 201 0 22 25 225 0 31 3 61 0 101 6 197 0 104 25 229 0 184 25 233 0 229 25 237 0 251] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 25 241 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[0 12 98 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 12 102 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 25 245 0 132] 
#[0 12 106 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 25 249 0 31] 
#[0 25 253 0 108] 
#[0 12 110 0 19 0 31 0 35 0 104] 
#[1 1 6 0 1 1 6 0 3 1 6 0 5 1 6 0 11 1 6 0 12 1 6 0 13 26 1 0 14 1 6 0 15 1 6 0 30 1 6 0 42 1 6 0 44 1 6 0 45 1 6 0 49 1 6 0 53 1 6 0 60 1 6 0 63 1 6 0 66 1 6 0 69 1 6 0 70 1 6 0 72 1 6 0 77 1 6 0 87 1 6 0 90 1 6 0 97 1 6 0 112 1 6 0 113 1 6 0 126 1 6 0 127 1 6 0 129 10 121 0 179 26 5 1 84 10 129 1 85 10 133 1 88 10 137 1 89] 
#[0 12 114 0 19 0 108] 
#[0 12 118 0 19 0 108] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 26 9 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[0 12 122 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 12 126 0 1 0 3 0 5 0 8 0 9 0 13 0 14 0 15 0 20 0 24 0 26 0 30 0 44 0 45 0 52 0 53 0 56 0 57 0 59 0 60 0 67 0 70 0 71 0 74 0 75 0 77 0 78 0 80 0 86 0 87 0 90 0 92 0 97 0 102 0 104 0 105 0 107 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136] 
#[0 12 130 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 12 134 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 23 137 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 37 0 47 16 41 0 48 16 45 0 51 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[0 12 138 0 1 0 3 0 5 0 8 0 9 0 13 0 14 0 15 0 20 0 24 0 26 0 30 0 44 0 45 0 52 0 53 0 56 0 57 0 59 0 60 0 67 0 70 0 71 0 74 0 75 0 77 0 78 0 80 0 86 0 87 0 90 0 92 0 97 0 102 0 104 0 105 0 107 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 26 13 0 134 26 13 0 135 26 13 0 137 9 141 0 238 26 13 0 244 26 13 0 245 26 13 0 246 26 13 0 247 26 13 0 248 26 13 0 249 26 13 0 250 26 13 0 251 26 13 0 254 26 13 0 255 26 13 1 7 26 13 1 8 26 13 1 14 26 13 1 18 26 13 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 26 13 1 29 26 13 1 30 26 13 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 26 13 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 26 17 0 19 12 142 0 46 26 21 1 1] 
#[0 12 146 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 12 150 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 0 190 0 1 0 190 0 13 1 71 0 14 1 71 0 19 0 190 0 25 1 71 0 29 0 190 0 30 1 71 0 31 1 71 0 35 1 71 0 37 26 25 0 43 1 71 0 46 1 71 0 71 1 71 0 73 0 190 0 104 1 71 0 105 1 71 0 108 0 190 0 127] 
#[0 12 154 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 12 158 0 14 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 15 17 0 134 15 17 0 135 15 17 0 137 15 5 0 248 15 9 0 249 26 29 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 15 17 1 65 15 17 1 66 15 17 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[0 12 162 0 14 0 19 0 46] 
#[1 12 166 0 14 26 33 0 19 26 37 1 61] 
#[0 12 170 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 12 174 0 46 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 15 17 0 134 15 17 0 135 15 17 0 137 15 5 0 248 15 9 0 249 26 29 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 15 17 1 65 15 17 1 66 15 17 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[1 26 41 0 19 12 178 0 46 26 37 1 61] 
#[0 12 182 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 15 17 0 134 15 17 0 135 15 17 0 137 15 5 0 248 15 9 0 249 26 45 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 15 17 1 65 15 17 1 66 15 17 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[1 12 186 0 14 12 186 0 19 12 186 0 29 12 186 0 31 12 186 0 35 12 186 0 37 26 49 0 43 12 186 0 46 12 186 0 71 12 186 0 73 12 186 0 105 12 186 0 108] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 15 17 0 134 15 17 0 135 15 17 0 137 15 5 0 248 15 9 0 249 26 53 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 15 17 1 65 15 17 1 66 15 17 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[1 12 190 0 14 12 190 0 19 12 190 0 29 12 190 0 31 12 190 0 35 12 190 0 37 12 190 0 46 12 190 0 71 12 190 0 73 1 75 0 105 12 190 0 108 23 233 1 40] 
#[0 12 194 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 37 0 47 16 41 0 48 16 45 0 51 6 197 0 104 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129 26 57 0 251] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 26 61 0 134 26 61 0 135 26 61 0 137 15 5 0 248 15 9 0 249 26 61 1 42 26 61 1 43 26 61 1 44 26 61 1 45 26 61 1 46 26 61 1 47 26 61 1 48 26 61 1 49 15 49 1 50 26 61 1 51 26 61 1 52 26 61 1 59 26 61 1 63 26 61 1 65 26 61 1 66 26 61 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[0 12 198 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 6 221 0 123 6 225 0 125 26 65 0 248 26 69 0 249] 
#[1 9 237 0 5 9 237 0 44 9 237 0 53 9 237 0 60 9 237 0 77 9 237 0 87 9 237 0 90 9 237 0 112 9 237 0 113 9 237 1 107 14 149 1 111 9 237 1 112 9 237 1 131] 
#[0 7 226 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 7 242 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 8 2 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 8 10 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 12 202 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 8 78 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 8 86 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 12 206 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 12 210 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 12 214 0 14 26 73 0 19 23 181 1 61 26 77 1 62] 
#[0 26 81 0 14] 
#[0 12 218 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 141 0 3 26 85 0 24 26 101 0 53 26 101 0 77 26 89 0 81 26 93 0 85 26 101 0 112 26 101 0 113 26 97 0 123 6 65 0 238 26 97 1 6 26 101 1 131] 
#[0 26 105 0 108] 
#[1 26 109 0 19 12 222 0 108] 
#[1 12 226 0 19 12 226 0 108 26 113 1 56] 
#[0 12 230 0 108] 
#[0 12 234 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 26 117 0 134 26 117 0 135 26 117 0 137 9 141 0 238 26 117 0 244 26 117 0 245 26 117 0 246 26 117 0 247 26 117 0 248 26 117 0 249 26 117 0 250 26 117 0 251 26 117 0 254 26 117 0 255 26 117 1 7 26 117 1 8 26 117 1 14 26 117 1 18 26 117 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 26 117 1 29 26 117 1 30 26 117 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 26 117 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 93 0 71 9 97 0 74 6 197 0 104 26 121 0 251 26 125 1 29 26 129 1 30] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 37 0 47 16 41 0 48 16 45 0 51 26 133 0 64 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 1 79 0 3 12 238 0 5 12 238 0 9 12 238 0 13 12 238 0 20 12 238 0 24 12 238 0 30 12 238 0 44 12 238 0 45 12 238 0 49 12 238 0 53 12 238 0 56 12 238 0 60 12 238 0 67 12 238 0 77 12 238 0 81 12 238 0 85 12 238 0 87 12 238 0 90 12 238 0 92 12 238 0 105 26 137 0 108 12 238 0 112 12 238 0 113 12 238 0 117 12 238 0 118 12 238 0 120 12 238 0 121 12 238 0 122 12 238 0 123 12 238 0 125 12 238 0 127 12 238 0 129 0 245 0 237 26 141 1 32 26 145 1 34 12 238 1 136] 
#[1 3 113 0 1 2 37 0 5 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 3 253 0 63 1 169 0 66 0 42 0 69 1 173 0 70 4 1 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 3 125 0 127 1 193 0 129 26 149 0 134 26 149 0 135 26 149 0 137 1 213 0 235 26 149 1 70 26 149 1 71 26 149 1 72 26 149 1 73 26 149 1 74 26 149 1 77 26 149 1 78 26 149 1 79 26 149 1 80 26 149 1 81 2 1 1 82 26 149 1 91 26 149 1 93 26 149 1 94 4 21 1 99 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 26 149 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 12 242 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 12 242 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 12 242 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 12 242 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 12 242 0 46 16 37 0 47 16 41 0 48 16 45 0 51 12 242 0 64 12 242 0 104 16 49 0 106 16 53 0 107 12 242 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 26 153 0 22 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 26 157 0 134 26 157 0 135 26 157 0 137 9 141 0 238 26 157 0 244 26 157 0 245 26 157 0 246 26 157 0 247 26 157 0 248 26 157 0 249 26 157 0 250 26 157 0 251 26 157 0 254 26 157 0 255 26 157 1 7 26 157 1 8 26 157 1 14 26 157 1 18 26 157 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 26 157 1 29 26 157 1 30 26 157 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 26 157 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 6 197 0 104 26 161 0 251] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 26 165 0 134 26 165 0 135 26 165 0 137 9 141 0 238 26 165 0 244 26 165 0 245 26 165 0 246 26 165 0 247 26 165 0 248 26 165 0 249 26 165 0 250 26 165 0 251 26 165 0 254 26 165 0 255 26 165 1 7 26 165 1 8 26 165 1 14 26 165 1 18 26 165 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 26 165 1 29 26 165 1 30 26 165 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 26 165 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 6 197 0 104 26 169 0 251] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 26 173 0 134 26 173 0 135 26 173 0 137 1 213 0 235 26 173 1 69 26 173 1 71 26 173 1 72 26 173 1 73 26 173 1 74 26 173 1 77 26 173 1 78 26 173 1 79 26 173 1 80 26 173 1 81 2 1 1 82 26 173 1 90 26 173 1 91 26 173 1 92 26 173 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 26 173 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 3 113 0 1 2 37 0 5 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 3 253 0 63 1 169 0 66 0 42 0 69 1 173 0 70 4 1 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 3 125 0 127 1 193 0 129 26 177 0 134 26 177 0 135 26 177 0 137 1 213 0 235 26 177 1 70 26 177 1 71 26 177 1 72 26 177 1 73 26 177 1 74 26 177 1 77 26 177 1 78 26 177 1 79 26 177 1 80 26 177 1 81 2 1 1 82 26 177 1 91 26 177 1 93 26 177 1 94 4 21 1 99 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 26 177 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 12 246 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 12 246 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 12 246 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 12 246 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 12 246 0 46 16 37 0 47 16 41 0 48 16 45 0 51 12 246 0 64 12 246 0 104 16 49 0 106 16 53 0 107 12 246 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 1 6 0 3 1 6 0 5 1 6 0 9 1 6 0 13 1 6 0 20 1 6 0 24 1 6 0 30 1 6 0 44 1 6 0 45 1 6 0 49 1 6 0 53 1 6 0 56 1 6 0 60 1 6 0 67 1 6 0 77 1 6 0 81 1 6 0 85 1 6 0 87 1 6 0 90 1 6 0 92 1 83 0 105 1 6 0 112 1 6 0 113 1 6 0 117 1 6 0 118 1 6 0 120 1 6 0 121 1 6 0 122 1 6 0 123 1 6 0 125 1 6 0 127 1 6 0 129 15 149 0 179 26 181 1 22 1 6 1 136] 
#[0 12 254 0 19 0 105] 
#[0 13 2 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 26 185 0 14 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 21 9 0 134 21 9 0 135 21 9 0 137 9 141 0 238 21 9 0 244 21 9 0 245 21 9 0 246 21 9 0 247 21 9 0 248 21 9 0 249 21 9 0 250 21 9 0 251 21 9 0 254 21 9 0 255 21 9 1 7 21 9 1 8 21 9 1 14 26 189 1 17 21 9 1 18 21 9 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 21 9 1 29 21 9 1 30 21 9 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 21 9 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 13 6 0 14 26 193 0 19 26 197 1 15] 
#[0 13 10 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 13 14 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 26 201 0 14 26 205 0 19 26 197 1 15] 
#[0 1 17 0 1] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 26 209 0 134 26 209 0 135 26 209 0 137 9 141 0 238 26 209 0 244 26 209 0 245 26 209 0 246 26 209 0 247 26 209 0 248 26 209 0 249 26 209 0 250 26 209 0 251 26 209 0 254 26 209 0 255 26 209 1 7 26 209 1 8 26 209 1 14 26 209 1 18 26 209 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 26 209 1 29 26 209 1 30 26 209 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 26 209 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[0 13 18 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 2 141 0 3 26 217 0 53 26 217 0 77 26 217 0 112 26 217 0 113 26 213 0 123 6 65 0 238 26 213 1 6 26 217 1 131] 
#[0 26 221 0 108] 
#[1 13 22 0 19 13 22 0 108 26 225 1 11] 
#[0 26 229 0 108] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 26 233 0 132] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 26 237 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[0 13 26 0 11 0 12 0 19 0 31 0 35 0 104 0 126 0 128] 
#[0 13 30 0 19 0 128] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 26 241 0 132] 
#[0 26 245 0 104] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 26 249 0 132] 
#[0 13 34 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 26 253 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[0 13 38 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 13 42 0 14 0 19] 
#[0 13 46 0 14 0 19] 
#[1 3 113 0 1 2 141 0 3 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 27 1 0 25 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 17 5 0 49 17 13 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 17 13 0 77 2 37 0 87 2 37 0 90 1 181 0 97 17 13 0 112 17 13 0 113 2 33 0 126 3 125 0 127 1 193 0 129 17 9 0 134 17 9 0 135 17 9 0 137 1 213 0 235 6 65 0 238 17 9 1 69 17 9 1 71 17 9 1 72 17 9 1 73 17 9 1 74 17 9 1 77 17 9 1 78 17 9 1 79 17 9 1 80 17 9 1 81 2 1 1 82 17 9 1 90 17 9 1 91 17 9 1 92 17 9 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 17 9 1 121 3 177 1 124 2 57 1 125 17 13 1 131] 
#[0 13 50 0 14 0 19] 
#[1 27 5 0 29 27 9 0 31 27 13 0 35] 
#[0 27 17 0 108] 
#[1 21 233 0 1 21 233 0 2 21 233 0 3 21 201 0 4 21 225 0 5 21 233 0 6 21 233 0 7 21 233 0 9 21 233 0 10 21 225 0 11 21 225 0 12 10 177 0 13 21 221 0 15 21 233 0 16 21 221 0 17 21 233 0 18 21 233 0 19 21 233 0 20 21 233 0 21 21 233 0 22 21 233 0 23 21 233 0 24 21 233 0 25 21 233 0 26 21 233 0 27 21 233 0 28 21 233 0 29 21 233 0 30 21 233 0 31 21 233 0 32 21 233 0 33 21 233 0 34 21 233 0 35 21 233 0 36 21 233 0 37 21 233 0 38 21 233 0 39 21 233 0 40 21 233 0 41 21 221 0 42 21 233 0 43 21 225 0 44 10 181 0 45 21 233 0 47 21 233 0 48 21 233 0 49 21 225 0 50 21 225 0 51 21 225 0 52 21 225 0 53 21 225 0 54 21 225 0 55 21 225 0 56 21 225 0 57 21 225 0 58 21 225 0 59 21 225 0 60 21 225 0 62 21 225 0 63 21 225 0 64 21 225 0 65 21 225 0 66 6 189 0 67 21 225 0 68 21 225 0 69 21 225 0 70 21 225 0 71 21 225 0 72 21 225 0 73 21 225 0 74 21 225 0 75 21 225 0 76 21 225 0 77 21 225 0 78 21 225 0 79 21 225 0 80 21 225 0 81 21 225 0 82 21 225 0 83 21 225 0 84 21 225 0 85 21 225 0 86 21 225 0 87 21 225 0 88 21 225 0 89 21 225 0 90 21 225 0 91 6 193 0 92 21 225 0 93 21 225 0 94 21 225 0 95 21 225 0 96 21 225 0 97 21 225 0 98 21 225 0 99 21 225 0 100 21 225 0 101 21 225 0 102 21 225 0 103 10 185 0 104 21 233 0 105 21 233 0 106 21 233 0 107 21 225 0 112 21 225 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 21 225 0 126 21 233 0 127 21 233 0 128 21 233 0 129 21 209 0 148 27 21 0 150 27 25 0 151 21 217 0 152 21 221 0 155 21 217 0 247 21 217 0 248 21 217 0 249 21 225 1 131 21 225 1 132 21 225 1 133 21 217 1 134 21 233 1 135 7 21 1 136] 
#[0 27 29 0 29] 
#[0 27 33 0 29] 
#[0 13 54 0 14 0 31 0 46 0 108] 
#[0 13 58 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 13 62 0 19 0 108] 
#[0 13 66 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 27 37 0 108] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 27 41 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[0 13 70 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 13 74 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 13 78 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 13 82 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 27 45 0 31] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 27 49 0 132] 
#[0 13 86 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 27 53 0 31] 
#[0 27 57 0 108] 
#[0 27 61 0 104] 
#[0 27 65 0 31] 
#[1 1 118 0 31 3 61 0 101 27 69 0 210 27 69 0 229] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 27 73 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 27 77 0 132] 
#[0 27 81 0 104] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 27 85 0 132] 
#[0 27 89 0 104] 
#[1 3 61 0 101 1 118 0 104 27 93 0 210 27 93 0 229] 
#[0 27 97 0 104] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 27 101 0 132] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 27 105 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 27 109 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[0 13 90 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 13 94 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 27 113 0 132] 
#[0 13 98 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 27 117 0 31] 
#[0 27 121 0 108] 
#[0 13 102 0 19 0 31 0 108] 
#[0 13 106 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 13 110 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 13 114 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 27 125 0 31 6 197 0 104 27 129 0 251] 
#[0 13 118 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 13 122 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 13 126 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 13 130 0 14 27 133 0 19 23 61 0 176] 
#[1 3 113 0 1 2 37 0 5 14 185 0 9 18 229 0 13 1 137 0 15 14 193 0 20 14 197 0 24 18 237 0 30 1 145 0 42 19 29 0 44 18 241 0 45 18 245 0 49 23 169 0 53 14 209 0 56 2 37 0 60 3 253 0 63 1 169 0 66 14 213 0 67 0 42 0 69 1 173 0 70 4 1 0 72 23 169 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 1 181 0 97 23 169 0 112 23 169 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 23 21 0 129 19 5 0 134 19 5 0 135 19 5 0 137 1 213 0 235 15 5 0 248 15 9 0 249 23 221 1 43 23 221 1 44 23 221 1 45 23 221 1 46 23 221 1 47 23 221 1 49 19 213 1 50 23 221 1 51 23 221 1 52 23 221 1 59 23 221 1 63 23 221 1 65 23 221 1 66 23 221 1 68 6 105 1 70 6 105 1 71 6 105 1 72 6 105 1 73 6 105 1 74 6 105 1 77 6 105 1 78 6 105 1 79 6 105 1 80 6 105 1 81 2 1 1 82 6 105 1 91 6 105 1 93 6 105 1 94 4 21 1 99 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 19 29 1 112 15 85 1 119 19 33 1 120 6 105 1 121 3 177 1 124 2 57 1 125 23 169 1 131 15 93 1 136] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 27 137 0 134 27 137 0 135 27 137 0 137 1 213 0 235 27 137 1 69 27 137 1 71 27 137 1 72 27 137 1 73 27 137 1 74 27 137 1 77 27 137 1 78 27 137 1 79 27 137 1 80 27 137 1 81 2 1 1 82 27 137 1 90 27 137 1 91 27 137 1 92 27 137 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 27 137 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 13 134 0 14 0 19] 
#[1 0 54 0 1 0 54 0 13 1 87 0 14 1 87 0 19 0 54 0 25 0 54 0 29 0 54 0 30 0 54 0 104 0 54 0 105 0 54 0 127] 
#[1 3 113 0 1 2 37 0 5 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 3 253 0 63 1 169 0 66 0 42 0 69 1 173 0 70 4 1 0 72 2 37 0 77 27 141 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 3 125 0 127 1 193 0 129 10 45 0 134 10 45 0 135 10 45 0 137 1 213 0 235 10 45 1 70 10 45 1 71 10 45 1 72 10 45 1 73 10 45 1 74 10 45 1 77 10 45 1 78 10 45 1 79 10 45 1 80 10 45 1 81 2 1 1 82 10 45 1 91 10 45 1 93 10 45 1 94 4 21 1 99 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 10 45 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 0 54 0 1 0 54 0 13 1 91 0 14 1 91 0 19 0 54 0 30 0 54 0 127] 
#[0 13 146 0 14 0 19] 
#[0 13 150 0 14 0 19] 
#[1 11 62 0 13 1 95 0 14 3 70 0 17 1 95 0 19 11 62 0 24 11 62 0 25 11 62 0 26 11 62 0 29 1 95 0 30 3 70 0 31 1 95 0 46 11 62 0 104 11 62 0 105] 
#[0 13 154 0 14 0 19] 
#[0 13 158 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 27 145 0 31 6 197 0 104 27 149 0 251] 
#[0 13 162 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 13 166 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 13 170 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 13 174 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 27 153 0 31 3 61 0 101 6 197 0 104 27 157 0 229 27 161 0 251] 
#[1 27 165 0 31 6 197 0 104 27 169 0 251] 
#[0 13 178 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 27 173 0 108] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 27 177 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[0 13 182 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 13 186 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 16 253 0 22 1 99 0 29 27 181 1 83] 
#[0 27 185 0 14] 
#[0 27 189 0 108] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 13 190 0 46 16 37 0 47 16 41 0 48 16 45 0 51 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 13 194 0 46 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 27 193 0 134 27 193 0 135 27 193 0 137 9 141 0 238 27 193 0 244 27 193 0 245 27 193 0 246 27 193 0 247 27 193 0 248 27 193 0 249 27 193 0 250 27 193 0 251 27 193 0 254 27 193 0 255 27 193 1 7 27 193 1 8 27 193 1 14 27 193 1 18 27 193 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 27 193 1 29 27 193 1 30 27 193 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 27 193 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[0 13 198 0 19 0 46] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 15 17 0 134 15 17 0 135 15 17 0 137 15 5 0 248 15 9 0 249 27 197 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 15 17 1 65 15 17 1 66 15 17 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[0 13 202 0 14 0 19 0 46] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 13 206 0 14 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 15 17 0 134 15 17 0 135 15 17 0 137 15 5 0 248 15 9 0 249 26 29 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 15 17 1 65 15 17 1 66 15 17 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[0 13 210 0 14 0 19 0 46] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 13 214 0 46 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 15 17 0 134 15 17 0 135 15 17 0 137 15 5 0 248 15 9 0 249 26 29 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 15 17 1 65 15 17 1 66 15 17 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[0 13 218 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 15 17 0 134 15 17 0 135 15 17 0 137 15 5 0 248 15 9 0 249 27 201 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 15 17 1 65 15 17 1 66 15 17 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[0 13 222 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 13 226 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 13 230 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 10 82 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 10 90 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 13 234 0 14 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 15 17 0 134 15 17 0 135 15 17 0 137 15 5 0 248 15 9 0 249 26 29 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 15 17 1 65 15 17 1 66 15 17 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[1 13 238 0 14 27 205 0 19 26 37 1 61] 
#[0 13 242 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 13 246 0 108] 
#[0 27 209 0 53 0 77 0 112 0 113 1 131] 
#[1 27 217 0 53 27 217 0 77 27 213 0 81 27 217 0 112 27 217 0 113 27 217 1 131] 
#[0 27 221 0 29] 
#[1 13 250 0 19 27 225 0 29 13 250 0 108] 
#[0 13 254 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 1 6 0 3 1 6 0 24 14 2 0 108 27 229 0 179 27 233 1 58] 
#[1 1 103 0 19 14 6 0 108 27 241 1 55] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 37 0 47 16 41 0 48 16 45 0 51 26 133 0 64 6 197 0 104 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129 27 245 0 251] 
#[0 14 10 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 14 14 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 14 18 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[1 6 197 0 104 27 249 0 251] 
#[0 14 22 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 27 253 0 108] 
#[1 1 6 0 3 1 6 0 5 1 6 0 9 1 6 0 13 1 6 0 20 1 6 0 24 1 6 0 30 1 6 0 44 1 6 0 45 1 6 0 49 1 6 0 53 1 6 0 56 1 6 0 60 1 6 0 67 1 6 0 77 1 6 0 81 1 6 0 85 1 6 0 87 1 6 0 90 1 6 0 92 1 6 0 105 1 6 0 112 1 6 0 113 1 6 0 117 1 6 0 118 1 6 0 120 1 6 0 121 1 6 0 122 1 6 0 123 1 6 0 125 1 6 0 127 1 6 0 129 28 1 0 179 28 5 1 33 28 9 1 36 1 6 1 136] 
#[1 6 197 0 104 28 13 0 251] 
#[1 3 113 0 1 2 37 0 5 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 3 253 0 63 1 169 0 66 0 42 0 69 1 173 0 70 4 1 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 3 125 0 127 1 193 0 129 28 17 0 134 28 17 0 135 28 17 0 137 1 213 0 235 28 17 1 70 28 17 1 71 28 17 1 72 28 17 1 73 28 17 1 74 28 17 1 77 28 17 1 78 28 17 1 79 28 17 1 80 28 17 1 81 2 1 1 82 28 17 1 91 28 17 1 93 28 17 1 94 4 21 1 99 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 28 17 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 14 26 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 14 26 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 14 26 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 14 26 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 14 26 0 46 16 37 0 47 16 41 0 48 16 45 0 51 14 26 0 64 14 26 0 104 16 49 0 106 16 53 0 107 14 26 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[0 14 30 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 37 0 47 16 41 0 48 16 45 0 51 26 133 0 64 6 197 0 104 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129 28 21 0 251] 
#[0 14 34 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 14 38 0 19 0 105] 
#[1 6 197 0 104 28 25 0 251] 
#[0 14 42 0 19 0 105] 
#[0 14 46 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 28 29 0 14] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 14 50 0 14 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 28 33 0 134 28 33 0 135 28 33 0 137 9 141 0 238 28 33 0 244 28 33 0 245 28 33 0 246 28 33 0 247 28 33 0 248 28 33 0 249 28 33 0 250 28 33 0 251 28 33 0 254 28 33 0 255 28 33 1 7 28 33 1 8 28 33 1 14 28 33 1 18 28 33 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 28 33 1 29 28 33 1 30 28 33 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 28 33 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[0 14 54 0 14 0 19] 
#[0 14 58 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 28 37 0 14 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 28 33 0 134 28 33 0 135 28 33 0 137 9 141 0 238 28 33 0 244 28 33 0 245 28 33 0 246 28 33 0 247 28 33 0 248 28 33 0 249 28 33 0 250 28 33 0 251 28 33 0 254 28 33 0 255 28 33 1 7 28 33 1 8 28 33 1 14 28 33 1 18 28 33 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 28 33 1 29 28 33 1 30 28 33 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 28 33 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 37 0 47 16 41 0 48 16 45 0 51 16 49 0 106 16 53 0 107 14 62 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[0 28 41 0 29] 
#[1 14 66 0 19 28 45 0 29 14 66 0 108] 
#[0 14 70 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 28 49 0 19 14 74 0 108 28 53 1 10] 
#[0 14 78 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 28 57 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[0 28 61 0 108] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 28 65 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 28 69 0 132] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 28 73 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[0 28 77 0 108] 
#[0 14 82 0 14] 
#[1 3 113 0 1 2 37 0 5 2 33 0 11 2 33 0 12 1 133 0 13 1 137 0 15 1 141 0 30 1 145 0 42 2 41 0 44 1 153 0 45 1 157 0 49 2 37 0 53 2 37 0 60 1 165 0 63 1 169 0 66 0 42 0 69 1 173 0 70 1 177 0 72 2 37 0 77 2 37 0 87 2 37 0 90 1 181 0 97 2 37 0 112 2 37 0 113 2 33 0 126 3 125 0 127 1 193 0 129 28 81 0 134 28 81 0 135 28 81 0 137 1 213 0 235 28 81 1 69 28 81 1 71 28 81 1 72 28 81 1 73 28 81 1 74 28 81 1 77 28 81 1 78 28 81 1 79 28 81 1 80 28 81 1 81 2 1 1 82 28 81 1 90 28 81 1 91 28 81 1 92 28 81 1 94 2 21 1 95 2 25 1 98 2 29 1 99 2 33 1 103 0 253 1 104 2 37 1 107 2 41 1 112 2 45 1 120 28 81 1 121 3 177 1 124 2 57 1 125 2 37 1 131] 
#[0 14 86 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 28 85 0 134 28 85 0 135 28 85 0 137 9 141 0 238 28 85 0 244 28 85 0 245 28 85 0 246 28 85 0 247 28 85 0 248 28 85 0 249 28 85 0 250 28 85 0 251 28 85 0 254 28 85 0 255 28 85 1 7 28 85 1 8 28 85 1 14 28 85 1 18 28 85 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 28 85 1 29 28 85 1 30 28 85 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 28 85 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[0 14 90 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 14 94 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[1 21 233 0 1 21 233 0 2 21 233 0 3 21 201 0 4 21 225 0 5 21 233 0 6 21 233 0 7 21 233 0 9 21 233 0 10 21 225 0 11 21 225 0 12 10 177 0 13 28 89 0 14 21 221 0 15 21 233 0 16 21 221 0 17 21 233 0 18 21 233 0 19 21 233 0 20 21 233 0 21 21 233 0 22 21 233 0 23 21 233 0 24 21 233 0 25 21 233 0 26 21 233 0 27 21 233 0 28 21 233 0 29 21 233 0 30 21 233 0 31 21 233 0 32 21 233 0 33 21 233 0 34 21 233 0 35 21 233 0 36 21 233 0 37 21 233 0 38 21 233 0 39 21 233 0 40 21 233 0 41 21 221 0 42 21 233 0 43 21 225 0 44 10 181 0 45 21 233 0 47 21 233 0 48 21 233 0 49 21 225 0 50 21 225 0 51 21 225 0 52 21 225 0 53 21 225 0 54 21 225 0 55 21 225 0 56 21 225 0 57 21 225 0 58 21 225 0 59 21 225 0 60 21 225 0 62 21 225 0 63 21 225 0 64 21 225 0 65 21 225 0 66 6 189 0 67 21 225 0 68 21 225 0 69 21 225 0 70 21 225 0 71 21 225 0 72 21 225 0 73 21 225 0 74 21 225 0 75 21 225 0 76 21 225 0 77 21 225 0 78 21 225 0 79 21 225 0 80 21 225 0 81 21 225 0 82 21 225 0 83 21 225 0 84 21 225 0 85 21 225 0 86 21 225 0 87 21 225 0 88 21 225 0 89 21 225 0 90 21 225 0 91 6 193 0 92 21 225 0 93 21 225 0 94 21 225 0 95 21 225 0 96 21 225 0 97 21 225 0 98 21 225 0 99 21 225 0 100 21 225 0 101 21 225 0 102 21 225 0 103 10 185 0 104 21 233 0 105 21 233 0 106 21 233 0 107 21 225 0 112 21 225 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 21 225 0 126 21 233 0 127 21 233 0 128 21 233 0 129 21 209 0 148 28 93 0 150 21 217 0 152 21 221 0 155 21 217 0 247 21 217 0 248 21 217 0 249 21 225 1 131 21 225 1 132 21 225 1 133 21 217 1 134 21 233 1 135 7 21 1 136] 
#[0 28 97 0 53 0 77 0 112 0 113 0 153 1 131] 
#[0 28 105 0 53 0 77 0 112 0 113 0 153 1 131] 
#[0 14 98 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 28 109 0 108] 
#[0 14 102 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 28 113 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[0 14 106 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 14 110 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 28 117 0 132] 
#[0 14 114 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 28 121 0 31] 
#[0 28 125 0 108] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 28 129 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 28 133 0 132] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 28 137 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 28 141 0 132] 
#[0 28 145 0 104] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 28 149 0 132] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 28 153 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[0 28 157 0 108] 
#[0 28 161 0 108] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 28 165 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[0 14 118 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 14 122 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 14 126 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 14 130 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 1 6 0 1 1 6 0 3 1 6 0 5 1 6 0 9 1 6 0 11 1 6 0 12 1 6 0 13 14 134 0 14 1 6 0 15 1 6 0 20 1 6 0 24 1 6 0 25 1 6 0 30 1 6 0 42 1 6 0 44 1 6 0 45 1 6 0 49 1 6 0 53 1 6 0 56 1 6 0 60 1 6 0 63 1 6 0 66 1 6 0 67 1 6 0 69 1 6 0 70 1 6 0 72 1 6 0 77 1 6 0 81 1 6 0 85 1 6 0 87 1 6 0 90 1 6 0 92 1 6 0 97 1 6 0 105 1 6 0 112 1 6 0 113 1 6 0 117 1 6 0 118 1 6 0 120 1 6 0 121 1 6 0 122 1 6 0 123 1 6 0 125 1 6 0 126 1 6 0 127 1 6 0 129 23 9 0 179 25 201 0 182 1 6 1 136] 
#[0 14 138 0 14 0 19] 
#[1 0 54 0 1 0 54 0 13 1 107 0 14 1 107 0 19 0 54 0 30 0 54 0 127] 
#[0 14 146 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 14 150 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 14 154 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 28 169 0 31 6 197 0 104 28 173 0 251] 
#[0 14 158 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 14 162 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 14 166 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 14 170 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 28 177 0 108] 
#[0 1 111 0 29] 
#[1 16 253 0 22 1 115 0 29 28 181 1 83] 
#[0 14 174 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 14 178 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 14 178 0 46 16 37 0 47 16 41 0 48 16 45 0 51 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[0 1 119 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 14 182 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 14 186 0 14 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 15 17 0 134 15 17 0 135 15 17 0 137 15 5 0 248 15 9 0 249 26 29 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 15 17 1 65 15 17 1 66 15 17 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[0 14 190 0 19 0 108] 
#[0 28 185 0 53 0 77 0 112 0 113 1 131] 
#[0 14 194 0 19 0 108] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 15 17 0 134 15 17 0 135 15 17 0 137 15 5 0 248 15 9 0 249 28 189 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 15 17 1 65 15 17 1 66 15 17 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 15 17 0 134 15 17 0 135 15 17 0 137 15 5 0 248 15 9 0 249 28 193 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 15 17 1 65 15 17 1 66 15 17 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[1 2 141 0 3 26 85 0 24 6 65 0 238] 
#[0 14 198 0 108] 
#[1 1 6 0 3 1 6 0 53 1 6 0 77 1 6 0 81 1 6 0 85 1 6 0 112 1 6 0 113 1 6 0 123 28 197 0 179 28 201 1 57] 
#[0 14 202 0 19 0 108] 
#[1 14 206 0 1 14 206 0 2 14 206 0 3 14 206 0 5 14 206 0 6 14 206 0 7 14 206 0 8 14 206 0 9 14 206 0 10 14 206 0 13 14 206 0 14 14 206 0 15 14 206 0 16 14 206 0 17 14 206 0 18 14 206 0 19 14 206 0 20 14 206 0 21 14 206 0 23 14 206 0 24 14 206 0 26 14 206 0 27 14 206 0 28 14 206 0 30 14 206 0 31 14 206 0 32 14 206 0 33 14 206 0 34 14 206 0 35 14 206 0 36 14 206 0 37 14 206 0 38 14 206 0 39 14 206 0 40 14 206 0 41 14 206 0 42 14 206 0 44 14 206 0 45 14 206 0 46 14 206 0 47 14 206 0 48 14 206 0 49 14 206 0 51 14 206 0 52 14 206 0 53 14 206 0 56 14 206 0 57 14 206 0 58 14 206 0 59 14 206 0 60 14 206 0 61 1 123 0 64 14 206 0 65 14 206 0 66 14 206 0 67 14 206 0 69 14 206 0 70 14 206 0 71 14 206 0 72 14 206 0 74 14 206 0 75 14 206 0 77 14 206 0 78 14 206 0 79 14 206 0 80 14 206 0 81 14 206 0 84 14 206 0 85 14 206 0 86 14 206 0 87 14 206 0 88 14 206 0 89 14 206 0 90 14 206 0 91 14 206 0 92 14 206 0 94 14 206 0 96 14 206 0 97 14 206 0 99 14 206 0 102 14 206 0 104 14 206 0 105 14 206 0 106 14 206 0 107 14 206 0 108 14 206 0 109 14 206 0 110 14 206 0 111 14 206 0 112 14 206 0 113 14 206 0 117 14 206 0 118 14 206 0 120 14 206 0 121 14 206 0 122 14 206 0 123 14 206 0 125 14 206 0 126 14 206 0 127 14 206 0 128 14 206 0 129 14 206 1 136] 
#[0 14 210 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 14 214 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[1 2 141 0 3 2 37 0 5 14 185 0 9 14 189 0 13 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 15 17 0 134 15 17 0 135 15 17 0 137 6 65 0 238 15 5 0 248 15 9 0 249 28 209 1 37 15 109 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 15 17 1 65 15 17 1 66 15 17 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[0 14 218 0 3 0 5 0 9 0 13 0 20 0 24 0 30 0 44 0 45 0 49 0 53 0 56 0 60 0 67 0 77 0 81 0 85 0 87 0 90 0 92 0 105 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 127 0 129 1 136] 
#[0 28 213 0 37] 
#[0 14 222 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 6 197 0 104 28 217 0 251] 
#[0 14 226 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 14 230 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[0 14 234 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 14 238 0 14 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 14 238 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 37 0 47 16 41 0 48 16 45 0 51 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[0 14 242 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 28 221 0 134 28 221 0 135 28 221 0 137 9 141 0 238 28 221 0 244 28 221 0 245 28 221 0 246 28 221 0 247 28 221 0 248 28 221 0 249 28 221 0 250 28 221 0 251 28 221 0 254 28 221 0 255 28 221 1 7 28 221 1 8 28 221 1 14 28 221 1 18 28 221 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 28 221 1 29 28 221 1 30 28 221 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 28 221 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 28 225 0 134 28 225 0 135 28 225 0 137 9 141 0 238 28 225 0 244 28 225 0 245 28 225 0 246 28 225 0 247 28 225 0 248 28 225 0 249 28 225 0 250 28 225 0 251 28 225 0 254 28 225 0 255 28 225 1 7 28 225 1 8 28 225 1 14 28 225 1 18 28 225 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 28 225 1 29 28 225 1 30 28 225 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 28 225 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 1 6 0 3 24 149 0 24 1 6 0 53 1 6 0 77 14 246 0 108 1 6 0 112 1 6 0 113 1 6 0 123 24 157 0 179 28 229 1 12 28 233 1 13] 
#[0 14 250 0 19 0 108] 
#[0 28 237 0 108] 
#[0 14 254 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 28 241 0 108] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 28 245 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[0 28 249 0 108] 
#[0 15 2 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 28 253 0 31 29 1 0 35] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 29 5 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 37 0 47 16 41 0 48 16 45 0 51 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 29 29 0 1 29 29 0 2 29 29 0 3 29 9 0 4 29 21 0 5 29 29 0 6 29 29 0 7 29 29 0 9 29 29 0 10 29 21 0 11 29 21 0 12 29 17 0 15 29 29 0 16 29 17 0 17 29 29 0 18 29 29 0 19 29 29 0 20 29 29 0 21 29 29 0 22 29 29 0 23 29 29 0 24 29 29 0 25 29 29 0 26 29 29 0 27 29 29 0 28 29 29 0 29 29 29 0 30 29 29 0 31 29 29 0 32 29 29 0 33 29 29 0 34 29 29 0 35 29 29 0 36 29 29 0 37 29 29 0 38 29 29 0 39 29 29 0 40 29 29 0 41 29 17 0 42 29 29 0 43 29 21 0 44 29 29 0 47 29 29 0 48 29 29 0 49 29 21 0 50 29 21 0 51 29 21 0 52 29 21 0 53 29 21 0 54 29 21 0 55 29 21 0 56 29 21 0 57 29 21 0 58 29 21 0 59 29 21 0 60 29 21 0 62 29 21 0 63 29 21 0 64 29 21 0 65 29 21 0 66 6 189 0 67 29 21 0 68 29 21 0 69 29 21 0 70 29 21 0 71 29 21 0 72 29 21 0 73 29 21 0 74 29 21 0 75 29 21 0 76 29 21 0 77 29 21 0 78 29 21 0 79 29 21 0 80 29 21 0 81 29 21 0 82 29 21 0 83 29 21 0 84 29 21 0 85 29 21 0 86 29 21 0 87 29 21 0 88 29 21 0 89 29 21 0 90 29 21 0 91 6 193 0 92 29 21 0 93 29 21 0 94 29 21 0 95 29 21 0 96 29 21 0 97 29 21 0 98 29 21 0 99 29 21 0 100 29 21 0 101 29 21 0 102 29 21 0 103 29 29 0 105 29 29 0 106 29 29 0 107 29 21 0 112 29 21 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 29 21 0 126 29 29 0 127 29 29 0 128 29 29 0 129 29 13 0 154 29 17 0 155 29 13 0 247 29 13 0 248 29 13 0 249 29 21 1 131 29 21 1 132 29 21 1 133 29 13 1 134 29 29 1 135 7 21 1 136] 
#[0 15 6 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 15 10 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 15 14 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 15 18 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 15 22 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 29 33 0 108] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 29 37 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[0 15 26 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 15 30 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 29 41 0 108] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 29 45 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[0 29 49 0 108] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 29 53 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 29 57 0 132] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 29 61 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[0 29 65 0 108] 
#[0 15 34 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 15 38 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 29 69 0 108] 
#[0 15 42 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 15 46 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 15 50 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 1 127 0 29] 
#[0 15 54 0 19 0 108] 
#[0 15 58 0 19 0 108] 
#[0 15 62 0 19 0 108] 
#[1 2 141 0 3 26 101 0 53 26 101 0 77 26 89 0 81 26 93 0 85 26 101 0 112 26 101 0 113 26 97 0 123 6 65 0 238 26 97 1 6 26 101 1 131] 
#[0 15 66 0 19 0 108] 
#[1 9 93 0 71 9 97 0 74 6 197 0 104 29 73 0 251 29 77 1 29 29 81 1 30] 
#[1 15 70 0 37 29 85 0 71 29 89 1 38] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 29 93 0 134 29 93 0 135 29 93 0 137 9 141 0 238 15 173 0 244 29 93 0 245 29 97 0 246 29 93 0 247 29 93 0 248 29 93 0 249 29 93 0 250 29 97 0 251 29 97 0 254 29 97 0 255 29 93 1 7 29 93 1 8 29 93 1 14 29 93 1 18 29 97 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 29 97 1 29 29 97 1 30 29 97 1 31 29 101 1 35 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 29 93 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[0 15 74 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 15 78 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 37 0 47 16 41 0 48 16 45 0 51 16 49 0 106 16 53 0 107 15 78 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 15 82 0 19 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 37 0 47 16 41 0 48 16 45 0 51 16 49 0 106 16 53 0 107 15 82 0 108 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[0 15 86 0 19 0 108] 
#[0 15 90 0 108] 
#[0 15 94 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 15 98 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 29 105 0 108] 
#[0 15 102 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 15 106 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 29 109 0 134 29 109 0 135 29 109 0 137 9 141 0 238 29 109 0 244 29 109 0 245 29 109 0 246 29 109 0 247 29 109 0 248 29 109 0 249 29 109 0 250 29 109 0 251 29 109 0 254 29 109 0 255 29 109 1 7 29 109 1 8 29 109 1 14 29 109 1 18 29 109 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 29 109 1 29 29 109 1 30 29 109 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 29 109 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[0 15 110 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136] 
#[0 15 114 0 15 0 17 0 42] 
#[0 29 113 0 15 0 17 0 42 0 155] 
#[0 15 118 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 15 122 0 15 0 17 0 42] 
#[0 15 126 0 15 0 17 0 42] 
#[0 15 130 0 15 0 17 0 42] 
#[0 15 134 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 29 117 0 108] 
#[0 15 138 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 29 121 0 108] 
#[0 15 142 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 29 125 0 108] 
#[1 0 25 0 3 1 1 0 5 0 33 0 30 0 37 0 52 1 1 0 53 0 45 0 58 0 49 0 60 0 53 0 61 1 41 0 66 0 10 0 69 1 1 0 77 0 77 0 84 1 1 0 87 1 1 0 90 0 101 0 94 5 173 0 97 5 94 0 108 1 1 0 112 1 1 0 113 0 129 0 135 0 133 0 137 10 81 0 141 10 85 0 158 10 89 0 170 0 177 0 171 0 181 0 172 0 185 0 173 10 93 0 185 10 97 0 206 18 1 0 211 29 129 0 212 10 105 0 236 0 245 0 237 0 249 0 238 0 253 1 104 1 1 1 107 10 109 1 130 1 1 1 131] 
#[0 29 133 0 108] 
#[0 15 146 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 15 150 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 15 154 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 15 158 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 15 162 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 29 137 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 29 141 0 134 29 141 0 135 29 141 0 137 9 141 0 238 29 141 0 244 29 141 0 245 29 141 0 246 29 141 0 247 29 141 0 248 29 141 0 249 29 141 0 250 29 141 0 251 29 141 0 254 29 141 0 255 29 141 1 7 29 141 1 8 29 141 1 14 29 141 1 18 29 141 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 29 141 1 29 29 141 1 30 29 141 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 29 141 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[0 15 166 0 37] 
#[1 4 126 0 2 4 126 0 6 4 126 0 7 4 126 0 9 4 126 0 10 4 126 0 15 4 126 0 16 4 126 0 17 4 126 0 18 29 145 0 19 4 126 0 20 4 126 0 21 4 126 0 23 4 126 0 24 4 126 0 26 4 126 0 27 4 126 0 28 4 126 0 32 4 126 0 33 4 126 0 34 4 126 0 35 4 126 0 36 4 126 0 38 4 126 0 39 4 126 0 40 4 126 0 41 4 126 0 42 4 126 0 47 4 126 0 48 4 126 0 51 4 126 0 106 4 126 0 107 15 170 0 108 4 126 0 109 4 126 0 110 4 126 0 111 4 126 0 127 4 126 0 128 4 126 0 129] 
#[1 4 130 0 2 15 174 0 3 15 174 0 5 4 130 0 6 4 130 0 7 1 131 0 9 4 130 0 10 15 174 0 13 4 130 0 15 4 130 0 16 4 130 0 17 4 130 0 18 29 149 0 19 1 131 0 20 4 130 0 21 4 130 0 23 1 131 0 24 4 130 0 26 4 130 0 27 4 130 0 28 15 174 0 30 4 130 0 32 4 130 0 33 4 130 0 34 4 130 0 35 4 130 0 36 4 130 0 38 4 130 0 39 4 130 0 40 4 130 0 41 4 130 0 42 15 174 0 44 15 174 0 45 4 130 0 47 4 130 0 48 15 174 0 49 4 130 0 51 15 174 0 53 15 174 0 56 15 174 0 60 15 174 0 67 15 174 0 77 15 174 0 81 15 174 0 85 15 174 0 87 15 174 0 90 15 174 0 92 15 174 0 105 4 130 0 106 4 130 0 107 15 178 0 108 4 130 0 109 4 130 0 110 4 130 0 111 15 174 0 112 15 174 0 113 15 174 0 117 15 174 0 118 15 174 0 120 15 174 0 121 15 174 0 122 15 174 0 123 15 174 0 125 1 131 0 127 4 130 0 128 1 131 0 129 15 174 1 136] 
#[0 15 182 0 3 0 5 0 9 0 13 0 20 0 24 0 30 0 44 0 45 0 49 0 53 0 56 0 60 0 67 0 77 0 81 0 85 0 87 0 90 0 92 0 105 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 127 0 129 1 136] 
#[0 15 186 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 29 153 0 31 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 37 0 47 16 41 0 48 16 45 0 51 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[0 15 190 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 136] 
#[0 15 194 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 15 198 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 15 202 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 29 157 0 108] 
#[0 15 206 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[1 2 37 0 5 14 185 0 9 14 189 0 13 14 193 0 20 14 197 0 24 9 65 0 30 9 237 0 44 14 201 0 45 14 205 0 49 15 89 0 53 14 209 0 56 2 37 0 60 14 213 0 67 15 89 0 77 14 217 0 81 14 221 0 85 2 37 0 87 2 37 0 90 14 225 0 92 14 229 0 105 15 89 0 112 15 89 0 113 14 233 0 117 14 237 0 118 14 241 0 120 14 245 0 121 14 249 0 122 6 221 0 123 6 225 0 125 3 125 0 127 14 253 0 129 15 17 0 134 15 17 0 135 15 17 0 137 15 5 0 248 15 9 0 249 29 161 1 37 15 109 1 39 15 17 1 42 15 17 1 43 15 17 1 44 15 17 1 45 15 17 1 46 15 17 1 47 15 17 1 48 15 17 1 49 15 49 1 50 15 17 1 51 15 17 1 52 15 17 1 59 15 17 1 63 15 17 1 65 15 17 1 66 15 17 1 68 0 253 1 104 2 37 1 107 15 81 1 108 9 233 1 111 9 237 1 112 15 85 1 119 9 245 1 120 15 89 1 131 15 93 1 136] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 15 210 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 37 0 47 16 41 0 48 16 45 0 51 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129] 
#[1 15 214 0 3 15 214 0 5 15 214 0 9 15 214 0 13 15 214 0 20 15 214 0 24 15 214 0 30 15 214 0 44 15 214 0 45 15 214 0 49 15 214 0 53 15 214 0 56 15 214 0 60 15 214 0 67 15 214 0 77 15 214 0 81 15 214 0 85 15 214 0 87 15 214 0 90 15 214 0 92 15 214 0 105 15 218 0 108 15 214 0 112 15 214 0 113 15 214 0 117 15 214 0 118 15 214 0 120 15 214 0 121 15 214 0 122 15 214 0 123 15 214 0 125 15 214 0 127 15 214 0 129 15 214 1 136] 
#[1 15 222 0 3 15 222 0 5 15 222 0 9 15 222 0 13 15 222 0 20 15 222 0 24 15 222 0 30 15 222 0 44 15 222 0 45 15 222 0 49 15 222 0 53 15 222 0 56 15 222 0 60 15 222 0 67 15 222 0 77 15 222 0 81 15 222 0 85 15 222 0 87 15 222 0 90 15 222 0 92 15 222 0 105 15 226 0 108 15 222 0 112 15 222 0 113 15 222 0 117 15 222 0 118 15 222 0 120 15 222 0 121 15 222 0 122 15 222 0 123 15 222 0 125 15 222 0 127 15 222 0 129 15 222 1 136] 
#[0 15 230 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136] 
#[0 15 234 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 136 1 137] 
#[0 29 165 0 35] 
#[1 9 33 0 1 2 141 0 3 2 37 0 5 9 37 0 8 9 41 0 9 9 45 0 13 9 49 0 15 9 53 0 20 9 57 0 24 9 61 0 26 9 65 0 30 9 237 0 44 9 69 0 45 9 73 0 52 2 37 0 53 9 77 0 56 9 81 0 57 9 85 0 59 2 37 0 60 6 189 0 67 9 89 0 70 9 93 0 71 9 97 0 74 9 101 0 75 2 37 0 77 9 105 0 78 9 109 0 80 9 113 0 86 2 37 0 87 2 37 0 90 6 193 0 92 9 117 0 97 9 121 0 102 6 197 0 104 9 125 0 105 9 129 0 107 2 37 0 112 2 37 0 113 6 201 0 117 6 205 0 118 6 209 0 120 6 213 0 121 6 217 0 122 6 221 0 123 6 225 0 125 9 133 0 126 3 125 0 127 29 169 0 134 29 169 0 135 29 169 0 137 9 141 0 238 29 169 0 244 29 169 0 245 29 169 0 246 29 169 0 247 29 169 0 248 29 169 0 249 29 169 0 250 29 169 0 251 29 169 0 254 29 169 0 255 29 169 1 7 29 169 1 8 29 169 1 14 29 169 1 18 29 169 1 23 9 197 1 24 9 201 1 25 9 205 1 26 9 209 1 27 9 213 1 28 29 169 1 29 29 169 1 30 29 169 1 31 0 253 1 104 2 37 1 107 9 229 1 108 9 233 1 111 9 237 1 112 29 169 1 119 9 245 1 120 2 37 1 131 7 21 1 136] 
#[1 15 185 0 2 15 189 0 6 15 193 0 7 15 197 0 9 15 201 0 10 15 205 0 15 15 209 0 16 15 213 0 17 15 217 0 18 15 221 0 20 15 225 0 21 15 229 0 23 15 233 0 24 15 237 0 26 15 241 0 27 15 245 0 28 15 249 0 32 15 253 0 33 16 1 0 34 16 5 0 35 16 9 0 36 15 238 0 37 16 13 0 38 16 17 0 39 16 21 0 40 16 25 0 41 16 29 0 42 16 37 0 47 16 41 0 48 16 45 0 51 26 133 0 64 16 49 0 106 16 53 0 107 16 57 0 109 16 61 0 110 16 65 0 111 16 69 0 127 16 73 0 128 16 77 0 129]
	).
]

{ #category : #private }
RustParser >> actionsForCurrentToken [
	| actions |
	actions := super actionsForCurrentToken.
	(actions isEmpty and: [ currentToken value size > 1 ])
		ifTrue:
			[ currentToken value first = $<
				ifTrue:
					[ currentToken := currentToken class
						value: '<'
						start: currentToken startPosition
						ids: {scanner ltId}.
					self position: currentToken startPosition.
					^ super actionsForCurrentToken ].
			currentToken value first = $>
				ifTrue:
					[ currentToken := currentToken class
						value: '>'
						start: currentToken startPosition
						ids: {scanner gtId}.
					self position: currentToken startPosition.
					^ super actionsForCurrentToken ].
			currentToken value first = $&
				ifTrue:
					[ currentToken := currentToken class
						value: '&'
						start: currentToken startPosition
						ids: {scanner ampId}.
					self position: currentToken startPosition.
					^ super actionsForCurrentToken ].
			(currentToken ids includes: scanner FLOAT_LITERALId)
				ifTrue:
					[ | index |
					index := currentToken source indexOf: $..
					index > 0
						ifTrue:
							[ currentToken := currentToken class
								value: (currentToken source first: index - 1)
								start: currentToken startPosition
								ids: {scanner INTEGER_LITERALId}.
							self position: currentToken startPosition + index - 2.
							^ super actionsForCurrentToken ] ] ].
	^ actions
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor_______separator__pathExprSegment_1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	result at: 2 put: ((nodes at: 2) at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 1).
	result at: 3 put: ((nodes at: 2) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor_______separator__pathExprSegment__1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	self add: ((nodes at: 1) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor_______separator__pathExprSegment__2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor_______separator__simplePathSegment__1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor_______separator__simplePathSegment__2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor_______separator__typePathSegment_1: nodes [
	| result |
	result := Array new: 8.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	result at: 2 put: ((nodes at: 2) at: 1).
	result at: 3 put: ((nodes at: 2) at: 2).
	result at: 4 put: ((nodes at: 2) at: 3).
	result at: 5 put: ((nodes at: 2) at: 4).
	result at: 6 put: ((nodes at: 2) at: 5).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 8).
	self add: ((nodes at: 2) at: 8) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor_______separator__typePathSegment__1: nodes [
	| result |
	result := Array new: 8.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	self add: ((nodes at: 1) at: 3) to: (result at: 3).
	self add: ((nodes at: 1) at: 4) to: (result at: 4).
	self add: ((nodes at: 1) at: 5) to: (result at: 5).
	self add: ((nodes at: 1) at: 6) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor_______separator__typePathSegment__2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	self add: ((nodes at: 2) at: 5) to: (result at: 5).
	self add: ((nodes at: 2) at: 6) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 8) to: (result at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor______colon__typeParamBounds__1: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor______colon__typeParamBounds__2: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor______colon__typeParamBounds___1: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor______comma__functionParam_1: nodes [
	| result |
	result := Array new: 7.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).
	result at: 5 put: ((nodes at: 2) at: 4).
	result at: 6 put: ((nodes at: 2) at: 5).
	result at: 7 put: ((nodes at: 2) at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor______comma__functionParam__1: nodes [
	| result |
	result := Array new: 7.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor______comma__functionParam__2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 7).
	self add: ((nodes at: 2) at: 5) to: (result at: 5).
	self add: ((nodes at: 2) at: 6) to: (result at: 4).
	self add: ((nodes at: 2) at: 7) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor______comma__maybeNamedParam_1: nodes [
	| result |
	result := Array new: 5.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	result at: 3 put: ((nodes at: 2) at: 2).
	result at: 4 put: ((nodes at: 2) at: 3).
	result at: 5 put: ((nodes at: 2) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor______comma__maybeNamedParam__1: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor______comma__maybeNamedParam__2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	self add: ((nodes at: 2) at: 5) to: (result at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor______comma__pattern__1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor______comma__pattern__2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor______plus__typeParamBound__typeBound___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor__extern___externToken__abi__abi___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor__extern___externToken__abi__abi___2: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor__extern___externToken__abi__abi____1: nodes [
	| result |
	result := Array new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor__extern___externToken__abi__abi____2: nodes [
	| result |
	result := nodes at: 1.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor_matchArm__arm________arrow__matchArmExpression_1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: ((nodes at: 3) at: 1).
	result at: 4 put: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor_matchArm__arm________arrow__matchArmExpression__1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor_matchArm__arm________arrow__matchArmExpression__2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForarrayElements3: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForarrayType1: nodes [
	| result |
	result := RustArrayTypeNode new.
	result leftBracket: (nodes at: 1).
	result type: (nodes at: 2).
	result semicolon: (nodes at: 3).
	result length: (nodes at: 4).
	result rightBracket: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForassociatedItem10: nodes [
	| result |
	result := RustConstantNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result visibility: (nodes at: 2).
	result constToken: ((nodes at: 3) at: 1).
	result name: ((nodes at: 3) at: 2).
	result colon: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result semicolon: ((nodes at: 3) at: 5).
	result equalsToken: ((nodes at: 3) at: 6).
	result value: ((nodes at: 3) at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForassociatedItem5: nodes [
	| result |
	result := RustTypeAliasNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result typeToken: ((nodes at: 2) at: 1).
	result name: ((nodes at: 2) at: 2).
	result semicolon: ((nodes at: 2) at: 3).
	result equalsToken: ((nodes at: 2) at: 4).
	result type: ((nodes at: 2) at: 5).
	result where: ((nodes at: 2) at: 6).
	result colon: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result typeBounds.
	result addTokens: ((nodes at: 2) at: 9) to: result pluses.
	result lt: ((nodes at: 2) at: 10).
	result gt: ((nodes at: 2) at: 11).
	result addNodes: ((nodes at: 2) at: 12) to: result params.
	result addTokens: ((nodes at: 2) at: 13) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForassociatedItem6: nodes [
	| result |
	result := RustTypeAliasNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result visibility: (nodes at: 2).
	result typeToken: ((nodes at: 3) at: 1).
	result name: ((nodes at: 3) at: 2).
	result semicolon: ((nodes at: 3) at: 3).
	result equalsToken: ((nodes at: 3) at: 4).
	result type: ((nodes at: 3) at: 5).
	result where: ((nodes at: 3) at: 6).
	result colon: ((nodes at: 3) at: 7).
	result addNodes: ((nodes at: 3) at: 8) to: result typeBounds.
	result addTokens: ((nodes at: 3) at: 9) to: result pluses.
	result lt: ((nodes at: 3) at: 10).
	result gt: ((nodes at: 3) at: 11).
	result addNodes: ((nodes at: 3) at: 12) to: result params.
	result addTokens: ((nodes at: 3) at: 13) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForassociatedItem9: nodes [
	| result |
	result := RustConstantNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result constToken: ((nodes at: 2) at: 1).
	result name: ((nodes at: 2) at: 2).
	result colon: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result semicolon: ((nodes at: 2) at: 5).
	result equalsToken: ((nodes at: 2) at: 6).
	result value: ((nodes at: 2) at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForasyncBlockExpression1: nodes [
	| result |
	result := RustAsyncBlockExpressionNode new.
	result asyncToken: (nodes at: 1).
	result expression: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForasyncBlockExpression2: nodes [
	| result |
	result := RustAsyncBlockExpressionNode new.
	result asyncToken: (nodes at: 1).
	result moveToken: (nodes at: 2).
	result expression: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForattr1: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForattr2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	result at: 3 put: ((nodes at: 2) at: 2).
	result at: 4 put: ((nodes at: 2) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForattrInput1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForattrInput2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForbareFunctionType1: nodes [
	| result |
	result := RustFunctionTypeNode new.
	result externToken: ((nodes at: 1) at: 1).
	result abi: ((nodes at: 1) at: 2).
	result unsafeToken: ((nodes at: 1) at: 3).
	result fnToken: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForbareFunctionType2: nodes [
	| result |
	result := RustFunctionTypeNode new.
	result externToken: ((nodes at: 1) at: 1).
	result abi: ((nodes at: 1) at: 2).
	result unsafeToken: ((nodes at: 1) at: 3).
	result fnToken: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	result arrow: ((nodes at: 5) at: 1).
	result addNode: ((nodes at: 5) at: 2) to: result types.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForbareFunctionType3: nodes [
	| result |
	result := RustFunctionTypeNode new.
	result externToken: ((nodes at: 1) at: 1).
	result abi: ((nodes at: 1) at: 2).
	result unsafeToken: ((nodes at: 1) at: 3).
	result fnToken: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result attrs.
	result addNodes: ((nodes at: 4) at: 2) to: result types.
	result addTokens: ((nodes at: 4) at: 3) to: result names.
	result addTokens: ((nodes at: 4) at: 4) to: result colons.
	result addTokens: ((nodes at: 4) at: 5) to: result commas.
	result ellipsis: ((nodes at: 4) at: 6).
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForbareFunctionType4: nodes [
	| result |
	result := RustFunctionTypeNode new.
	result externToken: ((nodes at: 1) at: 1).
	result abi: ((nodes at: 1) at: 2).
	result unsafeToken: ((nodes at: 1) at: 3).
	result fnToken: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result attrs.
	result addNodes: ((nodes at: 4) at: 2) to: result types.
	result addTokens: ((nodes at: 4) at: 3) to: result names.
	result addTokens: ((nodes at: 4) at: 4) to: result colons.
	result addTokens: ((nodes at: 4) at: 5) to: result commas.
	result ellipsis: ((nodes at: 4) at: 6).
	result rightParen: (nodes at: 5).
	result arrow: ((nodes at: 6) at: 1).
	result addNode: ((nodes at: 6) at: 2) to: result types.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForbareFunctionType5: nodes [
	| result |
	result := RustFunctionTypeNode new.
	result forToken: ((nodes at: 1) at: 1).
	result lt: ((nodes at: 1) at: 2).
	result gt: ((nodes at: 1) at: 3).
	result addNodes: ((nodes at: 1) at: 4) to: result params.
	result addTokens: ((nodes at: 1) at: 5) to: result commas.
	result externToken: ((nodes at: 2) at: 1).
	result abi: ((nodes at: 2) at: 2).
	result unsafeToken: ((nodes at: 2) at: 3).
	result fnToken: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForbareFunctionType6: nodes [
	| result |
	result := RustFunctionTypeNode new.
	result forToken: ((nodes at: 1) at: 1).
	result lt: ((nodes at: 1) at: 2).
	result gt: ((nodes at: 1) at: 3).
	result addNodes: ((nodes at: 1) at: 4) to: result params.
	result addTokens: ((nodes at: 1) at: 5) to: result commas.
	result externToken: ((nodes at: 2) at: 1).
	result abi: ((nodes at: 2) at: 2).
	result unsafeToken: ((nodes at: 2) at: 3).
	result fnToken: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	result arrow: ((nodes at: 6) at: 1).
	result addNode: ((nodes at: 6) at: 2) to: result types.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForbareFunctionType7: nodes [
	| result |
	result := RustFunctionTypeNode new.
	result forToken: ((nodes at: 1) at: 1).
	result lt: ((nodes at: 1) at: 2).
	result gt: ((nodes at: 1) at: 3).
	result addNodes: ((nodes at: 1) at: 4) to: result params.
	result addTokens: ((nodes at: 1) at: 5) to: result commas.
	result externToken: ((nodes at: 2) at: 1).
	result abi: ((nodes at: 2) at: 2).
	result unsafeToken: ((nodes at: 2) at: 3).
	result fnToken: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result attrs.
	result addNodes: ((nodes at: 5) at: 2) to: result types.
	result addTokens: ((nodes at: 5) at: 3) to: result names.
	result addTokens: ((nodes at: 5) at: 4) to: result colons.
	result addTokens: ((nodes at: 5) at: 5) to: result commas.
	result ellipsis: ((nodes at: 5) at: 6).
	result rightParen: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForbareFunctionType8: nodes [
	| result |
	result := RustFunctionTypeNode new.
	result forToken: ((nodes at: 1) at: 1).
	result lt: ((nodes at: 1) at: 2).
	result gt: ((nodes at: 1) at: 3).
	result addNodes: ((nodes at: 1) at: 4) to: result params.
	result addTokens: ((nodes at: 1) at: 5) to: result commas.
	result externToken: ((nodes at: 2) at: 1).
	result abi: ((nodes at: 2) at: 2).
	result unsafeToken: ((nodes at: 2) at: 3).
	result fnToken: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result attrs.
	result addNodes: ((nodes at: 5) at: 2) to: result types.
	result addTokens: ((nodes at: 5) at: 3) to: result names.
	result addTokens: ((nodes at: 5) at: 4) to: result colons.
	result addTokens: ((nodes at: 5) at: 5) to: result commas.
	result ellipsis: ((nodes at: 5) at: 6).
	result rightParen: (nodes at: 6).
	result arrow: ((nodes at: 7) at: 1).
	result addNode: ((nodes at: 7) at: 2) to: result types.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForblockExpression1: nodes [
	| result |
	result := RustBlockExpressionNode new.
	result leftBrace: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result attrs.
	result rightBrace: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForblockExpression2: nodes [
	| result |
	result := RustBlockExpressionNode new.
	result leftBrace: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result attrs.
	result addNodes: (nodes at: 3) to: result statements.
	result rightBrace: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureExpression10: nodes [
	| result |
	result := RustClosureExpressionNode new.
	result moveToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result bars.
	result addToken: (nodes at: 3) to: result bars.
	result arrow: (nodes at: 4).
	result type: (nodes at: 5).
	result expression: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureExpression11: nodes [
	| result |
	result := RustClosureExpressionNode new.
	result moveToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result bars.
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result addToken: (nodes at: 4) to: result bars.
	result expression: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureExpression12: nodes [
	| result |
	result := RustClosureExpressionNode new.
	result moveToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result bars.
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result addToken: (nodes at: 4) to: result bars.
	result arrow: (nodes at: 5).
	result type: (nodes at: 6).
	result expression: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureExpression1: nodes [
	| result |
	result := RustClosureExpressionNode new.
	result addToken: (nodes at: 1) to: result bars.
	result expression: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureExpression2: nodes [
	| result |
	result := RustClosureExpressionNode new.
	result addToken: (nodes at: 1) to: result bars.
	result arrow: (nodes at: 2).
	result type: (nodes at: 3).
	result expression: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureExpression3: nodes [
	| result |
	result := RustClosureExpressionNode new.
	result addToken: (nodes at: 1) to: result bars.
	result addToken: (nodes at: 2) to: result bars.
	result expression: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureExpression4: nodes [
	| result |
	result := RustClosureExpressionNode new.
	result addToken: (nodes at: 1) to: result bars.
	result addToken: (nodes at: 2) to: result bars.
	result arrow: (nodes at: 3).
	result type: (nodes at: 4).
	result expression: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureExpression5: nodes [
	| result |
	result := RustClosureExpressionNode new.
	result addToken: (nodes at: 1) to: result bars.
	result addNodes: ((nodes at: 2) at: 1) to: result parameters.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result addToken: (nodes at: 3) to: result bars.
	result expression: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureExpression6: nodes [
	| result |
	result := RustClosureExpressionNode new.
	result addToken: (nodes at: 1) to: result bars.
	result addNodes: ((nodes at: 2) at: 1) to: result parameters.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result addToken: (nodes at: 3) to: result bars.
	result arrow: (nodes at: 4).
	result type: (nodes at: 5).
	result expression: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureExpression7: nodes [
	| result |
	result := RustClosureExpressionNode new.
	result moveToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result bars.
	result expression: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureExpression8: nodes [
	| result |
	result := RustClosureExpressionNode new.
	result moveToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result bars.
	result arrow: (nodes at: 3).
	result type: (nodes at: 4).
	result expression: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureExpression9: nodes [
	| result |
	result := RustClosureExpressionNode new.
	result moveToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result bars.
	result addToken: (nodes at: 3) to: result bars.
	result expression: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureParam1: nodes [
	| result |
	result := RustClosureParamNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result addNodes: ((nodes at: 2) at: 1) to: result patterns.
	result addTokens: ((nodes at: 2) at: 2) to: result bars.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureParam2: nodes [
	| result |
	result := RustClosureParamNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result addNodes: ((nodes at: 2) at: 1) to: result patterns.
	result addTokens: ((nodes at: 2) at: 2) to: result bars.
	result colon: (nodes at: 3).
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForconstParam1: nodes [
	| result |
	result := RustConstParamNode new.
	result constToken: (nodes at: 1).
	result name: (nodes at: 2).
	result colon: (nodes at: 3).
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForconstantItem3: nodes [
	| result |
	result := Array new: 7.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	result at: 5 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForconstantItem4: nodes [
	| result |
	result := Array new: 7.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	result at: 6 put: (nodes at: 5).
	result at: 7 put: (nodes at: 6).
	result at: 5 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForcrate1: nodes [
	| result |
	result := RustCrateNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForcrate2: nodes [
	| result |
	result := RustCrateNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result addNodes: ((nodes at: 2) at: 1) to: result items.
	result addNodes: ((nodes at: 2) at: 2) to: result attrs.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForcrate3: nodes [
	| result |
	result := RustCrateNode new.
	result shebang: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result attrs.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForcrate4: nodes [
	| result |
	result := RustCrateNode new.
	result shebang: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result attrs.
	result addNodes: ((nodes at: 3) at: 1) to: result items.
	result addNodes: ((nodes at: 3) at: 2) to: result attrs.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFordelimTokenTree1: nodes [
	| result |
	result := nodes at: 2.
	self addFirst: (nodes at: 1) to: result.
	self add: (nodes at: 3) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumItem1: nodes [
	| result |
	result := RustEnumItemNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumItem2: nodes [
	| result |
	result := RustEnumItemNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result name: (nodes at: 2).
	result leftParen: ((nodes at: 3) at: 1).
	result rightParen: ((nodes at: 3) at: 2).
	result addNodes: ((nodes at: 3) at: 3) to: result fields.
	result addTokens: ((nodes at: 3) at: 4) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumItem3: nodes [
	| result |
	result := RustEnumItemNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result name: (nodes at: 2).
	result leftBrace: ((nodes at: 3) at: 1).
	result rightBrace: ((nodes at: 3) at: 2).
	result addNodes: ((nodes at: 3) at: 3) to: result fields.
	result addTokens: ((nodes at: 3) at: 4) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumItem4: nodes [
	| result |
	result := RustEnumItemNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result name: (nodes at: 2).
	result equalsToken: ((nodes at: 3) at: 1).
	result value: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumItem5: nodes [
	| result |
	result := RustEnumItemNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result visibility: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumItem6: nodes [
	| result |
	result := RustEnumItemNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result visibility: (nodes at: 2).
	result name: (nodes at: 3).
	result leftParen: ((nodes at: 4) at: 1).
	result rightParen: ((nodes at: 4) at: 2).
	result addNodes: ((nodes at: 4) at: 3) to: result fields.
	result addTokens: ((nodes at: 4) at: 4) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumItem7: nodes [
	| result |
	result := RustEnumItemNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result visibility: (nodes at: 2).
	result name: (nodes at: 3).
	result leftBrace: ((nodes at: 4) at: 1).
	result rightBrace: ((nodes at: 4) at: 2).
	result addNodes: ((nodes at: 4) at: 3) to: result fields.
	result addTokens: ((nodes at: 4) at: 4) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumItem8: nodes [
	| result |
	result := RustEnumItemNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result visibility: (nodes at: 2).
	result name: (nodes at: 3).
	result equalsToken: ((nodes at: 4) at: 1).
	result value: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumItemTuple2: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumeration1: nodes [
	| result |
	result := Array new: 10.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumeration2: nodes [
	| result |
	result := Array new: 10.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 6).
	result at: 4 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumeration3: nodes [
	| result |
	result := Array new: 10.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 7 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumeration4: nodes [
	| result |
	result := Array new: 10.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 7 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 6).
	result at: 4 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumeration5: nodes [
	| result |
	result := Array new: 10.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 8 put: ((nodes at: 3) at: 1).
	result at: 9 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumeration6: nodes [
	| result |
	result := Array new: 10.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 8 put: ((nodes at: 3) at: 1).
	result at: 9 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	result at: 3 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 6).
	result at: 4 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumeration7: nodes [
	| result |
	result := Array new: 10.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 8 put: ((nodes at: 3) at: 1).
	result at: 9 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	result at: 7 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	result at: 4 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumeration8: nodes [
	| result |
	result := Array new: 10.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 8 put: ((nodes at: 3) at: 1).
	result at: 9 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	result at: 7 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 6).
	result at: 4 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock10: nodes [
	| result |
	result := RustCallExpressionNode new.
	result expression: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result args.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock11: nodes [
	| result |
	result := RustIndexExpressionNode new.
	result expression: (nodes at: 1).
	result leftBracket: (nodes at: 2).
	result index: (nodes at: 3).
	result rightBracket: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock12: nodes [
	| result |
	result := RustErrorPropogationExpressionNode new.
	result expression: (nodes at: 1).
	result question: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock13: nodes [
	| result |
	result := RustBorrowExpressionNode new.
	result amp: (nodes at: 1).
	result expression: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock14: nodes [
	| result |
	result := RustBorrowExpressionNode new.
	result amp: (nodes at: 1).
	result mutToken: (nodes at: 2).
	result expression: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock1: nodes [
	| result |
	result := RustAttributedExpressionNode new.
	result attr: (nodes at: 1).
	result expression: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock20: nodes [
	| result |
	result := RustTypeCastExpressionNode new.
	result expression: (nodes at: 1).
	result asToken: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock33: nodes [
	| result |
	result := RustBinaryExpressionNode new.
	result left: (nodes at: 1).
	result operator: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock40: nodes [
	| result |
	result := RustRangeExpressionNode new.
	result from: (nodes at: 1).
	result operator: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock41: nodes [
	| result |
	result := RustRangeExpressionNode new.
	result from: (nodes at: 1).
	result operator: (nodes at: 2).
	result to: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock42: nodes [
	| result |
	result := RustRangeExpressionNode new.
	result operator: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock43: nodes [
	| result |
	result := RustRangeExpressionNode new.
	result operator: (nodes at: 1).
	result to: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock4: nodes [
	| result |
	result := RustMethodCallExpressionNode new.
	result expression: (nodes at: 1).
	result period: (nodes at: 2).
	result name: ((nodes at: 3) at: 1).
	result separator: ((nodes at: 3) at: 2).
	result genericArgs: ((nodes at: 3) at: 3).
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock51: nodes [
	| result |
	result := RustAssignmentExpressionNode new.
	result lhs: (nodes at: 1).
	result operator: (nodes at: 2).
	result rhs: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock57: nodes [
	| result |
	result := RustContinueExpressionNode new.
	result continueToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock58: nodes [
	| result |
	result := RustContinueExpressionNode new.
	result continueToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock59: nodes [
	| result |
	result := RustContinueExpressionNode new.
	result continueToken: (nodes at: 1).
	result label: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock5: nodes [
	| result |
	result := RustMethodCallExpressionNode new.
	result expression: (nodes at: 1).
	result period: (nodes at: 2).
	result name: ((nodes at: 3) at: 1).
	result separator: ((nodes at: 3) at: 2).
	result genericArgs: ((nodes at: 3) at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result args.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock60: nodes [
	| result |
	result := RustContinueExpressionNode new.
	result continueToken: (nodes at: 1).
	result label: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock61: nodes [
	| result |
	result := RustBreakExpressionNode new.
	result breakToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock62: nodes [
	| result |
	result := RustBreakExpressionNode new.
	result breakToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock63: nodes [
	| result |
	result := RustBreakExpressionNode new.
	result breakToken: (nodes at: 1).
	result label: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock64: nodes [
	| result |
	result := RustBreakExpressionNode new.
	result breakToken: (nodes at: 1).
	result label: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock65: nodes [
	| result |
	result := RustReturnExpressionNode new.
	result returnToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock66: nodes [
	| result |
	result := RustReturnExpressionNode new.
	result returnToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock67: nodes [
	| result |
	result := RustGroupedExpressionNode new.
	result leftParen: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result attrs.
	result expression: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock68: nodes [
	| result |
	result := RustArrayExpressionNode new.
	result leftBracket: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result attrs.
	result rightBracket: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock69: nodes [
	| result |
	result := RustArrayExpressionNode new.
	result leftBracket: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result attrs.
	result addNodes: ((nodes at: 3) at: 1) to: result elements.
	result addTokens: ((nodes at: 3) at: 2) to: result separators.
	result rightBracket: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock6: nodes [
	| result |
	result := RustFieldExpressionNode new.
	result expression: (nodes at: 1).
	result period: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock70: nodes [
	| result |
	result := RustTupleExpressionNode new.
	result leftParen: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result attrs.
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock71: nodes [
	| result |
	result := RustTupleExpressionNode new.
	result leftParen: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result attrs.
	result addNodes: ((nodes at: 3) at: 1) to: result elements.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock75: nodes [
	| result |
	result := RustBoxExpressionNode new.
	result boxToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock7: nodes [
	| result |
	result := RustTupleIndexExpressionNode new.
	result expression: (nodes at: 1).
	result period: (nodes at: 2).
	result index: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock8: nodes [
	| result |
	result := RustAwaitExpressionNode new.
	result expression: (nodes at: 1).
	result period: (nodes at: 2).
	result awaitToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock9: nodes [
	| result |
	result := RustCallExpressionNode new.
	result expression: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternBlock1: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: (nodes at: 3) to: (result at: 3).
	result at: 4 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternBlock2: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: (nodes at: 3) to: (result at: 3).
	self addAll: (nodes at: 4) to: (result at: 5).
	result at: 4 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternBlock3: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 6 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	self addAll: (nodes at: 4) to: (result at: 3).
	result at: 4 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternBlock4: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 6 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	self addAll: (nodes at: 4) to: (result at: 3).
	self addAll: (nodes at: 5) to: (result at: 5).
	result at: 4 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternBlock5: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 7 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	self addAll: (nodes at: 4) to: (result at: 3).
	result at: 4 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternBlock6: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 7 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	self addAll: (nodes at: 4) to: (result at: 3).
	self addAll: (nodes at: 5) to: (result at: 5).
	result at: 4 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternBlock7: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 7 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	self addAll: (nodes at: 5) to: (result at: 3).
	result at: 4 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternBlock8: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 7 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	self addAll: (nodes at: 5) to: (result at: 3).
	self addAll: (nodes at: 6) to: (result at: 5).
	result at: 4 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternCrate1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternCrate2: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 5 put: ((nodes at: 4) at: 1).
	result at: 6 put: ((nodes at: 4) at: 2).
	result at: 4 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternalItem10: nodes [
	| result |
	result := RustFunctionNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result visibility: (nodes at: 2).
	result externToken: ((nodes at: 3) at: 1).
	result abi: ((nodes at: 3) at: 2).
	result unsafeToken: ((nodes at: 3) at: 3).
	result asyncToken: ((nodes at: 3) at: 4).
	result constToken: ((nodes at: 3) at: 5).
	result defaultToken: ((nodes at: 3) at: 6).
	result fnToken: ((nodes at: 3) at: 7).
	result name: ((nodes at: 3) at: 8).
	result leftParen: ((nodes at: 3) at: 9).
	result rightParen: ((nodes at: 3) at: 10).
	result block: ((nodes at: 3) at: 11).
	result semicolon: ((nodes at: 3) at: 12).
	result where: ((nodes at: 3) at: 13).
	result arrow: ((nodes at: 3) at: 14).
	result addNodes: ((nodes at: 3) at: 15) to: result types.
	result addNodes: ((nodes at: 3) at: 16) to: result attrs.
	result selfToken: ((nodes at: 3) at: 17).
	result mutToken: ((nodes at: 3) at: 18).
	result amp: ((nodes at: 3) at: 19).
	result lifetime: ((nodes at: 3) at: 20).
	result addTokens: ((nodes at: 3) at: 21) to: result colons.
	result addTokens: ((nodes at: 3) at: 22) to: result commas.
	result addNodes: ((nodes at: 3) at: 23) to: result patterns.
	result addTokens: ((nodes at: 3) at: 24) to: result bars.
	result addTokens: ((nodes at: 3) at: 25) to: result ellipsises.
	result lt: ((nodes at: 3) at: 26).
	result gt: ((nodes at: 3) at: 27).
	result addNodes: ((nodes at: 3) at: 28) to: result params.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternalItem1: nodes [
	| result |
	result := RustAttributedMacroInvocationNode new.
	result macro: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternalItem2: nodes [
	| result |
	result := RustAttributedMacroInvocationNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result macro: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternalItem5: nodes [
	| result |
	result := RustStaticNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result staticToken: ((nodes at: 2) at: 1).
	result name: ((nodes at: 2) at: 2).
	result colon: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result semicolon: ((nodes at: 2) at: 5).
	result equalsToken: ((nodes at: 2) at: 6).
	result value: ((nodes at: 2) at: 7).
	result mutToken: ((nodes at: 2) at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternalItem6: nodes [
	| result |
	result := RustStaticNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result visibility: (nodes at: 2).
	result staticToken: ((nodes at: 3) at: 1).
	result name: ((nodes at: 3) at: 2).
	result colon: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result semicolon: ((nodes at: 3) at: 5).
	result equalsToken: ((nodes at: 3) at: 6).
	result value: ((nodes at: 3) at: 7).
	result mutToken: ((nodes at: 3) at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternalItem9: nodes [
	| result |
	result := RustFunctionNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result externToken: ((nodes at: 2) at: 1).
	result abi: ((nodes at: 2) at: 2).
	result unsafeToken: ((nodes at: 2) at: 3).
	result asyncToken: ((nodes at: 2) at: 4).
	result constToken: ((nodes at: 2) at: 5).
	result defaultToken: ((nodes at: 2) at: 6).
	result fnToken: ((nodes at: 2) at: 7).
	result name: ((nodes at: 2) at: 8).
	result leftParen: ((nodes at: 2) at: 9).
	result rightParen: ((nodes at: 2) at: 10).
	result block: ((nodes at: 2) at: 11).
	result semicolon: ((nodes at: 2) at: 12).
	result where: ((nodes at: 2) at: 13).
	result arrow: ((nodes at: 2) at: 14).
	result addNodes: ((nodes at: 2) at: 15) to: result types.
	result addNodes: ((nodes at: 2) at: 16) to: result attrs.
	result selfToken: ((nodes at: 2) at: 17).
	result mutToken: ((nodes at: 2) at: 18).
	result amp: ((nodes at: 2) at: 19).
	result lifetime: ((nodes at: 2) at: 20).
	result addTokens: ((nodes at: 2) at: 21) to: result colons.
	result addTokens: ((nodes at: 2) at: 22) to: result commas.
	result addNodes: ((nodes at: 2) at: 23) to: result patterns.
	result addTokens: ((nodes at: 2) at: 24) to: result bars.
	result addTokens: ((nodes at: 2) at: 25) to: result ellipsises.
	result lt: ((nodes at: 2) at: 26).
	result gt: ((nodes at: 2) at: 27).
	result addNodes: ((nodes at: 2) at: 28) to: result params.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForforLifetimes1: nodes [
	| result |
	result := Array new: 5.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: ((nodes at: 2) at: 1).
	result at: 3 put: ((nodes at: 2) at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction10: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 5) at: 2).
	result at: 18 put: ((nodes at: 5) at: 3).
	result at: 19 put: ((nodes at: 5) at: 4).
	result at: 20 put: ((nodes at: 5) at: 5).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 6).
	result at: 12 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction11: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 5) at: 2).
	result at: 18 put: ((nodes at: 5) at: 3).
	result at: 19 put: ((nodes at: 5) at: 4).
	result at: 20 put: ((nodes at: 5) at: 5).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 6).
	result at: 13 put: (nodes at: 7).
	result at: 11 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction12: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 5) at: 2).
	result at: 18 put: ((nodes at: 5) at: 3).
	result at: 19 put: ((nodes at: 5) at: 4).
	result at: 20 put: ((nodes at: 5) at: 5).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 6).
	result at: 13 put: (nodes at: 7).
	result at: 12 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction13: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 5) at: 2).
	result at: 18 put: ((nodes at: 5) at: 3).
	result at: 19 put: ((nodes at: 5) at: 4).
	result at: 20 put: ((nodes at: 5) at: 5).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 6).
	result at: 14 put: ((nodes at: 7) at: 1).
	self add: ((nodes at: 7) at: 2) to: (result at: 15).
	result at: 11 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction14: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 5) at: 2).
	result at: 18 put: ((nodes at: 5) at: 3).
	result at: 19 put: ((nodes at: 5) at: 4).
	result at: 20 put: ((nodes at: 5) at: 5).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 6).
	result at: 14 put: ((nodes at: 7) at: 1).
	self add: ((nodes at: 7) at: 2) to: (result at: 15).
	result at: 12 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction15: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 5) at: 2).
	result at: 18 put: ((nodes at: 5) at: 3).
	result at: 19 put: ((nodes at: 5) at: 4).
	result at: 20 put: ((nodes at: 5) at: 5).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 6).
	result at: 14 put: ((nodes at: 7) at: 1).
	self add: ((nodes at: 7) at: 2) to: (result at: 15).
	result at: 13 put: (nodes at: 8).
	result at: 11 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction16: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 5) at: 2).
	result at: 18 put: ((nodes at: 5) at: 3).
	result at: 19 put: ((nodes at: 5) at: 4).
	result at: 20 put: ((nodes at: 5) at: 5).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 6).
	result at: 14 put: ((nodes at: 7) at: 1).
	self add: ((nodes at: 7) at: 2) to: (result at: 15).
	result at: 13 put: (nodes at: 8).
	result at: 12 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction17: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	result at: 10 put: (nodes at: 6).
	result at: 11 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction18: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	result at: 10 put: (nodes at: 6).
	result at: 12 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction19: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	result at: 10 put: (nodes at: 6).
	result at: 13 put: (nodes at: 7).
	result at: 11 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction1: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	result at: 10 put: (nodes at: 5).
	result at: 11 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction20: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	result at: 10 put: (nodes at: 6).
	result at: 13 put: (nodes at: 7).
	result at: 12 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction21: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	result at: 10 put: (nodes at: 6).
	result at: 14 put: ((nodes at: 7) at: 1).
	self add: ((nodes at: 7) at: 2) to: (result at: 15).
	result at: 11 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction22: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	result at: 10 put: (nodes at: 6).
	result at: 14 put: ((nodes at: 7) at: 1).
	self add: ((nodes at: 7) at: 2) to: (result at: 15).
	result at: 12 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction23: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	result at: 10 put: (nodes at: 6).
	result at: 14 put: ((nodes at: 7) at: 1).
	self add: ((nodes at: 7) at: 2) to: (result at: 15).
	result at: 13 put: (nodes at: 8).
	result at: 11 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction24: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	result at: 10 put: (nodes at: 6).
	result at: 14 put: ((nodes at: 7) at: 1).
	self add: ((nodes at: 7) at: 2) to: (result at: 15).
	result at: 13 put: (nodes at: 8).
	result at: 12 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction25: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 6) at: 2).
	result at: 18 put: ((nodes at: 6) at: 3).
	result at: 19 put: ((nodes at: 6) at: 4).
	result at: 20 put: ((nodes at: 6) at: 5).
	self addAll: ((nodes at: 6) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 6) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 6) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 6) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 6) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 6) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 7).
	result at: 11 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction26: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 6) at: 2).
	result at: 18 put: ((nodes at: 6) at: 3).
	result at: 19 put: ((nodes at: 6) at: 4).
	result at: 20 put: ((nodes at: 6) at: 5).
	self addAll: ((nodes at: 6) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 6) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 6) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 6) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 6) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 6) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 7).
	result at: 12 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction27: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 6) at: 2).
	result at: 18 put: ((nodes at: 6) at: 3).
	result at: 19 put: ((nodes at: 6) at: 4).
	result at: 20 put: ((nodes at: 6) at: 5).
	self addAll: ((nodes at: 6) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 6) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 6) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 6) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 6) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 6) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 7).
	result at: 13 put: (nodes at: 8).
	result at: 11 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction28: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 6) at: 2).
	result at: 18 put: ((nodes at: 6) at: 3).
	result at: 19 put: ((nodes at: 6) at: 4).
	result at: 20 put: ((nodes at: 6) at: 5).
	self addAll: ((nodes at: 6) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 6) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 6) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 6) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 6) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 6) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 7).
	result at: 13 put: (nodes at: 8).
	result at: 12 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction29: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 6) at: 2).
	result at: 18 put: ((nodes at: 6) at: 3).
	result at: 19 put: ((nodes at: 6) at: 4).
	result at: 20 put: ((nodes at: 6) at: 5).
	self addAll: ((nodes at: 6) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 6) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 6) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 6) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 6) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 6) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 7).
	result at: 14 put: ((nodes at: 8) at: 1).
	self add: ((nodes at: 8) at: 2) to: (result at: 15).
	result at: 11 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction2: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	result at: 10 put: (nodes at: 5).
	result at: 12 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction30: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 6) at: 2).
	result at: 18 put: ((nodes at: 6) at: 3).
	result at: 19 put: ((nodes at: 6) at: 4).
	result at: 20 put: ((nodes at: 6) at: 5).
	self addAll: ((nodes at: 6) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 6) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 6) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 6) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 6) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 6) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 7).
	result at: 14 put: ((nodes at: 8) at: 1).
	self add: ((nodes at: 8) at: 2) to: (result at: 15).
	result at: 12 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction31: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 6) at: 2).
	result at: 18 put: ((nodes at: 6) at: 3).
	result at: 19 put: ((nodes at: 6) at: 4).
	result at: 20 put: ((nodes at: 6) at: 5).
	self addAll: ((nodes at: 6) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 6) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 6) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 6) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 6) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 6) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 7).
	result at: 14 put: ((nodes at: 8) at: 1).
	self add: ((nodes at: 8) at: 2) to: (result at: 15).
	result at: 13 put: (nodes at: 9).
	result at: 11 put: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction32: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 6) at: 2).
	result at: 18 put: ((nodes at: 6) at: 3).
	result at: 19 put: ((nodes at: 6) at: 4).
	result at: 20 put: ((nodes at: 6) at: 5).
	self addAll: ((nodes at: 6) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 6) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 6) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 6) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 6) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 6) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 7).
	result at: 14 put: ((nodes at: 8) at: 1).
	self add: ((nodes at: 8) at: 2) to: (result at: 15).
	result at: 13 put: (nodes at: 9).
	result at: 12 put: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction3: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	result at: 10 put: (nodes at: 5).
	result at: 13 put: (nodes at: 6).
	result at: 11 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction4: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	result at: 10 put: (nodes at: 5).
	result at: 13 put: (nodes at: 6).
	result at: 12 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction5: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	result at: 10 put: (nodes at: 5).
	result at: 14 put: ((nodes at: 6) at: 1).
	self add: ((nodes at: 6) at: 2) to: (result at: 15).
	result at: 11 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction6: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	result at: 10 put: (nodes at: 5).
	result at: 14 put: ((nodes at: 6) at: 1).
	self add: ((nodes at: 6) at: 2) to: (result at: 15).
	result at: 12 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction7: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	result at: 10 put: (nodes at: 5).
	result at: 14 put: ((nodes at: 6) at: 1).
	self add: ((nodes at: 6) at: 2) to: (result at: 15).
	result at: 13 put: (nodes at: 7).
	result at: 11 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction8: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	result at: 10 put: (nodes at: 5).
	result at: 14 put: ((nodes at: 6) at: 1).
	self add: ((nodes at: 6) at: 2) to: (result at: 15).
	result at: 13 put: (nodes at: 7).
	result at: 12 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction9: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 5) at: 2).
	result at: 18 put: ((nodes at: 5) at: 3).
	result at: 19 put: ((nodes at: 5) at: 4).
	result at: 20 put: ((nodes at: 5) at: 5).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 6).
	result at: 11 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionParam1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	result at: 4 put: ((nodes at: 2) at: 3).
	result at: 5 put: ((nodes at: 2) at: 4).
	result at: 6 put: ((nodes at: 2) at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionParam2: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	result at: 6 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionParam3: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	result at: 5 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionParamPattern1: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	result at: 3 put: (nodes at: 2).
	result at: 4 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionParamPattern2: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	result at: 3 put: (nodes at: 2).
	result at: 5 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionParameters1: nodes [
	| result |
	result := Array new: 11.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	self add: ((nodes at: 1) at: 6) to: (result at: 6).
	self add: ((nodes at: 1) at: 7) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionParameters2: nodes [
	| result |
	result := Array new: 11.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	self add: ((nodes at: 1) at: 6) to: (result at: 6).
	self add: ((nodes at: 1) at: 7) to: (result at: 7).
	self add: (nodes at: 2) to: (result at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionParameters3: nodes [
	| result |
	result := Array new: 11.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 10).
	self add: ((nodes at: 1) at: 4) to: (result at: 6).
	self add: ((nodes at: 1) at: 5) to: (result at: 7).
	self add: ((nodes at: 1) at: 6) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionParameters4: nodes [
	| result |
	result := Array new: 11.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 10).
	self add: ((nodes at: 1) at: 4) to: (result at: 6).
	self add: ((nodes at: 1) at: 5) to: (result at: 7).
	self add: ((nodes at: 1) at: 6) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 10).
	self add: (nodes at: 3) to: (result at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionParameters5: nodes [
	| result |
	result := Array new: 11.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	self add: ((nodes at: 1) at: 6) to: (result at: 6).
	self add: ((nodes at: 1) at: 7) to: (result at: 7).
	self add: (nodes at: 2) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 10).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self add: ((nodes at: 3) at: 6) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionParameters6: nodes [
	| result |
	result := Array new: 11.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	self add: ((nodes at: 1) at: 6) to: (result at: 6).
	self add: ((nodes at: 1) at: 7) to: (result at: 7).
	self add: (nodes at: 2) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 10).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self add: ((nodes at: 3) at: 6) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 10).
	self add: (nodes at: 5) to: (result at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionParametersMaybeNamedVariadic1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers10: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 1 put: ((nodes at: 3) at: 1).
	result at: 2 put: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers11: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (nodes at: 1).
	result at: 4 put: (nodes at: 2).
	result at: 1 put: ((nodes at: 3) at: 1).
	result at: 2 put: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers12: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (nodes at: 1).
	result at: 4 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 1 put: ((nodes at: 4) at: 1).
	result at: 2 put: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers13: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (nodes at: 1).
	result at: 5 put: (nodes at: 2).
	result at: 1 put: ((nodes at: 3) at: 1).
	result at: 2 put: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers14: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (nodes at: 1).
	result at: 5 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 1 put: ((nodes at: 4) at: 1).
	result at: 2 put: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers15: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (nodes at: 1).
	result at: 5 put: (nodes at: 2).
	result at: 4 put: (nodes at: 3).
	result at: 1 put: ((nodes at: 4) at: 1).
	result at: 2 put: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers16: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (nodes at: 1).
	result at: 5 put: (nodes at: 2).
	result at: 4 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	result at: 1 put: ((nodes at: 5) at: 1).
	result at: 2 put: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers2: nodes [
	| result |
	result := Array new: 6.
	result at: 3 put: (nodes at: 1).
	result at: 1 put: ((nodes at: 2) at: 1).
	result at: 2 put: ((nodes at: 2) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers3: nodes [
	| result |
	result := Array new: 6.
	result at: 4 put: (nodes at: 1).
	result at: 1 put: ((nodes at: 2) at: 1).
	result at: 2 put: ((nodes at: 2) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers4: nodes [
	| result |
	result := Array new: 6.
	result at: 4 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 1 put: ((nodes at: 3) at: 1).
	result at: 2 put: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers5: nodes [
	| result |
	result := Array new: 6.
	result at: 5 put: (nodes at: 1).
	result at: 1 put: ((nodes at: 2) at: 1).
	result at: 2 put: ((nodes at: 2) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers6: nodes [
	| result |
	result := Array new: 6.
	result at: 5 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 1 put: ((nodes at: 3) at: 1).
	result at: 2 put: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers7: nodes [
	| result |
	result := Array new: 6.
	result at: 5 put: (nodes at: 1).
	result at: 4 put: (nodes at: 2).
	result at: 1 put: ((nodes at: 3) at: 1).
	result at: 2 put: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers8: nodes [
	| result |
	result := Array new: 6.
	result at: 5 put: (nodes at: 1).
	result at: 4 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 1 put: ((nodes at: 4) at: 1).
	result at: 2 put: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers9: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (nodes at: 1).
	result at: 1 put: ((nodes at: 2) at: 1).
	result at: 2 put: ((nodes at: 2) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionTypeQualifiers1: nodes [
	| result |
	result := Array new: 3.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionTypeQualifiers2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionTypeQualifiers3: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionTypeQualifiers4: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionTypeQualifiers5: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionTypeQualifiers6: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForgenericArgs1: nodes [
	| result |
	result := RustGenericArgsNode new.
	result lt: (nodes at: 1).
	result gt: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForgenericArgs2: nodes [
	| result |
	result := RustGenericArgsNode new.
	result lt: (nodes at: 1).
	result addNode: (nodes at: 2) to: result genericArgs.
	result addTokens: ((nodes at: 3) at: 1) to: result commas.
	result addNodes: ((nodes at: 3) at: 2) to: result genericArgs.
	result gt: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForgenericArgs3: nodes [
	| result |
	result := RustGenericArgsNode new.
	result lt: (nodes at: 1).
	result addNode: (nodes at: 2) to: result genericArgs.
	result addTokens: ((nodes at: 3) at: 1) to: result commas.
	result addNodes: ((nodes at: 3) at: 2) to: result genericArgs.
	result addToken: (nodes at: 4) to: result commas.
	result gt: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForgenericArgsBinding1: nodes [
	| result |
	result := RustGenericArgBindingNode new.
	result name: (nodes at: 1).
	result equalsToken: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForgenericArgsConst2: nodes [
	| result |
	result := RustUnaryExpressionNode new.
	result operator: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForgenericArgsConst4: nodes [
	| result |
	result := RustPathExpressionNode new.
	result addToken: (nodes at: 1) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForgenericParam1: nodes [
	| result |
	result := RustGenericParamNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result param: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForgenericParams1: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForgenericParams2: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForgenericParams3: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	self add: (nodes at: 3) to: (result at: 4).
	result at: 2 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForgenericParams4: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 4).
	self add: (nodes at: 3) to: (result at: 3).
	result at: 2 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForgenericParams5: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 4).
	self add: (nodes at: 3) to: (result at: 3).
	self add: (nodes at: 4) to: (result at: 4).
	result at: 2 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForgroupedPattern1: nodes [
	| result |
	result := RustGroupedPatternNode new.
	result leftParen: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result patterns.
	result addTokens: ((nodes at: 2) at: 2) to: result bars.
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForidentifierPattern1: nodes [
	| result |
	result := RustIdentifierPatternNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForidentifierPattern2: nodes [
	| result |
	result := RustIdentifierPatternNode new.
	result name: (nodes at: 1).
	result atToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result patterns.
	result addTokens: ((nodes at: 3) at: 2) to: result bars.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForidentifierPattern3: nodes [
	| result |
	result := RustIdentifierPatternNode new.
	result mutToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForidentifierPattern4: nodes [
	| result |
	result := RustIdentifierPatternNode new.
	result mutToken: (nodes at: 1).
	result name: (nodes at: 2).
	result atToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result patterns.
	result addTokens: ((nodes at: 4) at: 2) to: result bars.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForidentifierPattern5: nodes [
	| result |
	result := RustIdentifierPatternNode new.
	result refToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForidentifierPattern6: nodes [
	| result |
	result := RustIdentifierPatternNode new.
	result refToken: (nodes at: 1).
	result name: (nodes at: 2).
	result atToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result patterns.
	result addTokens: ((nodes at: 4) at: 2) to: result bars.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForidentifierPattern7: nodes [
	| result |
	result := RustIdentifierPatternNode new.
	result refToken: (nodes at: 1).
	result mutToken: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForidentifierPattern8: nodes [
	| result |
	result := RustIdentifierPatternNode new.
	result refToken: (nodes at: 1).
	result mutToken: (nodes at: 2).
	result name: (nodes at: 3).
	result atToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result patterns.
	result addTokens: ((nodes at: 5) at: 2) to: result bars.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForifExpression1: nodes [
	| result |
	result := RustIfExpressionNode new.
	result ifToken: (nodes at: 1).
	result conditional: (nodes at: 2).
	result thenValue: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForifExpression2: nodes [
	| result |
	result := RustIfExpressionNode new.
	result ifToken: (nodes at: 1).
	result conditional: (nodes at: 2).
	result thenValue: (nodes at: 3).
	result elseToken: (nodes at: 4).
	result elseValue: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForifLetExpression1: nodes [
	| result |
	result := RustIfLetExpressionNode new.
	result ifToken: (nodes at: 1).
	result letToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result patterns.
	result addTokens: ((nodes at: 3) at: 2) to: result bars.
	result equalsToken: (nodes at: 4).
	result matchValue: (nodes at: 5).
	result thenValue: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForifLetExpression2: nodes [
	| result |
	result := RustIfLetExpressionNode new.
	result ifToken: (nodes at: 1).
	result letToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result patterns.
	result addTokens: ((nodes at: 3) at: 2) to: result bars.
	result equalsToken: (nodes at: 4).
	result matchValue: (nodes at: 5).
	result thenValue: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result elseValue: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForifLetExpression5: nodes [
	| result |
	result := RustIfLetExpressionNode new.
	result letToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result patterns.
	result addTokens: ((nodes at: 2) at: 2) to: result bars.
	result equalsToken: (nodes at: 3).
	result matchValue: (nodes at: 4).
	result elseToken: (nodes at: 5).
	result elseValue: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForimplTraitType1: nodes [
	| result |
	result := RustImplTraitTypeNode new.
	result implToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result typeBounds.
	result addTokens: ((nodes at: 2) at: 2) to: result pluses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForimplTraitTypeOneBound1: nodes [
	| result |
	result := RustImplTraitTypeNode new.
	result implToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result typeBounds.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForimplementation1: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).
	result at: 7 put: ((nodes at: 1) at: 7).
	result at: 8 put: ((nodes at: 1) at: 8).
	result at: 9 put: ((nodes at: 1) at: 9).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForimplementation2: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	result at: 12 put: ((nodes at: 1) at: 3).
	result at: 7 put: ((nodes at: 1) at: 4).
	result at: 3 put: ((nodes at: 1) at: 5).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 6).
	result at: 5 put: ((nodes at: 1) at: 8).
	result at: 13 put: ((nodes at: 1) at: 9).
	result at: 14 put: ((nodes at: 1) at: 10).
	result at: 8 put: ((nodes at: 1) at: 11).
	result at: 9 put: ((nodes at: 1) at: 12).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 11).
	result at: 15 put: ((nodes at: 1) at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForinferredType1: nodes [
	| result |
	result := RustInferredTypeNode new.
	result underscore: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForinherentImpl1: nodes [
	| result |
	result := Array new: 11.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	self addAll: (nodes at: 4) to: (result at: 4).
	result at: 5 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForinherentImpl2: nodes [
	| result |
	result := Array new: 11.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	self addAll: (nodes at: 4) to: (result at: 4).
	self addAll: (nodes at: 5) to: (result at: 6).
	result at: 5 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForinherentImpl3: nodes [
	| result |
	result := Array new: 11.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 7 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	self addAll: (nodes at: 5) to: (result at: 4).
	result at: 5 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForinherentImpl4: nodes [
	| result |
	result := Array new: 11.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 7 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	self addAll: (nodes at: 5) to: (result at: 4).
	self addAll: (nodes at: 6) to: (result at: 6).
	result at: 5 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForinherentImpl5: nodes [
	| result |
	result := Array new: 11.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 8 put: ((nodes at: 2) at: 1).
	result at: 9 put: ((nodes at: 2) at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 11).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	self addAll: (nodes at: 5) to: (result at: 4).
	result at: 5 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForinherentImpl6: nodes [
	| result |
	result := Array new: 11.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 8 put: ((nodes at: 2) at: 1).
	result at: 9 put: ((nodes at: 2) at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 11).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	self addAll: (nodes at: 5) to: (result at: 4).
	self addAll: (nodes at: 6) to: (result at: 6).
	result at: 5 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForinherentImpl7: nodes [
	| result |
	result := Array new: 11.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 8 put: ((nodes at: 2) at: 1).
	result at: 9 put: ((nodes at: 2) at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 11).
	result at: 2 put: (nodes at: 3).
	result at: 7 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	self addAll: (nodes at: 6) to: (result at: 4).
	result at: 5 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForinherentImpl8: nodes [
	| result |
	result := Array new: 11.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 8 put: ((nodes at: 2) at: 1).
	result at: 9 put: ((nodes at: 2) at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 11).
	result at: 2 put: (nodes at: 3).
	result at: 7 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	self addAll: (nodes at: 6) to: (result at: 4).
	self addAll: (nodes at: 7) to: (result at: 6).
	result at: 5 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForinnerAttribute1: nodes [
	| result |
	result := RustAttributeNode new.
	result hashToken: (nodes at: 1).
	result bang: (nodes at: 2).
	result leftBracket: (nodes at: 3).
	result path: ((nodes at: 4) at: 1).
	result addObjects: ((nodes at: 4) at: 2) to: result tokens.
	result equalsToken: ((nodes at: 4) at: 3).
	result value: ((nodes at: 4) at: 4).
	result rightBracket: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForinnerAttribute__attr__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForinnerAttribute__attr__2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForitem1: nodes [
	| result |
	result := Array new: 2.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForitem3: nodes [
	| result |
	result := Array new: 2.
	result at: 2 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 2).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForitem_1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForitem_2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForiteratorLoopExpression1: nodes [
	| result |
	result := Array new: 6.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	result at: 4 put: (nodes at: 3).
	result at: 5 put: (nodes at: 4).
	result at: 6 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForletStatement1: nodes [
	| result |
	result := RustLetStatementNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result letToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result patterns.
	result addTokens: ((nodes at: 3) at: 2) to: result bars.
	result semicolon: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForletStatement2: nodes [
	| result |
	result := RustLetStatementNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result letToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result patterns.
	result addTokens: ((nodes at: 3) at: 2) to: result bars.
	result equalsToken: (nodes at: 4).
	result value: (nodes at: 5).
	result semicolon: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForletStatement3: nodes [
	| result |
	result := RustLetStatementNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result letToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result patterns.
	result addTokens: ((nodes at: 3) at: 2) to: result bars.
	result colon: (nodes at: 4).
	result type: (nodes at: 5).
	result semicolon: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForletStatement4: nodes [
	| result |
	result := RustLetStatementNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result letToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result patterns.
	result addTokens: ((nodes at: 3) at: 2) to: result bars.
	result colon: (nodes at: 4).
	result type: (nodes at: 5).
	result equalsToken: (nodes at: 6).
	result value: (nodes at: 7).
	result semicolon: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForlifetimeBounds2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForlifetimeParam1: nodes [
	| result |
	result := RustLifetimeParamNode new.
	result lifetime: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForlifetimeParam2: nodes [
	| result |
	result := RustLifetimeParamNode new.
	result lifetime: (nodes at: 1).
	result colon: (nodes at: 2).
	result addTokens: ((nodes at: 3) at: 1) to: result lifetimeBounds.
	result addTokens: ((nodes at: 3) at: 2) to: result pluses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForlifetimeWhereClauseItem1: nodes [
	| result |
	result := RustLifetimeWhereClauseItemNode new.
	result lifetime: (nodes at: 1).
	result colon: (nodes at: 2).
	result addTokens: ((nodes at: 3) at: 1) to: result lifetimeBounds.
	result addTokens: ((nodes at: 3) at: 2) to: result pluses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForliteralExpression10: nodes [
	| result |
	result := RustLiteralExpressionNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForloopExpression1: nodes [
	| result |
	result := RustLoopExpressionNode new.
	result loopToken: ((nodes at: 1) at: 1).
	result block: ((nodes at: 1) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForloopExpression2: nodes [
	| result |
	result := RustLoopExpressionNode new.
	result label: ((nodes at: 1) at: 1).
	result colon: ((nodes at: 1) at: 2).
	result loopToken: ((nodes at: 2) at: 1).
	result block: ((nodes at: 2) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForloopExpression3: nodes [
	| result |
	result := RustWhileLoopExpressionNode new.
	result whileToken: ((nodes at: 1) at: 1).
	result condition: ((nodes at: 1) at: 2).
	result block: ((nodes at: 1) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForloopExpression4: nodes [
	| result |
	result := RustWhileLoopExpressionNode new.
	result label: ((nodes at: 1) at: 1).
	result colon: ((nodes at: 1) at: 2).
	result whileToken: ((nodes at: 2) at: 1).
	result condition: ((nodes at: 2) at: 2).
	result block: ((nodes at: 2) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForloopExpression5: nodes [
	| result |
	result := RustWhileLetLoopExpressionNode new.
	result whileToken: ((nodes at: 1) at: 1).
	result letToken: ((nodes at: 1) at: 2).
	result addNodes: ((nodes at: 1) at: 3) to: result patterns.
	result addTokens: ((nodes at: 1) at: 4) to: result bars.
	result equalsToken: ((nodes at: 1) at: 5).
	result value: ((nodes at: 1) at: 6).
	result block: ((nodes at: 1) at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForloopExpression6: nodes [
	| result |
	result := RustWhileLetLoopExpressionNode new.
	result label: ((nodes at: 1) at: 1).
	result colon: ((nodes at: 1) at: 2).
	result whileToken: ((nodes at: 2) at: 1).
	result letToken: ((nodes at: 2) at: 2).
	result addNodes: ((nodes at: 2) at: 3) to: result patterns.
	result addTokens: ((nodes at: 2) at: 4) to: result bars.
	result equalsToken: ((nodes at: 2) at: 5).
	result value: ((nodes at: 2) at: 6).
	result block: ((nodes at: 2) at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForloopExpression7: nodes [
	| result |
	result := RustForIteratorLoopExpressionNode new.
	result forToken: ((nodes at: 1) at: 1).
	result addNodes: ((nodes at: 1) at: 2) to: result patterns.
	result addTokens: ((nodes at: 1) at: 3) to: result bars.
	result inToken: ((nodes at: 1) at: 4).
	result value: ((nodes at: 1) at: 5).
	result block: ((nodes at: 1) at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForloopExpression8: nodes [
	| result |
	result := RustForIteratorLoopExpressionNode new.
	result label: ((nodes at: 1) at: 1).
	result colon: ((nodes at: 1) at: 2).
	result forToken: ((nodes at: 2) at: 1).
	result addNodes: ((nodes at: 2) at: 2) to: result patterns.
	result addTokens: ((nodes at: 2) at: 3) to: result bars.
	result inToken: ((nodes at: 2) at: 4).
	result value: ((nodes at: 2) at: 5).
	result block: ((nodes at: 2) at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroInvocationSemi1: nodes [
	| result |
	result := RustMacroInvocationStatementNode new.
	result macroInvocation: (nodes at: 1).
	result semicolon: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroInvocationSemi2: nodes [
	| result |
	result := RustMacroInvocationStatementNode new.
	result macroInvocation: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroInvocationWithoutBlock1: nodes [
	| result |
	result := RustMacroInvocationNode new.
	result name: (nodes at: 1).
	result bang: (nodes at: 2).
	result left: (nodes at: 3).
	result addObjects: (nodes at: 4) to: result tokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroMatch1: nodes [
	| result |
	result := RustMacroMatchNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroMatch2: nodes [
	| result |
	result := RustMacroMatchNode new.
	result left: ((nodes at: 1) at: 1).
	result addNodes: ((nodes at: 1) at: 2) to: result matches.
	result right: ((nodes at: 1) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroMatch4: nodes [
	| result |
	result := RustMacroMatchNode new.
	result dollar: (nodes at: 1).
	result name: (nodes at: 2).
	result colon: (nodes at: 3).
	result fragment: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroMatch5: nodes [
	| result |
	result := RustMacroMatchNode new.
	result dollar: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result addNodes: (nodes at: 3) to: result matches.
	result rightParen: (nodes at: 4).
	result op: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroMatch6: nodes [
	| result |
	result := RustMacroMatchNode new.
	result dollar: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result addNodes: (nodes at: 3) to: result matches.
	result rightParen: (nodes at: 4).
	result name: (nodes at: 5).
	result op: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroMatcher1: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: (nodes at: 2) to: (result at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroRule1: nodes [
	| result |
	result := RustMacroRuleNode new.
	result left: ((nodes at: 1) at: 1).
	result addNodes: ((nodes at: 1) at: 2) to: result matches.
	result right: ((nodes at: 1) at: 3).
	result arrow: (nodes at: 2).
	result addObjects: (nodes at: 3) to: result tokens.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroRulesDef1: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	result at: 4 put: (nodes at: 3).
	self add: (nodes at: 4) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroRulesDef3: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	result at: 4 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroRulesDefinition1: nodes [
	| result |
	result := RustMacroRulesDefinitionNode new.
	result macroRulesToken: (nodes at: 1).
	result bang: (nodes at: 2).
	result name: (nodes at: 3).
	result left: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result rules.
	result addTokens: ((nodes at: 4) at: 3) to: result semicolons.
	result right: ((nodes at: 4) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormatchArm1: nodes [
	| result |
	result := RustMatchArmNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result addNodes: ((nodes at: 2) at: 1) to: result patterns.
	result addTokens: ((nodes at: 2) at: 2) to: result bars.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormatchArm2: nodes [
	| result |
	result := RustMatchArmNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result addNodes: ((nodes at: 2) at: 1) to: result patterns.
	result addTokens: ((nodes at: 2) at: 2) to: result bars.
	result ifToken: ((nodes at: 3) at: 1).
	result condition: ((nodes at: 3) at: 2).
	result letToken: ((nodes at: 3) at: 3).
	result addNodes: ((nodes at: 3) at: 4) to: result patterns.
	result addTokens: ((nodes at: 3) at: 5) to: result bars.
	result equalsToken: ((nodes at: 3) at: 6).
	result matchValue: ((nodes at: 3) at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormatchArmGuard1: nodes [
	| result |
	result := Array new: 7.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormatchArmGuard2: nodes [
	| result |
	result := Array new: 7.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 5).
	result at: 6 put: (nodes at: 4).
	result at: 7 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormatchArms1: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: (result at: 1).
	self add: (nodes at: 3) to: (result at: 2).
	self add: (nodes at: 4) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormatchArms2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: (result at: 1).
	self add: (nodes at: 3) to: (result at: 2).
	self add: (nodes at: 4) to: (result at: 3).
	self add: (nodes at: 5) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormatchExpression1: nodes [
	| result |
	result := RustMatchExpressionNode new.
	result matchToken: (nodes at: 1).
	result value: (nodes at: 2).
	result leftBrace: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result attrs.
	result rightBrace: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormatchExpression2: nodes [
	| result |
	result := RustMatchExpressionNode new.
	result matchToken: (nodes at: 1).
	result value: (nodes at: 2).
	result leftBrace: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result attrs.
	result addNodes: ((nodes at: 5) at: 1) to: result arms.
	result addTokens: ((nodes at: 5) at: 2) to: result arrows.
	result addNodes: ((nodes at: 5) at: 3) to: result armValues.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result rightBrace: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormaybeNamedFunctionParameters1: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	self add: ((nodes at: 1) at: 3) to: (result at: 3).
	self add: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormaybeNamedFunctionParameters2: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	self add: ((nodes at: 1) at: 3) to: (result at: 3).
	self add: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 4).
	self add: (nodes at: 3) to: (result at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormaybeNamedFunctionParametersVariadic1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	self add: ((nodes at: 1) at: 3) to: (result at: 3).
	self add: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 4).
	self add: (nodes at: 3) to: (result at: 5).
	self addAll: (nodes at: 4) to: (result at: 1).
	result at: 6 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormaybeNamedParam1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormaybeNamedParam3: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 4 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormodule1: nodes [
	| result |
	result := Array new: 8.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormodule2: nodes [
	| result |
	result := Array new: 8.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 4 put: (nodes at: 3).
	self addAll: (nodes at: 4) to: (result at: 5).
	result at: 6 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormodule3: nodes [
	| result |
	result := Array new: 8.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 4 put: (nodes at: 3).
	self addAll: (nodes at: 4) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 5).
	result at: 6 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormodule4: nodes [
	| result |
	result := Array new: 8.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormodule5: nodes [
	| result |
	result := Array new: 8.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	self addAll: (nodes at: 5) to: (result at: 5).
	result at: 6 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormodule6: nodes [
	| result |
	result := Array new: 8.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	self addAll: (nodes at: 5) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 5).
	result at: 6 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForneverType1: nodes [
	| result |
	result := RustNeverTypeNode new.
	result bang: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForobsoleteRangePattern1: nodes [
	| result |
	result := RustRangePatternNode new.
	result from: (nodes at: 1).
	result operator: (nodes at: 2).
	result to: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForouterAttribute1: nodes [
	| result |
	result := RustAttributeNode new.
	result hashToken: (nodes at: 1).
	result leftBracket: (nodes at: 2).
	result path: ((nodes at: 3) at: 1).
	result addObjects: ((nodes at: 3) at: 2) to: result tokens.
	result equalsToken: ((nodes at: 3) at: 3).
	result value: ((nodes at: 3) at: 4).
	result rightBracket: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForouterAttribute__attr__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	self add: (nodes at: 1) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForparenthesizedType1: nodes [
	| result |
	result := RustParenthesizedTypeNode new.
	result leftParen: (nodes at: 1).
	result type: (nodes at: 2).
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForpathInExpression1: nodes [
	| result |
	result := RustPathExpressionNode new.
	result addToken: ((nodes at: 1) at: 1) to: result names.
	result addToken: ((nodes at: 1) at: 2) to: result separators.
	result addNode: ((nodes at: 1) at: 3) to: result genericArgses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForpathInExpression2: nodes [
	| result |
	result := RustPathExpressionNode new.
	result addToken: ((nodes at: 1) at: 1) to: result names.
	result addToken: ((nodes at: 1) at: 2) to: result separators.
	result addNode: ((nodes at: 1) at: 3) to: result genericArgses.
	result addTokens: ((nodes at: 2) at: 1) to: result separators.
	result addTokens: ((nodes at: 2) at: 2) to: result names.
	result addNodes: ((nodes at: 2) at: 3) to: result genericArgses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForpathInExpression3: nodes [
	| result |
	result := RustPathExpressionNode new.
	result addToken: (nodes at: 1) to: result separators.
	result addToken: ((nodes at: 2) at: 1) to: result names.
	result addToken: ((nodes at: 2) at: 2) to: result separators.
	result addNode: ((nodes at: 2) at: 3) to: result genericArgses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForpathInExpression4: nodes [
	| result |
	result := RustPathExpressionNode new.
	result addToken: (nodes at: 1) to: result separators.
	result addToken: ((nodes at: 2) at: 1) to: result names.
	result addToken: ((nodes at: 2) at: 2) to: result separators.
	result addNode: ((nodes at: 2) at: 3) to: result genericArgses.
	result addTokens: ((nodes at: 3) at: 1) to: result separators.
	result addTokens: ((nodes at: 3) at: 2) to: result names.
	result addNodes: ((nodes at: 3) at: 3) to: result genericArgses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForpattern2: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	self add: (nodes at: 2) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForpatternWithoutRange14: nodes [
	| result |
	result := RustBoxPatternNode new.
	result boxToken: (nodes at: 1).
	result pattern: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForpredicatePatternLoopExpression1: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 4).
	result at: 6 put: (nodes at: 5).
	result at: 7 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForqualifiedPathInExpression1: nodes [
	| result |
	result := RustPathExpressionNode new.
	result lt: ((nodes at: 1) at: 1).
	result type: ((nodes at: 1) at: 2).
	result gt: ((nodes at: 1) at: 3).
	result asToken: ((nodes at: 1) at: 4).
	result typePath: ((nodes at: 1) at: 5).
	result addTokens: ((nodes at: 2) at: 1) to: result separators.
	result addTokens: ((nodes at: 2) at: 2) to: result names.
	result addNodes: ((nodes at: 2) at: 3) to: result genericArgses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForqualifiedPathInType1: nodes [
	| result |
	result := RustQualifiedPathInTypeNode new.
	result lt: ((nodes at: 1) at: 1).
	result addNode: ((nodes at: 1) at: 2) to: result types.
	result gt: ((nodes at: 1) at: 3).
	result asToken: ((nodes at: 1) at: 4).
	result typePath: ((nodes at: 1) at: 5).
	result addTokens: ((nodes at: 2) at: 1) to: result separators.
	result addTokens: ((nodes at: 2) at: 2) to: result names.
	result addNodes: ((nodes at: 2) at: 3) to: result genericArgses.
	result addTokens: ((nodes at: 2) at: 4) to: result leftParens.
	result addTokens: ((nodes at: 2) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 2) at: 6) to: result arrows.
	result addNodes: ((nodes at: 2) at: 7) to: result types.
	result addTokens: ((nodes at: 2) at: 8) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForqualifiedPathType1: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForqualifiedPathType2: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 4 put: (nodes at: 3).
	result at: 5 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForrangePattern2: nodes [
	| result |
	result := RustRangePatternNode new.
	result from: (nodes at: 1).
	result operator: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForrawPointerType1: nodes [
	| result |
	result := RustRawPointerTypeNode new.
	result star: (nodes at: 1).
	result mutToken: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForrawPointerType2: nodes [
	| result |
	result := RustRawPointerTypeNode new.
	result star: (nodes at: 1).
	result constToken: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForreferencePattern3: nodes [
	| result |
	result := RustReferencePatternNode new.
	result amp: (nodes at: 1).
	result pattern: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForreferencePattern4: nodes [
	| result |
	result := RustReferencePatternNode new.
	result amp: (nodes at: 1).
	result mutToken: (nodes at: 2).
	result pattern: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForreferenceType1: nodes [
	| result |
	result := RustReferenceTypeNode new.
	result amp: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForreferenceType2: nodes [
	| result |
	result := RustReferenceTypeNode new.
	result amp: (nodes at: 1).
	result mutToken: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForreferenceType3: nodes [
	| result |
	result := RustReferenceTypeNode new.
	result amp: (nodes at: 1).
	result lifetime: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForreferenceType4: nodes [
	| result |
	result := RustReferenceTypeNode new.
	result amp: (nodes at: 1).
	result lifetime: (nodes at: 2).
	result mutToken: (nodes at: 3).
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForrestPattern1: nodes [
	| result |
	result := RustRestPatternNode new.
	result operator: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForselfParam1: nodes [
	| result |
	result := Array new: 7.
	result at: 1 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	result at: 2 put: ((nodes at: 2) at: 1).
	result at: 3 put: ((nodes at: 2) at: 2).
	result at: 4 put: ((nodes at: 2) at: 3).
	result at: 5 put: ((nodes at: 2) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForselfParam2: nodes [
	| result |
	result := Array new: 7.
	result at: 1 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	result at: 2 put: ((nodes at: 2) at: 1).
	result at: 6 put: ((nodes at: 2) at: 2).
	result at: 7 put: ((nodes at: 2) at: 3).
	result at: 3 put: ((nodes at: 2) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForshorthandSelf1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForshorthandSelf2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForshorthandSelf3: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForshorthandSelf4: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForshorthandSelf5: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (nodes at: 1).
	result at: 4 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForshorthandSelf6: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (nodes at: 1).
	result at: 4 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 1 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForsimplePath1: nodes [
	| result |
	result := RustPathNode new.
	result addToken: (nodes at: 1) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForsimplePath2: nodes [
	| result |
	result := RustPathNode new.
	result addToken: (nodes at: 1) to: result names.
	result addTokens: ((nodes at: 2) at: 1) to: result separators.
	result addTokens: ((nodes at: 2) at: 2) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForsimplePath3: nodes [
	| result |
	result := RustPathNode new.
	result addToken: (nodes at: 1) to: result separators.
	result addToken: (nodes at: 2) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForsimplePath4: nodes [
	| result |
	result := RustPathNode new.
	result addToken: (nodes at: 1) to: result separators.
	result addToken: (nodes at: 2) to: result names.
	result addTokens: ((nodes at: 3) at: 1) to: result separators.
	result addTokens: ((nodes at: 3) at: 2) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForslicePattern1: nodes [
	| result |
	result := RustSlicePatternNode new.
	result leftBracket: (nodes at: 1).
	result rightBracket: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForslicePattern2: nodes [
	| result |
	result := RustSlicePatternNode new.
	result leftBracket: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result patterns.
	result addTokens: ((nodes at: 2) at: 2) to: result bars.
	result addTokens: ((nodes at: 2) at: 3) to: result commas.
	result rightBracket: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForslicePatternItems1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForslicePatternItems2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self add: (nodes at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForslicePatternItems3: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForslicePatternItems4: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForsliceType1: nodes [
	| result |
	result := RustSliceTypeNode new.
	result leftBracket: (nodes at: 1).
	result type: (nodes at: 2).
	result rightBracket: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstatement1: nodes [
	| result |
	result := RustEmptyStatementNode new.
	result semicolon: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstatement2: nodes [
	| result |
	result := RustItemStatementNode new.
	result item: ((nodes at: 1) at: 1).
	result addNodes: ((nodes at: 1) at: 2) to: result attrs.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstatement4: nodes [
	| result |
	result := RustExpressionStatementNode new.
	result expression: ((nodes at: 1) at: 1).
	result semicolon: ((nodes at: 1) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstaticItem1: nodes [
	| result |
	result := Array new: 8.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	result at: 5 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstaticItem2: nodes [
	| result |
	result := Array new: 8.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	result at: 6 put: (nodes at: 5).
	result at: 7 put: (nodes at: 6).
	result at: 5 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstaticItem3: nodes [
	| result |
	result := Array new: 8.
	result at: 1 put: (nodes at: 1).
	result at: 8 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: (nodes at: 5).
	result at: 5 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstaticItem4: nodes [
	| result |
	result := Array new: 8.
	result at: 1 put: (nodes at: 1).
	result at: 8 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: (nodes at: 5).
	result at: 6 put: (nodes at: 6).
	result at: 7 put: (nodes at: 7).
	result at: 5 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstruct2: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 7 put: ((nodes at: 1) at: 5).
	result at: 8 put: ((nodes at: 1) at: 6).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 6).
	result at: 9 put: ((nodes at: 1) at: 9).
	result at: 10 put: ((nodes at: 1) at: 10).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructExprField1: nodes [
	| result |
	result := RustStructExprFieldNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructExprField3: nodes [
	| result |
	result := RustStructExprFieldNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result name: (nodes at: 2).
	result colon: (nodes at: 3).
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructExprFields1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self add: (nodes at: 3) to: (result at: 2).
	result at: 3 put: ((nodes at: 4) at: 1).
	result at: 4 put: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructExprFields2: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructExprFields3: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self add: (nodes at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructExprStruct1: nodes [
	| result |
	result := RustStructExprStructNode new.
	result path: (nodes at: 1).
	result leftBrace: (nodes at: 2).
	result addNodes: (nodes at: 3) to: result attrs.
	result rightBrace: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructExprStruct2: nodes [
	| result |
	result := RustStructExprStructNode new.
	result path: (nodes at: 1).
	result leftBrace: (nodes at: 2).
	result addNodes: (nodes at: 3) to: result attrs.
	result addNodes: ((nodes at: 4) at: 1) to: result fields.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result dotDot: ((nodes at: 4) at: 3).
	result from: ((nodes at: 4) at: 4).
	result rightBrace: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructExprStruct3: nodes [
	| result |
	result := RustStructExprStructNode new.
	result path: (nodes at: 1).
	result leftBrace: (nodes at: 2).
	result addNodes: (nodes at: 3) to: result attrs.
	result dotDot: ((nodes at: 4) at: 1).
	result from: ((nodes at: 4) at: 2).
	result rightBrace: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructExprTuple1: nodes [
	| result |
	result := RustStructExprTupleNode new.
	result path: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructExprTuple2: nodes [
	| result |
	result := RustStructExprTupleNode new.
	result path: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result addNode: (nodes at: 3) to: result args.
	result addTokens: ((nodes at: 4) at: 1) to: result commas.
	result addNodes: ((nodes at: 4) at: 2) to: result args.
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructExprTuple3: nodes [
	| result |
	result := RustStructExprTupleNode new.
	result path: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result addNode: (nodes at: 3) to: result args.
	result addTokens: ((nodes at: 4) at: 1) to: result commas.
	result addNodes: ((nodes at: 4) at: 2) to: result args.
	result addToken: (nodes at: 5) to: result commas.
	result rightParen: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructField1: nodes [
	| result |
	result := RustStructFieldNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result name: (nodes at: 2).
	result colon: (nodes at: 3).
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructField2: nodes [
	| result |
	result := RustStructFieldNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result visibility: (nodes at: 2).
	result name: (nodes at: 3).
	result colon: (nodes at: 4).
	result type: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructPattern1: nodes [
	| result |
	result := RustStructPatternNode new.
	result path: (nodes at: 1).
	result leftBrace: (nodes at: 2).
	result rightBrace: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructPattern2: nodes [
	| result |
	result := RustStructPatternNode new.
	result path: (nodes at: 1).
	result leftBrace: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result fields.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightBrace: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructPatternElements2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructPatternElements3: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructPatternElements4: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructPatternEtCetera1: nodes [
	| result |
	result := RustStructPatternEtCeteraNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result dotDot: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructPatternField1: nodes [
	| result |
	result := RustStructPatternFieldNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result name: (nodes at: 2).
	result colon: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result patterns.
	result addTokens: ((nodes at: 4) at: 2) to: result bars.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructPatternField3: nodes [
	| result |
	result := RustStructPatternFieldNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructPatternField4: nodes [
	| result |
	result := RustStructPatternFieldNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result mutToken: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructPatternField5: nodes [
	| result |
	result := RustStructPatternFieldNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result refToken: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructPatternField6: nodes [
	| result |
	result := RustStructPatternFieldNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result refToken: (nodes at: 2).
	result mutToken: (nodes at: 3).
	result name: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructStruct10: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 9 put: ((nodes at: 3) at: 1).
	result at: 10 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	result at: 8 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	result at: 4 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructStruct11: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 9 put: ((nodes at: 3) at: 1).
	result at: 10 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	result at: 8 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 6).
	result at: 4 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructStruct12: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 9 put: ((nodes at: 3) at: 1).
	result at: 10 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	result at: 8 put: (nodes at: 4).
	result at: 7 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructStruct1: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructStruct2: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 6).
	result at: 4 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructStruct3: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 7 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructStruct4: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructStruct5: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 6).
	result at: 4 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructStruct6: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 7 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructStruct7: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 9 put: ((nodes at: 3) at: 1).
	result at: 10 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructStruct8: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 9 put: ((nodes at: 3) at: 1).
	result at: 10 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	result at: 3 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 6).
	result at: 4 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructStruct9: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 9 put: ((nodes at: 3) at: 1).
	result at: 10 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	result at: 7 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortokenTreeToken5: nodes [
	| result |
	result := RustMacroTokenNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortokenTree_2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait10: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 16 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 8 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 10).
	result at: 3 put: (nodes at: 6).
	result at: 4 put: (nodes at: 7).
	self addAll: (nodes at: 8) to: (result at: 5).
	self addAll: (nodes at: 9) to: (result at: 6).
	result at: 7 put: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait11: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 16 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 11 put: ((nodes at: 4) at: 1).
	result at: 12 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 14).
	result at: 3 put: (nodes at: 5).
	result at: 4 put: (nodes at: 6).
	self addAll: (nodes at: 7) to: (result at: 5).
	self addAll: (nodes at: 8) to: (result at: 6).
	result at: 7 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait12: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 16 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 11 put: ((nodes at: 4) at: 1).
	result at: 12 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 14).
	result at: 8 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 10).
	result at: 3 put: (nodes at: 7).
	result at: 4 put: (nodes at: 8).
	self addAll: (nodes at: 9) to: (result at: 5).
	self addAll: (nodes at: 10) to: (result at: 6).
	result at: 7 put: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait13: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 16 put: (nodes at: 1).
	result at: 15 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	result at: 4 put: (nodes at: 6).
	self addAll: (nodes at: 7) to: (result at: 5).
	self addAll: (nodes at: 8) to: (result at: 6).
	result at: 7 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait14: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 16 put: (nodes at: 1).
	result at: 15 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 8 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 10).
	result at: 3 put: (nodes at: 7).
	result at: 4 put: (nodes at: 8).
	self addAll: (nodes at: 9) to: (result at: 5).
	self addAll: (nodes at: 10) to: (result at: 6).
	result at: 7 put: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait15: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 16 put: (nodes at: 1).
	result at: 15 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 11 put: ((nodes at: 5) at: 1).
	result at: 12 put: ((nodes at: 5) at: 2).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 14).
	result at: 3 put: (nodes at: 6).
	result at: 4 put: (nodes at: 7).
	self addAll: (nodes at: 8) to: (result at: 5).
	self addAll: (nodes at: 9) to: (result at: 6).
	result at: 7 put: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait16: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 16 put: (nodes at: 1).
	result at: 15 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 11 put: ((nodes at: 5) at: 1).
	result at: 12 put: ((nodes at: 5) at: 2).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 14).
	result at: 8 put: (nodes at: 6).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 10).
	result at: 3 put: (nodes at: 8).
	result at: 4 put: (nodes at: 9).
	self addAll: (nodes at: 10) to: (result at: 5).
	self addAll: (nodes at: 11) to: (result at: 6).
	result at: 7 put: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait1: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	self addAll: (nodes at: 5) to: (result at: 5).
	self addAll: (nodes at: 6) to: (result at: 6).
	result at: 7 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait2: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 10).
	result at: 3 put: (nodes at: 5).
	result at: 4 put: (nodes at: 6).
	self addAll: (nodes at: 7) to: (result at: 5).
	self addAll: (nodes at: 8) to: (result at: 6).
	result at: 7 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait3: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 11 put: ((nodes at: 3) at: 1).
	result at: 12 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 14).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: (nodes at: 5).
	self addAll: (nodes at: 6) to: (result at: 5).
	self addAll: (nodes at: 7) to: (result at: 6).
	result at: 7 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait4: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 11 put: ((nodes at: 3) at: 1).
	result at: 12 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 14).
	result at: 8 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 10).
	result at: 3 put: (nodes at: 6).
	result at: 4 put: (nodes at: 7).
	self addAll: (nodes at: 8) to: (result at: 5).
	self addAll: (nodes at: 9) to: (result at: 6).
	result at: 7 put: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait5: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: (nodes at: 5).
	self addAll: (nodes at: 6) to: (result at: 5).
	self addAll: (nodes at: 7) to: (result at: 6).
	result at: 7 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait6: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 8 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 10).
	result at: 3 put: (nodes at: 6).
	result at: 4 put: (nodes at: 7).
	self addAll: (nodes at: 8) to: (result at: 5).
	self addAll: (nodes at: 9) to: (result at: 6).
	result at: 7 put: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait7: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 11 put: ((nodes at: 4) at: 1).
	result at: 12 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 14).
	result at: 3 put: (nodes at: 5).
	result at: 4 put: (nodes at: 6).
	self addAll: (nodes at: 7) to: (result at: 5).
	self addAll: (nodes at: 8) to: (result at: 6).
	result at: 7 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait8: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 11 put: ((nodes at: 4) at: 1).
	result at: 12 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 14).
	result at: 8 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 10).
	result at: 3 put: (nodes at: 7).
	result at: 4 put: (nodes at: 8).
	self addAll: (nodes at: 9) to: (result at: 5).
	self addAll: (nodes at: 10) to: (result at: 6).
	result at: 7 put: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait9: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 16 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: (nodes at: 5).
	self addAll: (nodes at: 6) to: (result at: 5).
	self addAll: (nodes at: 7) to: (result at: 6).
	result at: 7 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias10: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 14 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 6).
	result at: 4 put: ((nodes at: 6) at: 1).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 7).
	result at: 8 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias11: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 14 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 9 put: ((nodes at: 4) at: 1).
	result at: 10 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 12).
	result at: 3 put: (nodes at: 5).
	result at: 4 put: ((nodes at: 6) at: 1).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 7).
	result at: 8 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias12: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 14 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 9 put: ((nodes at: 4) at: 1).
	result at: 10 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 12).
	result at: 3 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 6).
	result at: 4 put: ((nodes at: 7) at: 1).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 8).
	result at: 8 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias13: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 14 put: (nodes at: 1).
	result at: 13 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	result at: 4 put: ((nodes at: 6) at: 1).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 7).
	result at: 8 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias14: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 14 put: (nodes at: 1).
	result at: 13 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 6).
	result at: 4 put: ((nodes at: 7) at: 1).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 8).
	result at: 8 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias15: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 14 put: (nodes at: 1).
	result at: 13 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 9 put: ((nodes at: 5) at: 1).
	result at: 10 put: ((nodes at: 5) at: 2).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 12).
	result at: 3 put: (nodes at: 6).
	result at: 4 put: ((nodes at: 7) at: 1).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 8).
	result at: 8 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias16: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 14 put: (nodes at: 1).
	result at: 13 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 9 put: ((nodes at: 5) at: 1).
	result at: 10 put: ((nodes at: 5) at: 2).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 12).
	result at: 3 put: (nodes at: 6).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 6).
	result at: 4 put: ((nodes at: 8) at: 1).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 8) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 9).
	result at: 8 put: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias1: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: ((nodes at: 4) at: 1).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 5).
	result at: 8 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias2: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 6).
	result at: 4 put: ((nodes at: 5) at: 1).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 6).
	result at: 8 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias3: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 9 put: ((nodes at: 3) at: 1).
	result at: 10 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 12).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: ((nodes at: 5) at: 1).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 6).
	result at: 8 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias4: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 9 put: ((nodes at: 3) at: 1).
	result at: 10 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 12).
	result at: 3 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 6).
	result at: 4 put: ((nodes at: 6) at: 1).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 7).
	result at: 8 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias5: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: ((nodes at: 5) at: 1).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 6).
	result at: 8 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias6: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 6).
	result at: 4 put: ((nodes at: 6) at: 1).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 7).
	result at: 8 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias7: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 9 put: ((nodes at: 4) at: 1).
	result at: 10 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 12).
	result at: 3 put: (nodes at: 5).
	result at: 4 put: ((nodes at: 6) at: 1).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 7).
	result at: 8 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias8: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 9 put: ((nodes at: 4) at: 1).
	result at: 10 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 12).
	result at: 3 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 6).
	result at: 4 put: ((nodes at: 7) at: 1).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 8).
	result at: 8 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias9: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 14 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: ((nodes at: 5) at: 1).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 6).
	result at: 8 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitBound1: nodes [
	| result |
	result := RustTraitBoundNode new.
	result type: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitBound2: nodes [
	| result |
	result := RustTraitBoundNode new.
	result forToken: ((nodes at: 1) at: 1).
	result lt: ((nodes at: 1) at: 2).
	result gt: ((nodes at: 1) at: 3).
	result addNodes: ((nodes at: 1) at: 4) to: result params.
	result addTokens: ((nodes at: 1) at: 5) to: result commas.
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitBound3: nodes [
	| result |
	result := RustTraitBoundNode new.
	result question: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitBound4: nodes [
	| result |
	result := RustTraitBoundNode new.
	result question: (nodes at: 1).
	result forToken: ((nodes at: 2) at: 1).
	result lt: ((nodes at: 2) at: 2).
	result gt: ((nodes at: 2) at: 3).
	result addNodes: ((nodes at: 2) at: 4) to: result params.
	result addTokens: ((nodes at: 2) at: 5) to: result commas.
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitBound5: nodes [
	| result |
	result := RustTraitBoundNode new.
	result leftParen: (nodes at: 1).
	result type: (nodes at: 2).
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitBound6: nodes [
	| result |
	result := RustTraitBoundNode new.
	result leftParen: (nodes at: 1).
	result forToken: ((nodes at: 2) at: 1).
	result lt: ((nodes at: 2) at: 2).
	result gt: ((nodes at: 2) at: 3).
	result addNodes: ((nodes at: 2) at: 4) to: result params.
	result addTokens: ((nodes at: 2) at: 5) to: result commas.
	result type: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitBound7: nodes [
	| result |
	result := RustTraitBoundNode new.
	result leftParen: (nodes at: 1).
	result question: (nodes at: 2).
	result type: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitBound8: nodes [
	| result |
	result := RustTraitBoundNode new.
	result leftParen: (nodes at: 1).
	result question: (nodes at: 2).
	result forToken: ((nodes at: 3) at: 1).
	result lt: ((nodes at: 3) at: 2).
	result gt: ((nodes at: 3) at: 3).
	result addNodes: ((nodes at: 3) at: 4) to: result params.
	result addTokens: ((nodes at: 3) at: 5) to: result commas.
	result type: (nodes at: 4).
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl10: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 9 put: (nodes at: 3).
	self add: (nodes at: 4) to: (result at: 2).
	result at: 3 put: (nodes at: 5).
	self add: (nodes at: 6) to: (result at: 2).
	result at: 4 put: (nodes at: 7).
	result at: 5 put: (nodes at: 8).
	self addAll: (nodes at: 9) to: (result at: 6).
	self addAll: (nodes at: 10) to: (result at: 7).
	result at: 8 put: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl11: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 10 put: (nodes at: 3).
	self add: (nodes at: 4) to: (result at: 2).
	result at: 3 put: (nodes at: 5).
	self add: (nodes at: 6) to: (result at: 2).
	result at: 4 put: (nodes at: 7).
	result at: 5 put: (nodes at: 8).
	self addAll: (nodes at: 9) to: (result at: 6).
	self addAll: (nodes at: 10) to: (result at: 7).
	result at: 8 put: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl12: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 10 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	self add: (nodes at: 5) to: (result at: 2).
	result at: 3 put: (nodes at: 6).
	self add: (nodes at: 7) to: (result at: 2).
	result at: 4 put: (nodes at: 8).
	result at: 5 put: (nodes at: 9).
	self addAll: (nodes at: 10) to: (result at: 6).
	self addAll: (nodes at: 11) to: (result at: 7).
	result at: 8 put: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl13: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 11 put: ((nodes at: 3) at: 1).
	result at: 12 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 14).
	self add: (nodes at: 4) to: (result at: 2).
	result at: 3 put: (nodes at: 5).
	self add: (nodes at: 6) to: (result at: 2).
	result at: 4 put: (nodes at: 7).
	result at: 5 put: (nodes at: 8).
	self addAll: (nodes at: 9) to: (result at: 6).
	self addAll: (nodes at: 10) to: (result at: 7).
	result at: 8 put: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl14: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 11 put: ((nodes at: 3) at: 1).
	result at: 12 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 14).
	result at: 9 put: (nodes at: 4).
	self add: (nodes at: 5) to: (result at: 2).
	result at: 3 put: (nodes at: 6).
	self add: (nodes at: 7) to: (result at: 2).
	result at: 4 put: (nodes at: 8).
	result at: 5 put: (nodes at: 9).
	self addAll: (nodes at: 10) to: (result at: 6).
	self addAll: (nodes at: 11) to: (result at: 7).
	result at: 8 put: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl15: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 11 put: ((nodes at: 3) at: 1).
	result at: 12 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 14).
	result at: 10 put: (nodes at: 4).
	self add: (nodes at: 5) to: (result at: 2).
	result at: 3 put: (nodes at: 6).
	self add: (nodes at: 7) to: (result at: 2).
	result at: 4 put: (nodes at: 8).
	result at: 5 put: (nodes at: 9).
	self addAll: (nodes at: 10) to: (result at: 6).
	self addAll: (nodes at: 11) to: (result at: 7).
	result at: 8 put: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl16: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 11 put: ((nodes at: 3) at: 1).
	result at: 12 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 14).
	result at: 10 put: (nodes at: 4).
	result at: 9 put: (nodes at: 5).
	self add: (nodes at: 6) to: (result at: 2).
	result at: 3 put: (nodes at: 7).
	self add: (nodes at: 8) to: (result at: 2).
	result at: 4 put: (nodes at: 9).
	result at: 5 put: (nodes at: 10).
	self addAll: (nodes at: 11) to: (result at: 6).
	self addAll: (nodes at: 12) to: (result at: 7).
	result at: 8 put: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl1: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	result at: 3 put: (nodes at: 3).
	self add: (nodes at: 4) to: (result at: 2).
	result at: 4 put: (nodes at: 5).
	result at: 5 put: (nodes at: 6).
	self addAll: (nodes at: 7) to: (result at: 6).
	self addAll: (nodes at: 8) to: (result at: 7).
	result at: 8 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl2: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 9 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	result at: 3 put: (nodes at: 4).
	self add: (nodes at: 5) to: (result at: 2).
	result at: 4 put: (nodes at: 6).
	result at: 5 put: (nodes at: 7).
	self addAll: (nodes at: 8) to: (result at: 6).
	self addAll: (nodes at: 9) to: (result at: 7).
	result at: 8 put: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl3: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 10 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	result at: 3 put: (nodes at: 4).
	self add: (nodes at: 5) to: (result at: 2).
	result at: 4 put: (nodes at: 6).
	result at: 5 put: (nodes at: 7).
	self addAll: (nodes at: 8) to: (result at: 6).
	self addAll: (nodes at: 9) to: (result at: 7).
	result at: 8 put: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl4: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 10 put: (nodes at: 2).
	result at: 9 put: (nodes at: 3).
	self add: (nodes at: 4) to: (result at: 2).
	result at: 3 put: (nodes at: 5).
	self add: (nodes at: 6) to: (result at: 2).
	result at: 4 put: (nodes at: 7).
	result at: 5 put: (nodes at: 8).
	self addAll: (nodes at: 9) to: (result at: 6).
	self addAll: (nodes at: 10) to: (result at: 7).
	result at: 8 put: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl5: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 11 put: ((nodes at: 2) at: 1).
	result at: 12 put: ((nodes at: 2) at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 14).
	self add: (nodes at: 3) to: (result at: 2).
	result at: 3 put: (nodes at: 4).
	self add: (nodes at: 5) to: (result at: 2).
	result at: 4 put: (nodes at: 6).
	result at: 5 put: (nodes at: 7).
	self addAll: (nodes at: 8) to: (result at: 6).
	self addAll: (nodes at: 9) to: (result at: 7).
	result at: 8 put: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl6: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 11 put: ((nodes at: 2) at: 1).
	result at: 12 put: ((nodes at: 2) at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 14).
	result at: 9 put: (nodes at: 3).
	self add: (nodes at: 4) to: (result at: 2).
	result at: 3 put: (nodes at: 5).
	self add: (nodes at: 6) to: (result at: 2).
	result at: 4 put: (nodes at: 7).
	result at: 5 put: (nodes at: 8).
	self addAll: (nodes at: 9) to: (result at: 6).
	self addAll: (nodes at: 10) to: (result at: 7).
	result at: 8 put: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl7: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 11 put: ((nodes at: 2) at: 1).
	result at: 12 put: ((nodes at: 2) at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 14).
	result at: 10 put: (nodes at: 3).
	self add: (nodes at: 4) to: (result at: 2).
	result at: 3 put: (nodes at: 5).
	self add: (nodes at: 6) to: (result at: 2).
	result at: 4 put: (nodes at: 7).
	result at: 5 put: (nodes at: 8).
	self addAll: (nodes at: 9) to: (result at: 6).
	self addAll: (nodes at: 10) to: (result at: 7).
	result at: 8 put: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl8: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 11 put: ((nodes at: 2) at: 1).
	result at: 12 put: ((nodes at: 2) at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 14).
	result at: 10 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	self add: (nodes at: 5) to: (result at: 2).
	result at: 3 put: (nodes at: 6).
	self add: (nodes at: 7) to: (result at: 2).
	result at: 4 put: (nodes at: 8).
	result at: 5 put: (nodes at: 9).
	self addAll: (nodes at: 10) to: (result at: 6).
	self addAll: (nodes at: 11) to: (result at: 7).
	result at: 8 put: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl9: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	result at: 3 put: (nodes at: 4).
	self add: (nodes at: 5) to: (result at: 2).
	result at: 4 put: (nodes at: 6).
	result at: 5 put: (nodes at: 7).
	self addAll: (nodes at: 8) to: (result at: 6).
	self addAll: (nodes at: 9) to: (result at: 7).
	result at: 8 put: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitObjectType1: nodes [
	| result |
	result := RustTraitObjectTypeNode new.
	result addNodes: ((nodes at: 1) at: 1) to: result typeBounds.
	result addTokens: ((nodes at: 1) at: 2) to: result pluses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitObjectType2: nodes [
	| result |
	result := RustTraitObjectTypeNode new.
	result dynToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result typeBounds.
	result addTokens: ((nodes at: 2) at: 2) to: result pluses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitObjectTypeOneBound1: nodes [
	| result |
	result := RustTraitObjectTypeNode new.
	result addNode: (nodes at: 1) to: result typeBounds.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitObjectTypeOneBound2: nodes [
	| result |
	result := RustTraitObjectTypeNode new.
	result dynToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result typeBounds.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleField1: nodes [
	| result |
	result := RustTupleFieldNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleField2: nodes [
	| result |
	result := RustTupleFieldNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result visibility: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortuplePattern1: nodes [
	| result |
	result := RustTuplePatternNode new.
	result leftParen: (nodes at: 1).
	result rightParen: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortuplePattern2: nodes [
	| result |
	result := RustTuplePatternNode new.
	result leftParen: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result patterns.
	result addTokens: ((nodes at: 2) at: 2) to: result bars.
	result addTokens: ((nodes at: 2) at: 3) to: result commas.
	result restPattern: ((nodes at: 2) at: 4).
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortuplePatternItems1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self add: (nodes at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortuplePatternItems2: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortuplePatternItems3: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortuplePatternItems4: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleStruct1: nodes [
	| result |
	result := Array new: 11.
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	result at: 5 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleStruct2: nodes [
	| result |
	result := Array new: 11.
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	result at: 6 put: (nodes at: 5).
	result at: 5 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleStruct3: nodes [
	| result |
	result := Array new: 11.
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 8).
	result at: 4 put: (nodes at: 5).
	result at: 5 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleStruct4: nodes [
	| result |
	result := Array new: 11.
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 8).
	result at: 4 put: (nodes at: 5).
	result at: 6 put: (nodes at: 6).
	result at: 5 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleStruct5: nodes [
	| result |
	result := Array new: 11.
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 9 put: ((nodes at: 3) at: 1).
	result at: 10 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 8).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: (nodes at: 5).
	result at: 5 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleStruct6: nodes [
	| result |
	result := Array new: 11.
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 9 put: ((nodes at: 3) at: 1).
	result at: 10 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 8).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: (nodes at: 5).
	result at: 6 put: (nodes at: 6).
	result at: 5 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleStruct7: nodes [
	| result |
	result := Array new: 11.
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 9 put: ((nodes at: 3) at: 1).
	result at: 10 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 8).
	result at: 3 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 8).
	result at: 4 put: (nodes at: 6).
	result at: 5 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleStruct8: nodes [
	| result |
	result := Array new: 11.
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 9 put: ((nodes at: 3) at: 1).
	result at: 10 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 8).
	result at: 3 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 8).
	result at: 4 put: (nodes at: 6).
	result at: 6 put: (nodes at: 7).
	result at: 5 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleStructPattern1: nodes [
	| result |
	result := RustTupleStructPatternNode new.
	result path: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleStructPattern2: nodes [
	| result |
	result := RustTupleStructPatternNode new.
	result path: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result patterns.
	result addTokens: ((nodes at: 3) at: 2) to: result bars.
	result addTokens: ((nodes at: 3) at: 3) to: result commas.
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleType1: nodes [
	| result |
	result := RustTupleTypeNode new.
	result leftParen: (nodes at: 1).
	result rightParen: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleType2: nodes [
	| result |
	result := RustTupleTypeNode new.
	result leftParen: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result types.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleType3: nodes [
	| result |
	result := RustTupleTypeNode new.
	result leftParen: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result types.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result addNode: (nodes at: 3) to: result types.
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias10: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 10 put: ((nodes at: 3) at: 1).
	result at: 11 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 13).
	result at: 4 put: (nodes at: 4).
	result at: 5 put: (nodes at: 5).
	result at: 3 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias11: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 10 put: ((nodes at: 3) at: 1).
	result at: 11 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 13).
	result at: 6 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias12: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 10 put: ((nodes at: 3) at: 1).
	result at: 11 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 13).
	result at: 6 put: (nodes at: 4).
	result at: 4 put: (nodes at: 5).
	result at: 5 put: (nodes at: 6).
	result at: 3 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias13: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 10 put: ((nodes at: 3) at: 1).
	result at: 11 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 13).
	result at: 7 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 9).
	result at: 3 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias14: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 10 put: ((nodes at: 3) at: 1).
	result at: 11 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 13).
	result at: 7 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 9).
	result at: 4 put: (nodes at: 6).
	result at: 5 put: (nodes at: 7).
	result at: 3 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias15: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 10 put: ((nodes at: 3) at: 1).
	result at: 11 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 13).
	result at: 7 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 9).
	result at: 6 put: (nodes at: 6).
	result at: 3 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias16: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 10 put: ((nodes at: 3) at: 1).
	result at: 11 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 13).
	result at: 7 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 9).
	result at: 6 put: (nodes at: 6).
	result at: 4 put: (nodes at: 7).
	result at: 5 put: (nodes at: 8).
	result at: 3 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias1: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias2: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 4 put: (nodes at: 3).
	result at: 5 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias3: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias4: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	result at: 5 put: (nodes at: 5).
	result at: 3 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias5: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 7 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 9).
	result at: 3 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias6: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 7 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 9).
	result at: 4 put: (nodes at: 5).
	result at: 5 put: (nodes at: 6).
	result at: 3 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias7: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 7 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 9).
	result at: 6 put: (nodes at: 5).
	result at: 3 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias8: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 7 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 9).
	result at: 6 put: (nodes at: 5).
	result at: 4 put: (nodes at: 6).
	result at: 5 put: (nodes at: 7).
	result at: 3 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias9: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 10 put: ((nodes at: 3) at: 1).
	result at: 11 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 13).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeBoundWhereClauseItem1: nodes [
	| result |
	result := RustTypeBoundWhereClauseItemNode new.
	result type: (nodes at: 1).
	result colon: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeBoundWhereClauseItem2: nodes [
	| result |
	result := RustTypeBoundWhereClauseItemNode new.
	result type: (nodes at: 1).
	result colon: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result typeBounds.
	result addTokens: ((nodes at: 3) at: 2) to: result pluses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeBoundWhereClauseItem3: nodes [
	| result |
	result := RustTypeBoundWhereClauseItemNode new.
	result forToken: ((nodes at: 1) at: 1).
	result lt: ((nodes at: 1) at: 2).
	result gt: ((nodes at: 1) at: 3).
	result addNodes: ((nodes at: 1) at: 4) to: result params.
	result addTokens: ((nodes at: 1) at: 5) to: result commas.
	result type: (nodes at: 2).
	result colon: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeBoundWhereClauseItem4: nodes [
	| result |
	result := RustTypeBoundWhereClauseItemNode new.
	result forToken: ((nodes at: 1) at: 1).
	result lt: ((nodes at: 1) at: 2).
	result gt: ((nodes at: 1) at: 3).
	result addNodes: ((nodes at: 1) at: 4) to: result params.
	result addTokens: ((nodes at: 1) at: 5) to: result commas.
	result type: (nodes at: 2).
	result colon: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result typeBounds.
	result addTokens: ((nodes at: 4) at: 2) to: result pluses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeParam1: nodes [
	| result |
	result := RustTypeParamNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeParam2: nodes [
	| result |
	result := RustTypeParamNode new.
	result name: (nodes at: 1).
	result equalsToken: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeParam3: nodes [
	| result |
	result := RustTypeParamNode new.
	result name: (nodes at: 1).
	result colon: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeParam4: nodes [
	| result |
	result := RustTypeParamNode new.
	result name: (nodes at: 1).
	result colon: (nodes at: 2).
	result equalsToken: (nodes at: 3).
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeParam5: nodes [
	| result |
	result := RustTypeParamNode new.
	result name: (nodes at: 1).
	result colon: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result typeBounds.
	result addTokens: ((nodes at: 3) at: 2) to: result pluses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeParam6: nodes [
	| result |
	result := RustTypeParamNode new.
	result name: (nodes at: 1).
	result colon: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result typeBounds.
	result addTokens: ((nodes at: 3) at: 2) to: result pluses.
	result equalsToken: (nodes at: 4).
	result type: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeParamBound1: nodes [
	| result |
	result := RustLifetimeNode new.
	result lifetime: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeParamBounds1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeParamBounds2: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self add: (nodes at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePath1: nodes [
	| result |
	result := RustTypePathNode new.
	result addToken: ((nodes at: 1) at: 1) to: result names.
	result addNode: ((nodes at: 1) at: 2) to: result genericArgses.
	result addToken: ((nodes at: 1) at: 3) to: result leftParens.
	result addToken: ((nodes at: 1) at: 4) to: result rightParens.
	result addToken: ((nodes at: 1) at: 5) to: result arrows.
	result addNodes: ((nodes at: 1) at: 6) to: result types.
	result addTokens: ((nodes at: 1) at: 7) to: result commas.
	result addToken: ((nodes at: 1) at: 8) to: result separators.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePath2: nodes [
	| result |
	result := RustTypePathNode new.
	result addToken: ((nodes at: 1) at: 1) to: result names.
	result addNode: ((nodes at: 1) at: 2) to: result genericArgses.
	result addToken: ((nodes at: 1) at: 3) to: result leftParens.
	result addToken: ((nodes at: 1) at: 4) to: result rightParens.
	result addToken: ((nodes at: 1) at: 5) to: result arrows.
	result addNodes: ((nodes at: 1) at: 6) to: result types.
	result addTokens: ((nodes at: 1) at: 7) to: result commas.
	result addToken: ((nodes at: 1) at: 8) to: result separators.
	result addTokens: ((nodes at: 2) at: 1) to: result separators.
	result addTokens: ((nodes at: 2) at: 2) to: result names.
	result addNodes: ((nodes at: 2) at: 3) to: result genericArgses.
	result addTokens: ((nodes at: 2) at: 4) to: result leftParens.
	result addTokens: ((nodes at: 2) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 2) at: 6) to: result arrows.
	result addNodes: ((nodes at: 2) at: 7) to: result types.
	result addTokens: ((nodes at: 2) at: 8) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePath3: nodes [
	| result |
	result := RustTypePathNode new.
	result addToken: (nodes at: 1) to: result separators.
	result addToken: ((nodes at: 2) at: 1) to: result names.
	result addNode: ((nodes at: 2) at: 2) to: result genericArgses.
	result addToken: ((nodes at: 2) at: 3) to: result leftParens.
	result addToken: ((nodes at: 2) at: 4) to: result rightParens.
	result addToken: ((nodes at: 2) at: 5) to: result arrows.
	result addNodes: ((nodes at: 2) at: 6) to: result types.
	result addTokens: ((nodes at: 2) at: 7) to: result commas.
	result addToken: ((nodes at: 2) at: 8) to: result separators.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePath4: nodes [
	| result |
	result := RustTypePathNode new.
	result addToken: (nodes at: 1) to: result separators.
	result addToken: ((nodes at: 2) at: 1) to: result names.
	result addNode: ((nodes at: 2) at: 2) to: result genericArgses.
	result addToken: ((nodes at: 2) at: 3) to: result leftParens.
	result addToken: ((nodes at: 2) at: 4) to: result rightParens.
	result addToken: ((nodes at: 2) at: 5) to: result arrows.
	result addNodes: ((nodes at: 2) at: 6) to: result types.
	result addTokens: ((nodes at: 2) at: 7) to: result commas.
	result addToken: ((nodes at: 2) at: 8) to: result separators.
	result addTokens: ((nodes at: 3) at: 1) to: result separators.
	result addTokens: ((nodes at: 3) at: 2) to: result names.
	result addNodes: ((nodes at: 3) at: 3) to: result genericArgses.
	result addTokens: ((nodes at: 3) at: 4) to: result leftParens.
	result addTokens: ((nodes at: 3) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 3) at: 6) to: result arrows.
	result addNodes: ((nodes at: 3) at: 7) to: result types.
	result addTokens: ((nodes at: 3) at: 8) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePathFn1: nodes [
	| result |
	result := Array new: 5.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePathFn2: nodes [
	| result |
	result := Array new: 5.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	self add: (nodes at: 4) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePathFn3: nodes [
	| result |
	result := Array new: 5.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 5).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePathFn4: nodes [
	| result |
	result := Array new: 5.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 5).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	self add: (nodes at: 5) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePathSegment1: nodes [
	| result |
	result := Array new: 8.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePathSegment2: nodes [
	| result |
	result := Array new: 8.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePathSegment3: nodes [
	| result |
	result := Array new: 8.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 3 put: ((nodes at: 2) at: 1).
	result at: 4 put: ((nodes at: 2) at: 2).
	result at: 5 put: ((nodes at: 2) at: 3).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePathSegment4: nodes [
	| result |
	result := Array new: 8.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 8 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePathSegment5: nodes [
	| result |
	result := Array new: 8.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 8 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePathSegment6: nodes [
	| result |
	result := Array new: 8.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 8 put: (nodes at: 2).
	result at: 3 put: ((nodes at: 3) at: 1).
	result at: 4 put: ((nodes at: 3) at: 2).
	result at: 5 put: ((nodes at: 3) at: 3).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypedSelf1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypedSelf2: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForunion1: nodes [
	| result |
	result := Array new: 10.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 5).
	result at: 6 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForunion2: nodes [
	| result |
	result := Array new: 10.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 7 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 5).
	result at: 6 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForunion3: nodes [
	| result |
	result := Array new: 10.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 8 put: ((nodes at: 3) at: 1).
	result at: 9 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 5).
	result at: 3 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 5).
	result at: 6 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForunion4: nodes [
	| result |
	result := Array new: 10.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 8 put: ((nodes at: 3) at: 1).
	result at: 9 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 5).
	result at: 7 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 5).
	result at: 6 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForunsafeBlockExpression1: nodes [
	| result |
	result := RustUnsafeBlockExpressionNode new.
	result unsafeToken: (nodes at: 1).
	result expression: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForuseDeclaration1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForuseTree10: nodes [
	| result |
	result := RustUseTreeNode new.
	result path: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForuseTree12: nodes [
	| result |
	result := RustUseTreeNode new.
	result path: (nodes at: 1).
	result asToken: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForuseTree1: nodes [
	| result |
	result := RustUseTreeNode new.
	result star: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForuseTree2: nodes [
	| result |
	result := RustUseTreeNode new.
	result leftBrace: (nodes at: 1).
	result rightBrace: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForuseTree3: nodes [
	| result |
	result := RustUseTreeNode new.
	result leftBrace: (nodes at: 1).
	result addNode: (nodes at: 2) to: result uses.
	result addTokens: ((nodes at: 3) at: 1) to: result commas.
	result addNodes: ((nodes at: 3) at: 2) to: result uses.
	result addToken: (nodes at: 4) to: result commas.
	result rightBrace: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForuseTree4: nodes [
	| result |
	result := RustUseTreeNode new.
	result colonColon: (nodes at: 1).
	result star: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForuseTree5: nodes [
	| result |
	result := RustUseTreeNode new.
	result colonColon: (nodes at: 1).
	result leftBrace: (nodes at: 2).
	result rightBrace: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForuseTree6: nodes [
	| result |
	result := RustUseTreeNode new.
	result colonColon: (nodes at: 1).
	result leftBrace: (nodes at: 2).
	result addNode: (nodes at: 3) to: result uses.
	result addTokens: ((nodes at: 4) at: 1) to: result commas.
	result addNodes: ((nodes at: 4) at: 2) to: result uses.
	result addToken: (nodes at: 5) to: result commas.
	result rightBrace: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForuseTree7: nodes [
	| result |
	result := RustUseTreeNode new.
	result basePath: (nodes at: 1).
	result colonColon: (nodes at: 2).
	result star: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForuseTree8: nodes [
	| result |
	result := RustUseTreeNode new.
	result basePath: (nodes at: 1).
	result colonColon: (nodes at: 2).
	result leftBrace: (nodes at: 3).
	result rightBrace: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForuseTree9: nodes [
	| result |
	result := RustUseTreeNode new.
	result basePath: (nodes at: 1).
	result colonColon: (nodes at: 2).
	result leftBrace: (nodes at: 3).
	result addNode: (nodes at: 4) to: result uses.
	result addTokens: ((nodes at: 5) at: 1) to: result commas.
	result addNodes: ((nodes at: 5) at: 2) to: result uses.
	result addToken: (nodes at: 6) to: result commas.
	result rightBrace: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem10: nodes [
	| result |
	result := RustTypeAliasNode new.
	result visibility: (nodes at: 1).
	result typeToken: ((nodes at: 2) at: 1).
	result name: ((nodes at: 2) at: 2).
	result semicolon: ((nodes at: 2) at: 3).
	result equalsToken: ((nodes at: 2) at: 4).
	result type: ((nodes at: 2) at: 5).
	result where: ((nodes at: 2) at: 6).
	result colon: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result typeBounds.
	result addTokens: ((nodes at: 2) at: 9) to: result pluses.
	result lt: ((nodes at: 2) at: 10).
	result gt: ((nodes at: 2) at: 11).
	result addNodes: ((nodes at: 2) at: 12) to: result params.
	result addTokens: ((nodes at: 2) at: 13) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem11: nodes [
	| result |
	result := RustStructNode new.
	result structToken: ((nodes at: 1) at: 1).
	result name: ((nodes at: 1) at: 2).
	result left: ((nodes at: 1) at: 3).
	result right: ((nodes at: 1) at: 4).
	result addNodes: ((nodes at: 1) at: 5) to: result fields.
	result addTokens: ((nodes at: 1) at: 6) to: result commas.
	result semicolon: ((nodes at: 1) at: 7).
	result where: ((nodes at: 1) at: 8).
	result lt: ((nodes at: 1) at: 9).
	result gt: ((nodes at: 1) at: 10).
	result addNodes: ((nodes at: 1) at: 11) to: result params.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem12: nodes [
	| result |
	result := RustStructNode new.
	result visibility: (nodes at: 1).
	result structToken: ((nodes at: 2) at: 1).
	result name: ((nodes at: 2) at: 2).
	result left: ((nodes at: 2) at: 3).
	result right: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result fields.
	result addTokens: ((nodes at: 2) at: 6) to: result commas.
	result semicolon: ((nodes at: 2) at: 7).
	result where: ((nodes at: 2) at: 8).
	result lt: ((nodes at: 2) at: 9).
	result gt: ((nodes at: 2) at: 10).
	result addNodes: ((nodes at: 2) at: 11) to: result params.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem13: nodes [
	| result |
	result := RustEnumNode new.
	result enumToken: ((nodes at: 1) at: 1).
	result name: ((nodes at: 1) at: 2).
	result leftBrace: ((nodes at: 1) at: 3).
	result rightBrace: ((nodes at: 1) at: 4).
	result addNodes: ((nodes at: 1) at: 5) to: result items.
	result addTokens: ((nodes at: 1) at: 6) to: result commas.
	result where: ((nodes at: 1) at: 7).
	result lt: ((nodes at: 1) at: 8).
	result gt: ((nodes at: 1) at: 9).
	result addNodes: ((nodes at: 1) at: 10) to: result params.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem14: nodes [
	| result |
	result := RustEnumNode new.
	result visibility: (nodes at: 1).
	result enumToken: ((nodes at: 2) at: 1).
	result name: ((nodes at: 2) at: 2).
	result leftBrace: ((nodes at: 2) at: 3).
	result rightBrace: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result items.
	result addTokens: ((nodes at: 2) at: 6) to: result commas.
	result where: ((nodes at: 2) at: 7).
	result lt: ((nodes at: 2) at: 8).
	result gt: ((nodes at: 2) at: 9).
	result addNodes: ((nodes at: 2) at: 10) to: result params.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem15: nodes [
	| result |
	result := RustUnionNode new.
	result unionToken: ((nodes at: 1) at: 1).
	result name: ((nodes at: 1) at: 2).
	result leftBrace: ((nodes at: 1) at: 3).
	result addNodes: ((nodes at: 1) at: 4) to: result fields.
	result addTokens: ((nodes at: 1) at: 5) to: result commas.
	result rightBrace: ((nodes at: 1) at: 6).
	result where: ((nodes at: 1) at: 7).
	result lt: ((nodes at: 1) at: 8).
	result gt: ((nodes at: 1) at: 9).
	result addNodes: ((nodes at: 1) at: 10) to: result params.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem16: nodes [
	| result |
	result := RustUnionNode new.
	result visibility: (nodes at: 1).
	result unionToken: ((nodes at: 2) at: 1).
	result name: ((nodes at: 2) at: 2).
	result leftBrace: ((nodes at: 2) at: 3).
	result addNodes: ((nodes at: 2) at: 4) to: result fields.
	result addTokens: ((nodes at: 2) at: 5) to: result commas.
	result rightBrace: ((nodes at: 2) at: 6).
	result where: ((nodes at: 2) at: 7).
	result lt: ((nodes at: 2) at: 8).
	result gt: ((nodes at: 2) at: 9).
	result addNodes: ((nodes at: 2) at: 10) to: result params.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem17: nodes [
	| result |
	result := RustConstantNode new.
	result constToken: ((nodes at: 1) at: 1).
	result name: ((nodes at: 1) at: 2).
	result colon: ((nodes at: 1) at: 3).
	result type: ((nodes at: 1) at: 4).
	result semicolon: ((nodes at: 1) at: 5).
	result equalsToken: ((nodes at: 1) at: 6).
	result value: ((nodes at: 1) at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem18: nodes [
	| result |
	result := RustConstantNode new.
	result visibility: (nodes at: 1).
	result constToken: ((nodes at: 2) at: 1).
	result name: ((nodes at: 2) at: 2).
	result colon: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result semicolon: ((nodes at: 2) at: 5).
	result equalsToken: ((nodes at: 2) at: 6).
	result value: ((nodes at: 2) at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem19: nodes [
	| result |
	result := RustStaticNode new.
	result staticToken: ((nodes at: 1) at: 1).
	result name: ((nodes at: 1) at: 2).
	result colon: ((nodes at: 1) at: 3).
	result type: ((nodes at: 1) at: 4).
	result semicolon: ((nodes at: 1) at: 5).
	result equalsToken: ((nodes at: 1) at: 6).
	result value: ((nodes at: 1) at: 7).
	result mutToken: ((nodes at: 1) at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem1: nodes [
	| result |
	result := RustModuleNode new.
	result modToken: ((nodes at: 1) at: 1).
	result name: ((nodes at: 1) at: 2).
	result semicolon: ((nodes at: 1) at: 3).
	result leftBrace: ((nodes at: 1) at: 4).
	result addNodes: ((nodes at: 1) at: 5) to: result attrs.
	result rightBrace: ((nodes at: 1) at: 6).
	result addNodes: ((nodes at: 1) at: 7) to: result items.
	result unsafeToken: ((nodes at: 1) at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem20: nodes [
	| result |
	result := RustStaticNode new.
	result visibility: (nodes at: 1).
	result staticToken: ((nodes at: 2) at: 1).
	result name: ((nodes at: 2) at: 2).
	result colon: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result semicolon: ((nodes at: 2) at: 5).
	result equalsToken: ((nodes at: 2) at: 6).
	result value: ((nodes at: 2) at: 7).
	result mutToken: ((nodes at: 2) at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem21: nodes [
	| result |
	result := RustTraitNode new.
	result traitToken: ((nodes at: 1) at: 1).
	result name: ((nodes at: 1) at: 2).
	result where: ((nodes at: 1) at: 3).
	result leftBrace: ((nodes at: 1) at: 4).
	result addNodes: ((nodes at: 1) at: 5) to: result attrs.
	result addNodes: ((nodes at: 1) at: 6) to: result items.
	result rightBrace: ((nodes at: 1) at: 7).
	result colon: ((nodes at: 1) at: 8).
	result addNodes: ((nodes at: 1) at: 9) to: result typeBounds.
	result addTokens: ((nodes at: 1) at: 10) to: result pluses.
	result lt: ((nodes at: 1) at: 11).
	result gt: ((nodes at: 1) at: 12).
	result addNodes: ((nodes at: 1) at: 13) to: result params.
	result addTokens: ((nodes at: 1) at: 14) to: result commas.
	result autoToken: ((nodes at: 1) at: 15).
	result unsafeToken: ((nodes at: 1) at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem22: nodes [
	| result |
	result := RustTraitNode new.
	result visibility: (nodes at: 1).
	result traitToken: ((nodes at: 2) at: 1).
	result name: ((nodes at: 2) at: 2).
	result where: ((nodes at: 2) at: 3).
	result leftBrace: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attrs.
	result addNodes: ((nodes at: 2) at: 6) to: result items.
	result rightBrace: ((nodes at: 2) at: 7).
	result colon: ((nodes at: 2) at: 8).
	result addNodes: ((nodes at: 2) at: 9) to: result typeBounds.
	result addTokens: ((nodes at: 2) at: 10) to: result pluses.
	result lt: ((nodes at: 2) at: 11).
	result gt: ((nodes at: 2) at: 12).
	result addNodes: ((nodes at: 2) at: 13) to: result params.
	result addTokens: ((nodes at: 2) at: 14) to: result commas.
	result autoToken: ((nodes at: 2) at: 15).
	result unsafeToken: ((nodes at: 2) at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem23: nodes [
	| result |
	result := RustTraitAliasNode new.
	result traitToken: ((nodes at: 1) at: 1).
	result name: ((nodes at: 1) at: 2).
	result equalsToken: ((nodes at: 1) at: 3).
	result colon: ((nodes at: 1) at: 4).
	result addNodes: ((nodes at: 1) at: 5) to: result typeBounds.
	result addTokens: ((nodes at: 1) at: 6) to: result pluses.
	result where: ((nodes at: 1) at: 7).
	result semicolon: ((nodes at: 1) at: 8).
	result lt: ((nodes at: 1) at: 9).
	result gt: ((nodes at: 1) at: 10).
	result addNodes: ((nodes at: 1) at: 11) to: result params.
	result addTokens: ((nodes at: 1) at: 12) to: result commas.
	result autoToken: ((nodes at: 1) at: 13).
	result unsafeToken: ((nodes at: 1) at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem24: nodes [
	| result |
	result := RustTraitAliasNode new.
	result visibility: (nodes at: 1).
	result traitToken: ((nodes at: 2) at: 1).
	result name: ((nodes at: 2) at: 2).
	result equalsToken: ((nodes at: 2) at: 3).
	result colon: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result typeBounds.
	result addTokens: ((nodes at: 2) at: 6) to: result pluses.
	result where: ((nodes at: 2) at: 7).
	result semicolon: ((nodes at: 2) at: 8).
	result lt: ((nodes at: 2) at: 9).
	result gt: ((nodes at: 2) at: 10).
	result addNodes: ((nodes at: 2) at: 11) to: result params.
	result addTokens: ((nodes at: 2) at: 12) to: result commas.
	result autoToken: ((nodes at: 2) at: 13).
	result unsafeToken: ((nodes at: 2) at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem25: nodes [
	| result |
	result := RustImplementationNode new.
	result implToken: ((nodes at: 1) at: 1).
	result addNodes: ((nodes at: 1) at: 2) to: result types.
	result leftBrace: ((nodes at: 1) at: 3).
	result addNodes: ((nodes at: 1) at: 4) to: result attrs.
	result rightBrace: ((nodes at: 1) at: 5).
	result addNodes: ((nodes at: 1) at: 6) to: result items.
	result where: ((nodes at: 1) at: 7).
	result lt: ((nodes at: 1) at: 8).
	result gt: ((nodes at: 1) at: 9).
	result addNodes: ((nodes at: 1) at: 10) to: result params.
	result addTokens: ((nodes at: 1) at: 11) to: result commas.
	result forToken: ((nodes at: 1) at: 12).
	result bang: ((nodes at: 1) at: 13).
	result constToken: ((nodes at: 1) at: 14).
	result unsafeToken: ((nodes at: 1) at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem26: nodes [
	| result |
	result := RustImplementationNode new.
	result visibility: (nodes at: 1).
	result implToken: ((nodes at: 2) at: 1).
	result addNodes: ((nodes at: 2) at: 2) to: result types.
	result leftBrace: ((nodes at: 2) at: 3).
	result addNodes: ((nodes at: 2) at: 4) to: result attrs.
	result rightBrace: ((nodes at: 2) at: 5).
	result addNodes: ((nodes at: 2) at: 6) to: result items.
	result where: ((nodes at: 2) at: 7).
	result lt: ((nodes at: 2) at: 8).
	result gt: ((nodes at: 2) at: 9).
	result addNodes: ((nodes at: 2) at: 10) to: result params.
	result addTokens: ((nodes at: 2) at: 11) to: result commas.
	result forToken: ((nodes at: 2) at: 12).
	result bang: ((nodes at: 2) at: 13).
	result constToken: ((nodes at: 2) at: 14).
	result unsafeToken: ((nodes at: 2) at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem27: nodes [
	| result |
	result := RustExternBlockNode new.
	result externToken: ((nodes at: 1) at: 1).
	result leftBrace: ((nodes at: 1) at: 2).
	result addNodes: ((nodes at: 1) at: 3) to: result attrs.
	result rightBrace: ((nodes at: 1) at: 4).
	result addNodes: ((nodes at: 1) at: 5) to: result items.
	result abi: ((nodes at: 1) at: 6).
	result unsafeToken: ((nodes at: 1) at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem28: nodes [
	| result |
	result := RustExternBlockNode new.
	result visibility: (nodes at: 1).
	result externToken: ((nodes at: 2) at: 1).
	result leftBrace: ((nodes at: 2) at: 2).
	result addNodes: ((nodes at: 2) at: 3) to: result attrs.
	result rightBrace: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result items.
	result abi: ((nodes at: 2) at: 6).
	result unsafeToken: ((nodes at: 2) at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem2: nodes [
	| result |
	result := RustModuleNode new.
	result visibility: (nodes at: 1).
	result modToken: ((nodes at: 2) at: 1).
	result name: ((nodes at: 2) at: 2).
	result semicolon: ((nodes at: 2) at: 3).
	result leftBrace: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attrs.
	result rightBrace: ((nodes at: 2) at: 6).
	result addNodes: ((nodes at: 2) at: 7) to: result items.
	result unsafeToken: ((nodes at: 2) at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem3: nodes [
	| result |
	result := RustExternCrateNode new.
	result externToken: ((nodes at: 1) at: 1).
	result crateToken: ((nodes at: 1) at: 2).
	result crate: ((nodes at: 1) at: 3).
	result semicolon: ((nodes at: 1) at: 4).
	result asToken: ((nodes at: 1) at: 5).
	result name: ((nodes at: 1) at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem4: nodes [
	| result |
	result := RustExternCrateNode new.
	result visibility: (nodes at: 1).
	result externToken: ((nodes at: 2) at: 1).
	result crateToken: ((nodes at: 2) at: 2).
	result crate: ((nodes at: 2) at: 3).
	result semicolon: ((nodes at: 2) at: 4).
	result asToken: ((nodes at: 2) at: 5).
	result name: ((nodes at: 2) at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem5: nodes [
	| result |
	result := RustUseDeclarationNode new.
	result useToken: ((nodes at: 1) at: 1).
	result use: ((nodes at: 1) at: 2).
	result semicolon: ((nodes at: 1) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem6: nodes [
	| result |
	result := RustUseDeclarationNode new.
	result visibility: (nodes at: 1).
	result useToken: ((nodes at: 2) at: 1).
	result use: ((nodes at: 2) at: 2).
	result semicolon: ((nodes at: 2) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem7: nodes [
	| result |
	result := RustFunctionNode new.
	result externToken: ((nodes at: 1) at: 1).
	result abi: ((nodes at: 1) at: 2).
	result unsafeToken: ((nodes at: 1) at: 3).
	result asyncToken: ((nodes at: 1) at: 4).
	result constToken: ((nodes at: 1) at: 5).
	result defaultToken: ((nodes at: 1) at: 6).
	result fnToken: ((nodes at: 1) at: 7).
	result name: ((nodes at: 1) at: 8).
	result leftParen: ((nodes at: 1) at: 9).
	result rightParen: ((nodes at: 1) at: 10).
	result block: ((nodes at: 1) at: 11).
	result semicolon: ((nodes at: 1) at: 12).
	result where: ((nodes at: 1) at: 13).
	result arrow: ((nodes at: 1) at: 14).
	result addNodes: ((nodes at: 1) at: 15) to: result types.
	result addNodes: ((nodes at: 1) at: 16) to: result attrs.
	result selfToken: ((nodes at: 1) at: 17).
	result mutToken: ((nodes at: 1) at: 18).
	result amp: ((nodes at: 1) at: 19).
	result lifetime: ((nodes at: 1) at: 20).
	result addTokens: ((nodes at: 1) at: 21) to: result colons.
	result addTokens: ((nodes at: 1) at: 22) to: result commas.
	result addNodes: ((nodes at: 1) at: 23) to: result patterns.
	result addTokens: ((nodes at: 1) at: 24) to: result bars.
	result addTokens: ((nodes at: 1) at: 25) to: result ellipsises.
	result lt: ((nodes at: 1) at: 26).
	result gt: ((nodes at: 1) at: 27).
	result addNodes: ((nodes at: 1) at: 28) to: result params.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem8: nodes [
	| result |
	result := RustFunctionNode new.
	result visibility: (nodes at: 1).
	result externToken: ((nodes at: 2) at: 1).
	result abi: ((nodes at: 2) at: 2).
	result unsafeToken: ((nodes at: 2) at: 3).
	result asyncToken: ((nodes at: 2) at: 4).
	result constToken: ((nodes at: 2) at: 5).
	result defaultToken: ((nodes at: 2) at: 6).
	result fnToken: ((nodes at: 2) at: 7).
	result name: ((nodes at: 2) at: 8).
	result leftParen: ((nodes at: 2) at: 9).
	result rightParen: ((nodes at: 2) at: 10).
	result block: ((nodes at: 2) at: 11).
	result semicolon: ((nodes at: 2) at: 12).
	result where: ((nodes at: 2) at: 13).
	result arrow: ((nodes at: 2) at: 14).
	result addNodes: ((nodes at: 2) at: 15) to: result types.
	result addNodes: ((nodes at: 2) at: 16) to: result attrs.
	result selfToken: ((nodes at: 2) at: 17).
	result mutToken: ((nodes at: 2) at: 18).
	result amp: ((nodes at: 2) at: 19).
	result lifetime: ((nodes at: 2) at: 20).
	result addTokens: ((nodes at: 2) at: 21) to: result colons.
	result addTokens: ((nodes at: 2) at: 22) to: result commas.
	result addNodes: ((nodes at: 2) at: 23) to: result patterns.
	result addTokens: ((nodes at: 2) at: 24) to: result bars.
	result addTokens: ((nodes at: 2) at: 25) to: result ellipsises.
	result lt: ((nodes at: 2) at: 26).
	result gt: ((nodes at: 2) at: 27).
	result addNodes: ((nodes at: 2) at: 28) to: result params.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem9: nodes [
	| result |
	result := RustTypeAliasNode new.
	result typeToken: ((nodes at: 1) at: 1).
	result name: ((nodes at: 1) at: 2).
	result semicolon: ((nodes at: 1) at: 3).
	result equalsToken: ((nodes at: 1) at: 4).
	result type: ((nodes at: 1) at: 5).
	result where: ((nodes at: 1) at: 6).
	result colon: ((nodes at: 1) at: 7).
	result addNodes: ((nodes at: 1) at: 8) to: result typeBounds.
	result addTokens: ((nodes at: 1) at: 9) to: result pluses.
	result lt: ((nodes at: 1) at: 10).
	result gt: ((nodes at: 1) at: 11).
	result addNodes: ((nodes at: 1) at: 12) to: result params.
	result addTokens: ((nodes at: 1) at: 13) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisibility1: nodes [
	| result |
	result := RustVisibilityNode new.
	result pubToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisibility2: nodes [
	| result |
	result := RustVisibilityNode new.
	result pubToken: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result crateToken: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisibility3: nodes [
	| result |
	result := RustVisibilityNode new.
	result pubToken: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result selfToken: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisibility4: nodes [
	| result |
	result := RustVisibilityNode new.
	result pubToken: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result superToken: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisibility5: nodes [
	| result |
	result := RustVisibilityNode new.
	result pubToken: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result inToken: (nodes at: 3).
	result path: (nodes at: 4).
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisibility6: nodes [
	| result |
	result := RustVisibilityNode new.
	result crateToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForwhereClause1: nodes [
	| result |
	result := RustWhereClauseNode new.
	result whereToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result clauses.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForwhereClause2: nodes [
	| result |
	result := RustWhereClauseNode new.
	result whereToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result clauses.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result addNode: (nodes at: 3) to: result clauses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForwildcardPattern1: nodes [
	| result |
	result := RustWildcardPatternNode new.
	result underscore: (nodes at: 1).
	^ result
]

{ #category : #testing }
RustParser >> tryAllTokens [
	^ true
]

{ #category : #testing }
RustParser >> useAllTokenIds [
	^ false
]
